{
    "methods": {
        "allowance(address,address)": {
            "stateMutability": "view",
            "code": "function allowance(address owner, address spender) external view returns (uint256)",
            "inputs": {
                "owner": {
                    "type": "address",
                    "description": "Token owner's address"
                },
                "spender": {
                    "type": "address",
                    "description": "Spender's address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256",
                    "description": "Allowance amount"
                }
            },
            "notice": "Amount of remaining tokens spender is allowed to transfer on behalf of the token owner"
        },
        "approve(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function approve(address spender, uint256 value) external nonpayable returns (bool)",
            "inputs": {
                "spender": {
                    "type": "address",
                    "description": "Spender's address"
                },
                "value": {
                    "type": "uint256",
                    "description": "Allowance amount"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool",
                    "description": "True if successful"
                }
            },
            "notice": "Set spender's allowance over the caller's tokens to be a given value."
        },
        "balanceOf(address)": {
            "stateMutability": "view",
            "code": "function balanceOf(address account) external view returns (uint256)",
            "inputs": {
                "account": {
                    "type": "address",
                    "description": "address The account"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "Get token balance of an account"
        },
        "burn(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function burn(uint256 _amount) external nonpayable",
            "inputs": {
                "_amount": {
                    "type": "uint256",
                    "description": "uint256 the amount of tokens to be burned"
                }
            },
            "outputs": {},
            "details": "allows a minter to burn some of its own tokens Validates that caller is a minter and that sender is not blacklisted amount is less than or equal to the minter's account balance"
        },
        "configureMinter(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function configureMinter(address minter, uint256 minterAllowedAmount) external nonpayable returns (bool)",
            "inputs": {
                "minter": {
                    "type": "address",
                    "description": "The address of the minter"
                },
                "minterAllowedAmount": {
                    "type": "uint256",
                    "description": "The minting amount allowed for the minter"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool",
                    "description": "True if the operation was successful."
                }
            },
            "details": "Function to add/update a new minter"
        },
        "currency()": {
            "stateMutability": "view",
            "code": "function currency() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            }
        },
        "decimals()": {
            "stateMutability": "view",
            "code": "function decimals() external view returns (uint8)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint8"
                }
            }
        },
        "initialize(string,string,string,uint8,address,address,address,address)": {
            "stateMutability": "nonpayable",
            "code": "function initialize(string tokenName, string tokenSymbol, string tokenCurrency, uint8 tokenDecimals, address newMasterMinter, address newPauser, address newBlacklister, address newOwner) external nonpayable",
            "inputs": {
                "tokenName": {
                    "type": "string"
                },
                "tokenSymbol": {
                    "type": "string"
                },
                "tokenCurrency": {
                    "type": "string"
                },
                "tokenDecimals": {
                    "type": "uint8"
                },
                "newMasterMinter": {
                    "type": "address"
                },
                "newPauser": {
                    "type": "address"
                },
                "newBlacklister": {
                    "type": "address"
                },
                "newOwner": {
                    "type": "address"
                }
            },
            "outputs": {}
        },
        "isMinter(address)": {
            "stateMutability": "view",
            "code": "function isMinter(address account) external view returns (bool)",
            "inputs": {
                "account": {
                    "type": "address",
                    "description": "The address to check"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Checks if account is a minter"
        },
        "masterMinter()": {
            "stateMutability": "view",
            "code": "function masterMinter() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "mint(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function mint(address _to, uint256 _amount) external nonpayable returns (bool)",
            "inputs": {
                "_to": {
                    "type": "address",
                    "description": "The address that will receive the minted tokens."
                },
                "_amount": {
                    "type": "uint256",
                    "description": "The amount of tokens to mint. Must be less than or equal to the minterAllowance of the caller."
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool",
                    "description": "A boolean that indicates if the operation was successful."
                }
            },
            "details": "Function to mint tokens"
        },
        "minterAllowance(address)": {
            "stateMutability": "view",
            "code": "function minterAllowance(address minter) external view returns (uint256)",
            "inputs": {
                "minter": {
                    "type": "address",
                    "description": "The address of the minter"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "Get minter allowance for an account"
        },
        "name()": {
            "stateMutability": "view",
            "code": "function name() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            }
        },
        "owner()": {
            "stateMutability": "view",
            "code": "function owner() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address",
                    "description": "the address of the owner"
                }
            },
            "details": "Tells the address of the owner"
        },
        "pause()": {
            "stateMutability": "nonpayable",
            "code": "function pause() external nonpayable",
            "inputs": {},
            "outputs": {},
            "details": "called by the owner to pause, triggers stopped state"
        },
        "paused()": {
            "stateMutability": "view",
            "code": "function paused() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "pauser()": {
            "stateMutability": "view",
            "code": "function pauser() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "removeMinter(address)": {
            "stateMutability": "nonpayable",
            "code": "function removeMinter(address minter) external nonpayable returns (bool)",
            "inputs": {
                "minter": {
                    "type": "address",
                    "description": "The address of the minter to remove"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool",
                    "description": "True if the operation was successful."
                }
            },
            "details": "Function to remove a minter"
        },
        "rescueERC20(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function rescueERC20(contract IERC20 tokenContract, address to, uint256 amount) external nonpayable",
            "inputs": {
                "tokenContract": {
                    "type": "contract IERC20",
                    "description": "ERC20 token contract address"
                },
                "to": {
                    "type": "address",
                    "description": "Recipient address"
                },
                "amount": {
                    "type": "uint256",
                    "description": "Amount to withdraw"
                }
            },
            "outputs": {},
            "notice": "Rescue ERC20 tokens locked up in this contract."
        },
        "rescuer()": {
            "stateMutability": "view",
            "code": "function rescuer() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address",
                    "description": "Rescuer's address"
                }
            },
            "notice": "Returns current rescuer"
        },
        "symbol()": {
            "stateMutability": "view",
            "code": "function symbol() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            }
        },
        "totalSupply()": {
            "stateMutability": "view",
            "code": "function totalSupply() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "Get totalSupply of token"
        },
        "transfer(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function transfer(address to, uint256 value) external nonpayable returns (bool)",
            "inputs": {
                "to": {
                    "type": "address",
                    "description": "Payee's address"
                },
                "value": {
                    "type": "uint256",
                    "description": "Transfer amount"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool",
                    "description": "True if successful"
                }
            },
            "notice": "Transfer tokens from the caller"
        },
        "transferFrom(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function transferFrom(address from, address to, uint256 value) external nonpayable returns (bool)",
            "inputs": {
                "from": {
                    "type": "address",
                    "description": "Payer's address"
                },
                "to": {
                    "type": "address",
                    "description": "Payee's address"
                },
                "value": {
                    "type": "uint256",
                    "description": "Transfer amount"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool",
                    "description": "True if successful"
                }
            },
            "notice": "Transfer tokens by spending allowance"
        },
        "transferOwnership(address)": {
            "stateMutability": "nonpayable",
            "code": "function transferOwnership(address newOwner) external nonpayable",
            "inputs": {
                "newOwner": {
                    "type": "address",
                    "description": "The address to transfer ownership to."
                }
            },
            "outputs": {},
            "details": "Allows the current owner to transfer control of the contract to a newOwner."
        },
        "unpause()": {
            "stateMutability": "nonpayable",
            "code": "function unpause() external nonpayable",
            "inputs": {},
            "outputs": {},
            "details": "called by the owner to unpause, returns to normal state"
        },
        "updateMasterMinter(address)": {
            "stateMutability": "nonpayable",
            "code": "function updateMasterMinter(address _newMasterMinter) external nonpayable",
            "inputs": {
                "_newMasterMinter": {
                    "type": "address"
                }
            },
            "outputs": {}
        },
        "updatePauser(address)": {
            "stateMutability": "nonpayable",
            "code": "function updatePauser(address _newPauser) external nonpayable",
            "inputs": {
                "_newPauser": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "update the pauser role"
        },
        "updateRescuer(address)": {
            "stateMutability": "nonpayable",
            "code": "function updateRescuer(address newRescuer) external nonpayable",
            "inputs": {
                "newRescuer": {
                    "type": "address",
                    "description": "New rescuer's address"
                }
            },
            "outputs": {},
            "notice": "Assign the rescuer role to a given address."
        }
    },
    "events": {
        "Approval": {
            "code": "event Approval(address indexed owner, address indexed spender, uint256 value)",
            "inputs": {
                "owner": {
                    "type": "address",
                    "indexed": true
                },
                "spender": {
                    "type": "address",
                    "indexed": true
                },
                "value": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "Burn": {
            "code": "event Burn(address indexed burner, uint256 amount)",
            "inputs": {
                "burner": {
                    "type": "address",
                    "indexed": true
                },
                "amount": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "MasterMinterChanged": {
            "code": "event MasterMinterChanged(address indexed newMasterMinter)",
            "inputs": {
                "newMasterMinter": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "Mint": {
            "code": "event Mint(address indexed minter, address indexed to, uint256 amount)",
            "inputs": {
                "minter": {
                    "type": "address",
                    "indexed": true
                },
                "to": {
                    "type": "address",
                    "indexed": true
                },
                "amount": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "MinterConfigured": {
            "code": "event MinterConfigured(address indexed minter, uint256 minterAllowedAmount)",
            "inputs": {
                "minter": {
                    "type": "address",
                    "indexed": true
                },
                "minterAllowedAmount": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "MinterRemoved": {
            "code": "event MinterRemoved(address indexed oldMinter)",
            "inputs": {
                "oldMinter": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "OwnershipTransferred": {
            "code": "event OwnershipTransferred(address previousOwner, address newOwner)",
            "inputs": {
                "previousOwner": {
                    "type": "address",
                    "indexed": false
                },
                "newOwner": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "Pause": {
            "code": "event Pause()",
            "inputs": {}
        },
        "PauserChanged": {
            "code": "event PauserChanged(address indexed newAddress)",
            "inputs": {
                "newAddress": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "RescuerChanged": {
            "code": "event RescuerChanged(address indexed newRescuer)",
            "inputs": {
                "newRescuer": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "Transfer": {
            "code": "event Transfer(address indexed from, address indexed to, uint256 value)",
            "inputs": {
                "from": {
                    "type": "address",
                    "indexed": true
                },
                "to": {
                    "type": "address",
                    "indexed": true
                },
                "value": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "Unpause": {
            "code": "event Unpause()",
            "inputs": {}
        }
    },
    "errors": {},
    "path": "/test",
    "title": "FiatTokenV1_1",
    "details": "ERC20 Token backed by fiat reserves",
    "name": "FiatTokenV1_1"
}