{
    "methods": {
        "owner()": {
            "stateMutability": "view",
            "code": "function owner() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address",
                    "description": "the address of the owner"
                }
            },
            "details": "Tells the address of the owner"
        },
        "pause()": {
            "stateMutability": "nonpayable",
            "code": "function pause() external nonpayable",
            "inputs": {},
            "outputs": {},
            "details": "called by the owner to pause, triggers stopped state"
        },
        "paused()": {
            "stateMutability": "view",
            "code": "function paused() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "pauser()": {
            "stateMutability": "view",
            "code": "function pauser() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "transferOwnership(address)": {
            "stateMutability": "nonpayable",
            "code": "function transferOwnership(address newOwner) external nonpayable",
            "inputs": {
                "newOwner": {
                    "type": "address",
                    "description": "The address to transfer ownership to."
                }
            },
            "outputs": {},
            "details": "Allows the current owner to transfer control of the contract to a newOwner."
        },
        "unpause()": {
            "stateMutability": "nonpayable",
            "code": "function unpause() external nonpayable",
            "inputs": {},
            "outputs": {},
            "details": "called by the owner to unpause, returns to normal state"
        },
        "updatePauser(address)": {
            "stateMutability": "nonpayable",
            "code": "function updatePauser(address _newPauser) external nonpayable",
            "inputs": {
                "_newPauser": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "update the pauser role"
        }
    },
    "events": {
        "OwnershipTransferred": {
            "code": "event OwnershipTransferred(address previousOwner, address newOwner)",
            "inputs": {
                "previousOwner": {
                    "type": "address",
                    "indexed": false
                },
                "newOwner": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "Pause": {
            "code": "event Pause()",
            "inputs": {}
        },
        "PauserChanged": {
            "code": "event PauserChanged(address indexed newAddress)",
            "inputs": {
                "newAddress": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "Unpause": {
            "code": "event Unpause()",
            "inputs": {}
        }
    },
    "errors": {},
    "path": "/test",
    "notice": "Base contract which allows children to implement an emergency stop mechanism",
    "details": "Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/feb665136c0dae9912e08397c1a21c4af3651ef3/contracts/lifecycle/Pausable.sol Modifications: 1. Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018) 2. Removed whenNotPause/whenPaused from pause/unpause (6/14/2018) 3. Removed whenPaused (6/14/2018) 4. Switches ownable library to use ZeppelinOS (7/12/18) 5. Remove constructor (7/13/18) 6. Reformat, conform to Solidity 0.6 syntax and add error messages (5/13/20) 7. Make public functions external (5/27/20)",
    "name": "Pausable"
}