{
    "methods": {
        "DEFAULT_ADMIN_ROLE()": {
            "stateMutability": "view",
            "code": "function DEFAULT_ADMIN_ROLE() external view returns (bytes32)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            }
        },
        "LOCKUP_DURATION()": {
            "stateMutability": "view",
            "code": "function LOCKUP_DURATION() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "OWNER_ROLE()": {
            "stateMutability": "view",
            "code": "function OWNER_ROLE() external view returns (bytes32)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            },
            "notice": "keccak256(\"OWNER_ROLE\")"
        },
        "__BasePausable__init(address)": {
            "stateMutability": "nonpayable",
            "code": "function __BasePausable__init(address owner) external nonpayable",
            "inputs": {
                "owner": {
                    "type": "address"
                }
            },
            "outputs": {}
        },
        "createPool(address[2],uint256[18],uint256)": {
            "stateMutability": "nonpayable",
            "code": "function createPool(address[2] addrs, uint256[18] uints, uint256 dbProjectId) external nonpayable returns (address pool)",
            "inputs": {
                "addrs": {
                    "type": "address[2]",
                    "description": "Array of address includes: - address of IDO token, - address of purchase token"
                },
                "uints": {
                    "type": "uint256[18]",
                    "description": "Array of pool information includes: - max purchase amount for KYC user, - max purchase amount for Not KYC user, - token project fee percentage, // will be sent to admin if success or investor in vice versa - galaxy participation fee percentage, // will be sent to admin - crowdfunding participation fee percentage, // will be sent to admin - galaxy pool proportion, (ratio with all project) - early access proportion, (ratio with only crowdfunding pool) - total raise amount, - whale open time, - whale duration, - community duration, - rate of IDO token (based on formula in README), - decimal of IDO token (based on formula in README, is different from decimals in contract of IDO token), - TGE date, - TGE percentage, - vesting cliff, - vesting frequency, - number of vesting release"
                },
                "dbProjectId": {
                    "type": "uint256",
                    "description": "Project Id in database"
                }
            },
            "outputs": {
                "pool": {
                    "type": "address",
                    "description": "Address of new pool"
                }
            },
            "notice": "Create new pool. One pool has 2 sub-pool: galaxy pool and crowfunding pool, with 2 different participation fee. In crowfunding pool, there is a part for WHALE to buy early (called EARLY ACCESS) and another for NORMAL user to buy (called NORMAL ACCESS). Duration of galaxy pool and EARLY ACCESS are same and before duration of NORMAL ACCESS. There are 3 types of fund: PARTICIPATION FEE, TOKEN FEE and COLLABORATOR FUND. Investors need to pay PURCHASE AMOUNT and PARTICIPATION FEE PURCHASE AMOUNT (purchase token) = TOKEN FEE + COLLABORATOR FUND = total raise amount (IDO token) * price Sale End -> TGE Date -> 14 days -> Lockup 14 days is a config variable in the system (constant) If project is success (not be cancelled by admin or funded enough IDO token or not emergency canceled in lockup duration),  - System's admin claims participation fee and token fee after lockup time    (call pool.claimParticipationFee(), pool.claimTokenFee())  - Collaborator claims collaborator fund (purchased amount - token fee) based on vesting rule after lockup time (vesting schedule start from TGE date)    (call pool.claimFund())  - Investors claim IDO token based on vesting rule after TGE date    (call vesting.claim())  - Collaborator withdraws redundant IDO token after TGE date    (call pool.withdrawRedundantIDOToken()) If project is fail before TGE Date (cancelled by admin or not be funded enough IDO token) (of course before TGE date)  - Investors withdraw purchased amount and participation fee after cancelled time or TGE date    (call pool.withdrawPurchasedAmountAndParticipationFee())  - Collaborator withdraws funded IDO token after cancelled time or TGE date    (call pool.withdrawRedundantIDOToken()) If project is fail after TGE Date and before Lockup time  - Investors claim IDO token based on vesting rule after TGE date and before cancelled time    (call vesting.claim())  - Investors withdraw purchased amount and participation fee at cancelled time    (call pool.withdrawPurchasedAmount())  - Collaborator withdraws redundant IDO token after TGE date and before cancelled time    (call pool.withdrawRedundantIDOToken())  - All remaining IDO will be locked in contract.",
            "details": "Only has one pool address respectively for one input params"
        },
        "createVesting()": {
            "stateMutability": "nonpayable",
            "code": "function createVesting() external nonpayable returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "getLockupDuration()": {
            "stateMutability": "pure",
            "code": "function getLockupDuration() external pure returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "getRoleAdmin(bytes32)": {
            "stateMutability": "view",
            "code": "function getRoleAdmin(bytes32 role) external view returns (bytes32)",
            "inputs": {
                "role": {
                    "type": "bytes32"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            },
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "grantRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function grantRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
        },
        "hasRole(bytes32,address)": {
            "stateMutability": "view",
            "code": "function hasRole(bytes32 role, address account) external view returns (bool)",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Returns `true` if `account` has been granted `role`."
        },
        "initialize(address,address)": {
            "stateMutability": "nonpayable",
            "code": "function initialize(address _poolImplementationAddress, address _vestingImplementationAddress) external nonpayable",
            "inputs": {
                "_poolImplementationAddress": {
                    "type": "address",
                    "description": "Address of pool implementation"
                },
                "_vestingImplementationAddress": {
                    "type": "address"
                }
            },
            "outputs": {},
            "notice": "Initialize pool factory with address of pool implementation",
            "details": "Called only once"
        },
        "isOwner(address)": {
            "stateMutability": "view",
            "code": "function isOwner(address sender) external view returns (bool)",
            "inputs": {
                "sender": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "paused()": {
            "stateMutability": "view",
            "code": "function paused() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Returns true if the contract is paused, and false otherwise."
        },
        "poolImplementationAddress()": {
            "stateMutability": "view",
            "code": "function poolImplementationAddress() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            },
            "details": "Address of pool implementation"
        },
        "renounceRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function renounceRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
        },
        "revokeRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function revokeRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
        },
        "setPoolImplementation(address)": {
            "stateMutability": "nonpayable",
            "code": "function setPoolImplementation(address _poolImplementationAddress) external nonpayable",
            "inputs": {
                "_poolImplementationAddress": {
                    "type": "address",
                    "description": "Address of new pool implementation"
                }
            },
            "outputs": {},
            "notice": "Set or change address of pool implementation",
            "details": "Only admin can can call it"
        },
        "setVestingImplementation(address)": {
            "stateMutability": "nonpayable",
            "code": "function setVestingImplementation(address _vestingImplementationAddress) external nonpayable",
            "inputs": {
                "_vestingImplementationAddress": {
                    "type": "address",
                    "description": "Address of new vesting implementation"
                }
            },
            "outputs": {},
            "notice": "Set or change address of vesting implementation",
            "details": "Only admin can can call it"
        },
        "supportsInterface(bytes4)": {
            "stateMutability": "view",
            "code": "function supportsInterface(bytes4 interfaceId) external view returns (bool)",
            "inputs": {
                "interfaceId": {
                    "type": "bytes4"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "See {IERC165-supportsInterface}."
        },
        "vestingImplementationAddress()": {
            "stateMutability": "view",
            "code": "function vestingImplementationAddress() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            },
            "details": "Address of vesting implementation"
        }
    },
    "events": {
        "Initialized": {
            "code": "event Initialized(uint8 version)",
            "inputs": {
                "version": {
                    "type": "uint8",
                    "indexed": false
                }
            }
        },
        "Paused": {
            "code": "event Paused(address account)",
            "inputs": {
                "account": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "PoolCreated": {
            "code": "event PoolCreated(bytes32 poolInfoHash, address pool)",
            "inputs": {
                "poolInfoHash": {
                    "type": "bytes32",
                    "indexed": false
                },
                "pool": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "RoleAdminChanged": {
            "code": "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "previousAdminRole": {
                    "type": "bytes32",
                    "indexed": true
                },
                "newAdminRole": {
                    "type": "bytes32",
                    "indexed": true
                }
            }
        },
        "RoleGranted": {
            "code": "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "account": {
                    "type": "address",
                    "indexed": true
                },
                "sender": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "RoleRevoked": {
            "code": "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "account": {
                    "type": "address",
                    "indexed": true
                },
                "sender": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "Unpaused": {
            "code": "event Unpaused(address account)",
            "inputs": {
                "account": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "UpdatePoolImplementation": {
            "code": "event UpdatePoolImplementation(address indexed oldPoolImplementation, address indexed newPoolImplementation)",
            "inputs": {
                "oldPoolImplementation": {
                    "type": "address",
                    "indexed": true
                },
                "newPoolImplementation": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "UpdateVestingImplementation": {
            "code": "event UpdateVestingImplementation(address indexed oldVestingImplementation, address indexed newVestingImplementation)",
            "inputs": {
                "oldVestingImplementation": {
                    "type": "address",
                    "indexed": true
                },
                "newVestingImplementation": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "VestingCreated": {
            "code": "event VestingCreated(address sender, address vesting)",
            "inputs": {
                "sender": {
                    "type": "address",
                    "indexed": false
                },
                "vesting": {
                    "type": "address",
                    "indexed": false
                }
            }
        }
    },
    "errors": {},
    "path": "contracts/core",
    "name": "IgnitionFactory"
}