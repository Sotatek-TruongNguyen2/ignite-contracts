{
  "address": "0xdeB8fa252aDBf1d8a1bFA1791C5b2C971AD11FA8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "presentStatus",
          "type": "bool"
        }
      ],
      "name": "AlreadySetRedeemableTGE",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForEarlyAccess",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForGalaxyPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForKYCUser",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForNotKYCUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedMaxPurchaseAmountForUser",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedTotalRaiseAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedToRedeemTGEIDOAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughConditionToWithdrawIDOToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughConditionToWithdrawPurchaseToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "NotInWhaleList",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "whaleOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whaleCloseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityCloseTime",
          "type": "uint256"
        }
      ],
      "name": "NotUpdateValidTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotValidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYetTimeToRedeemTGE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemExceedMaxTGEAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "whaleOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whaleCloseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityCloseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "TimeOutToBuyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimeOutToSetPoolStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "BuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPurchaseAmountForKYCUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPurchaseAmountForNotKYCUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "TGEDate",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "TGEPercentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "galaxyParticipationFeePercentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "crowdfundingParticipationFeePercentage",
          "type": "uint16"
        }
      ],
      "name": "PoolCreatedChild1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "galaxyPoolProportion",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "earlyAccessProportion",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRaiseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleCloseTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityCloseTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        }
      ],
      "name": "PoolCreatedChild2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemTGEAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        }
      ],
      "name": "SetIDOTokenAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "redeemable",
          "type": "bool"
        }
      ],
      "name": "SetTGERedeemable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "UpdateFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "UpdateOfferedCurrencyRateAndDecimal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "UpdateOpenPoolStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "UpdateRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleCloseTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityCloseTime",
          "type": "uint64"
        }
      ],
      "name": "UpdateTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawIDOTokenRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawIDOToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawPurchaseTokenRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPurchaseToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDOToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NORMAL_USER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGEDate",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGEPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGERedeemable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHALE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "buyTokenInCrowdfundingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "buyTokenInCrowdfundingPoolWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPurchaseBaseOnAllocations",
          "type": "uint256"
        }
      ],
      "name": "buyTokenInGalaxyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPurchaseBaseOnAllocations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "buyTokenInGalaxyPoolWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityCloseTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityOpenTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crowdfundingParticipationFeePercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyAccessProportion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "galaxyParticipationFeePercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "galaxyPoolProportion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "addrs",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[14]",
          "name": "uints",
          "type": "uint256[14]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForEarlyAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForGalaxyPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForKYCUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForNotKYCUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offeredCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactory",
      "outputs": [
        {
          "internalType": "contract IPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmountInEarlyAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmountInGalaxyPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_IDORedeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemTGEIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_TGERedeemableStatus",
          "type": "bool"
        }
      ],
      "name": "setRedeemableTGEIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaiseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_newWhaleCloseTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_newCommunityCloseTime",
          "type": "uint64"
        }
      ],
      "name": "updateTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIDOAirdropAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIDOTGEAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPurchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whaleCloseTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whaleOpenTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawIDOTokenRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawPurchaseTokenRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawPurchaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc921da28c9769ecaacc0630a6ba348ea04c586f448865b25fa61a9064ff01cf5",
  "receipt": {
    "to": null,
    "from": "0x9460b481366b7462af4f7991d430e5eB97FAAEB5",
    "contractAddress": "0xdeB8fa252aDBf1d8a1bFA1791C5b2C971AD11FA8",
    "transactionIndex": 2,
    "gasUsed": "2777275",
    "logsBloom": "0x
    "blockHash": "0xf2f52bdc66093508eb92809d3a2ff2f3682e5250fa54a92d778a0ce9ed2b78e3",
    "transactionHash": "0xc921da28c9769ecaacc0630a6ba348ea04c586f448865b25fa61a9064ff01cf5",
    "logs": [],
    "blockNumber": 26070187,
    "cumulativeGasUsed": "2925978",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6054ad8f649b2dbf15deb68caecd2d05",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"presentStatus\",\"type\":\"bool\"}],\"name\":\"AlreadySetRedeemableTGE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForEarlyAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForGalaxyPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForKYCUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForNotKYCUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaxPurchaseAmountForUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedTotalRaiseAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToRedeemTGEIDOAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughConditionToWithdrawIDOToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughConditionToWithdrawPurchaseToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"NotInWhaleList\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whaleOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleCloseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityCloseTime\",\"type\":\"uint256\"}],\"name\":\"NotUpdateValidTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotValidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYetTimeToRedeemTGE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemExceedMaxTGEAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whaleOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleCloseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityCloseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TimeOutToBuyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimeOutToSetPoolStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPurchaseAmountForKYCUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPurchaseAmountForNotKYCUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"TGEDate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"TGEPercentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"galaxyParticipationFeePercentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"crowdfundingParticipationFeePercentage\",\"type\":\"uint16\"}],\"name\":\"PoolCreatedChild1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"galaxyPoolProportion\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"earlyAccessProportion\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRaiseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleCloseTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityCloseTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"}],\"name\":\"PoolCreatedChild2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemTGEAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"}],\"name\":\"SetIDOTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"redeemable\",\"type\":\"bool\"}],\"name\":\"SetTGERedeemable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"UpdateFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"UpdateOfferedCurrencyRateAndDecimal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateOpenPoolStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"UpdateRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleCloseTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityCloseTime\",\"type\":\"uint64\"}],\"name\":\"UpdateTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawIDOTokenRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawIDOToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawPurchaseTokenRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPurchaseToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDOToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NORMAL_USER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGEDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGEPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGERedeemable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHALE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokenInCrowdfundingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenInCrowdfundingPoolWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchaseBaseOnAllocations\",\"type\":\"uint256\"}],\"name\":\"buyTokenInGalaxyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchaseBaseOnAllocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenInGalaxyPoolWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityCloseTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityOpenTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdfundingParticipationFeePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyAccessProportion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galaxyParticipationFeePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galaxyPoolProportion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"addrs\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[14]\",\"name\":\"uints\",\"type\":\"uint256[14]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForEarlyAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForGalaxyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForKYCUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForNotKYCUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offeredCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmountInEarlyAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmountInGalaxyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_IDORedeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemTGEIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_TGERedeemableStatus\",\"type\":\"bool\"}],\"name\":\"setRedeemableTGEIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaiseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newWhaleCloseTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newCommunityCloseTime\",\"type\":\"uint64\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIDOAirdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIDOTGEAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleCloseTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleOpenTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawIDOTokenRecipient\",\"type\":\"address\"}],\"name\":\"withdrawIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawPurchaseTokenRecipient\",\"type\":\"address\"}],\"name\":\"withdrawPurchaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyTokenInCrowdfundingPool(bytes32[],uint256)\":{\"details\":\"Must be in time for crowdfunding pool and pool is not closed\",\"params\":{\"_purchaseAmount\":\"Purchase amount of investor\",\"proof\":\"Respective proof for a leaf, which is respective for investor in merkle tree\"}},\"buyTokenInCrowdfundingPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)\":{\"details\":\"Investor do not need execute approve transaction, but need to sign data off-chain; used only for USDC. Must be in time for crowdfunding pool and pool is not closed\",\"params\":{\"_allowance\":\"Allowance amount of investor's USDC for pool\",\"_deadline\":\"Deadline of off-chain investor's signature\",\"_purchaseAmount\":\"Purchase amount of investor\",\"_signature\":\"Signature of investor\",\"proof\":\"Respective proof for a leaf, which is respective for investor in merkle tree\"}},\"buyTokenInGalaxyPool(bytes32[],uint256,uint256)\":{\"details\":\"Must be in time for whale and pool is not closed\",\"params\":{\"_maxPurchaseBaseOnAllocations\":\"Max purchase amount base on allocation of whale\",\"_purchaseAmount\":\"Purchase amount of investor\",\"proof\":\"Respective proof for a leaf, which is respective for investor in merkle tree\"}},\"buyTokenInGalaxyPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)\":{\"details\":\"Investor do not need execute approve transaction, but need to sign data off-chain; used only for USDC. Must be in time for whale and pool is not closed\",\"params\":{\"_deadline\":\"Deadline of off-chain investor's signature\",\"_maxPurchaseBaseOnAllocations\":\"Max purchase amount base on allocation of whale\",\"_purchaseAmount\":\"Purchase amount of investor\",\"_signature\":\"Signature of investor\",\"proof\":\"Respective proof for a leaf, which is respective for investor in merkle tree\"}},\"closePool()\":{\"details\":\"Only admin can call it\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address[2],uint256[14])\":{\"details\":\"Emit 2 events\",\"params\":{\"addrs\":\"Array of address includes: address of IDO token, address of purchase token\",\"uints\":\"Array of pool information includes: max purchase amount for KYC user, max purchase amount for Not KYC user, TGE date, TGE percentage,  galaxy participation fee percentage, crowdfunding participation fee percentage, galaxy pool proportion, early access proportion, total raise amount, whale open time, whale duration, community duration, rate and decimal of IDO token\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeemTGEIDOToken(uint256)\":{\"params\":{\"_IDORedeemAmount\":\"Amount of IDO token is wanted to redeem\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setRedeemableTGEIDOToken(bool)\":{\"details\":\"Only admin can call it\"},\"setRoot(bytes32)\":{\"details\":\"Only admin can call it\",\"params\":{\"_root\":\"Root of merkle tree\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateTime(uint64,uint64)\":{\"details\":\"Only admin can call it, galaxy pool must be closed before crowdfunding pool\",\"params\":{\"_newCommunityCloseTime\":\"New close time of crowdfunding pool\",\"_newWhaleCloseTime\":\"New close time of galaxy pool\"}},\"withdrawIDOToken(address)\":{\"details\":\"Only admin can call it after pool closed\",\"params\":{\"_withdrawIDOTokenRecipient\":\"Address of recipient\"}},\"withdrawPurchaseToken(address)\":{\"details\":\"Only admin can call it after pool closed\",\"params\":{\"_withdrawPurchaseTokenRecipient\":\"Address of recipient\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyTokenInCrowdfundingPool(bytes32[],uint256)\":{\"notice\":\"Investor buy token in crowdfunding pool\"},\"buyTokenInCrowdfundingPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)\":{\"notice\":\"Investor buy token in crowdfunding pool\"},\"buyTokenInGalaxyPool(bytes32[],uint256,uint256)\":{\"notice\":\"Investor buy token in galaxy pool\"},\"buyTokenInGalaxyPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)\":{\"notice\":\"Investor buy token in galaxy pool\"},\"closePool()\":{\"notice\":\"Close pool: cancel project, nobody can buy token\"},\"initialize(address[2],uint256[14])\":{\"notice\":\"Initialize a pool with its information\"},\"redeemTGEIDOToken(uint256)\":{\"notice\":\"Investor redeem IDO token after TGE date\"},\"setRedeemableTGEIDOToken(bool)\":{\"notice\":\"Allow or disallow investors to redeem TGE amount of IDO token\"},\"setRoot(bytes32)\":{\"notice\":\"Set merkle tree root after snapshoting information of investor\"},\"updateTime(uint64,uint64)\":{\"notice\":\"Update time for galaxy pool and crowdfunding pool\"},\"withdrawIDOToken(address)\":{\"notice\":\"Admin withdraw redundant IDO token in pool\"},\"withdrawPurchaseToken(address)\":{\"notice\":\"Admin withdraw purchase token in pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDOpool/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/IDOpool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Pausable.sol\\\";\\nimport \\\"../utils/ReentrancyGuard.sol\\\";\\nimport \\\"../extensions/IgnitionList.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\ncontract Pool is Pausable, ReentrancyGuard, IgnitionList, AccessControl, Initializable {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint;\\n\\n    struct OfferedCurrency {\\n        uint rate;\\n        uint decimal;\\n    }\\n\\n    // keccak256(\\\"WHALE\\\")\\n    bytes32 public constant WHALE = 0xed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95;\\n\\n    // keccak256(\\\"NORMAL_USER\\\")\\n    bytes32 public constant NORMAL_USER = 0x13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e01;\\n\\n    IPoolFactory public poolFactory;\\n    uint16 public constant PERCENTAGE_DENOMINATOR = 10000;\\n    IERC20 public IDOToken;\\n    IERC20 public purchaseToken;\\n    OfferedCurrency public offeredCurrency;\\n\\n    uint public maxPurchaseAmountForGalaxyPool;\\n    uint public maxPurchaseAmountForEarlyAccess;\\n    uint public maxPurchaseAmountForKYCUser;\\n    uint public maxPurchaseAmountForNotKYCUser;\\n    \\n    uint64 public TGEDate;\\n    uint16 public TGEPercentage;\\n    uint16 public galaxyParticipationFeePercentage;\\n    uint16 public crowdfundingParticipationFeePercentage;\\n    uint16 public galaxyPoolProportion;\\n    uint16 public earlyAccessProportion;\\n    bool public TGERedeemable;\\n    uint public totalRaiseAmount;\\n\\n    uint64 public whaleOpenTime;\\n    uint64 public whaleCloseTime;\\n    uint64 public communityOpenTime;\\n    uint64 public communityCloseTime;\\n\\n    uint public purchasedAmountInGalaxyPool;\\n    uint public purchasedAmountInEarlyAccess;\\n    uint public purchasedAmount;\\n\\n    mapping(address => uint) public userPurchasedAmount;\\n    mapping(address => uint) public userIDOAirdropAmount;\\n    mapping(address => uint) public userIDOTGEAmount;\\n\\n    event UpdateRoot(bytes32 root);\\n    event SetTGERedeemable(bool redeemable);\\n    event SetIDOTokenAddress(address IDOToken);\\n    event RedeemTGEAmount(address buyer, uint redeemAmount);\\n    event UpdateFeeRecipient(address indexed feeRecipient);\\n    event UpdateOpenPoolStatus(address indexed pool, bool status);\\n    event UpdateOfferedCurrencyRateAndDecimal(uint _rate, uint _decimal);\\n    event WithdrawIDOToken(address withdrawIDOTokenRecipient, address IDOToken, uint remainAmount);\\n    event BuyToken(address indexed buyer, address indexed pool, address indexed IDOToken, uint purchaseAmount);\\n    event WithdrawPurchaseToken(address withdrawPurchaseTokenRecipient, address purchaseToken, uint purchaseAmount);\\n    event UpdateTime(uint64 whaleOpenTime, uint64 whaleCloseTime, uint64 communityOpenTime, uint64 communityCloseTime);\\n    event PoolCreatedChild1(address IDOToken, address purchaseToken, uint maxPurchaseAmountForKYCUser, uint maxPurchaseAmountForNotKYCUser, uint64 TGEDate, uint16 TGEPercentage, uint16 galaxyParticipationFeePercentage, uint16 crowdfundingParticipationFeePercentage);\\n    event PoolCreatedChild2(uint16 galaxyPoolProportion, uint16 earlyAccessProportion, uint totalRaiseAmount, uint64 whaleOpenTime, uint64 whaleCloseTime, uint64 communityCloseTime, uint rate, uint decimal);\\n\\n    error NotAdmin();\\n    error ZeroAmount();\\n    error ZeroAddress();\\n    error NotValidSignature();\\n    error NotYetTimeToRedeemTGE();\\n    error TimeOutToSetPoolStatus();\\n    error RedeemExceedMaxTGEAmount();\\n    error NotInWhaleList(address buyer);\\n    error NotAllowedToRedeemTGEIDOAmount();\\n    error ExceedMaxPurchaseAmountForUser();\\n    error NotEnoughConditionToWithdrawIDOToken();\\n    error NotEnoughConditionToWithdrawPurchaseToken();\\n    error AlreadySetRedeemableTGE(bool presentStatus);\\n    error ExceedTotalRaiseAmount(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForKYCUser(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForGalaxyPool(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForNotKYCUser(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForEarlyAccess(address buyer, uint purchaseAmount);\\n    error NotEnoughAllowance(address buyer, address purchaseToken, uint allowance, uint amount);\\n    error NotUpdateValidTime(uint whaleOpenTime, uint whaleCloseTime, uint communityOpenTime, uint communityCloseTime);\\n    error TimeOutToBuyToken(uint whaleOpenTime, uint whaleCloseTime, uint communityOpenTime, uint communityCloseTime, uint timestamp, address buyer);\\n\\n    /**\\n     * @dev Check whether or not sender of transaction has admin role\\n     */\\n    modifier onlyAdmin {\\n        if(!poolFactory.hasAdminRole(_msgSender())){\\n            revert NotAdmin();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize a pool with its information\\n     * @dev Emit 2 events\\n     * @param addrs Array of address includes: address of IDO token, address of purchase token\\n     * @param uints Array of pool information includes: max purchase amount for KYC user, max purchase amount for Not KYC user, TGE date, TGE percentage, \\n     * galaxy participation fee percentage, crowdfunding participation fee percentage, galaxy pool proportion, early access proportion,\\n     * total raise amount, whale open time, whale duration, community duration, rate and decimal of IDO token\\n     */\\n    function initialize(address[2] memory addrs, uint[14] memory uints) external initializer{\\n        {\\n            poolFactory = IPoolFactory(_msgSender());\\n        }\\n        {\\n            address _IDOToken = addrs[0];\\n            address _purchaseToken = addrs[1];\\n            IDOToken = IERC20(_IDOToken);\\n            purchaseToken = IERC20(_purchaseToken);\\n        }\\n        {\\n            uint _maxPurchaseAmountForKYCUser = uints[0];\\n            uint _maxPurchaseAmountForNotKYCUser = uints[1];\\n            maxPurchaseAmountForKYCUser = _maxPurchaseAmountForKYCUser;\\n            maxPurchaseAmountForNotKYCUser = _maxPurchaseAmountForNotKYCUser;\\n        }\\n        {\\n            uint _TGEDate = uints[2];\\n            uint _TGEPercentage = uints[3];\\n            TGEDate = SafeCast.toUint64(_TGEDate);\\n            TGEPercentage = SafeCast.toUint16(_TGEPercentage);\\n        }\\n        {\\n            uint _galaxyParticipationFeePercentage = uints[4];\\n            uint _crowdfundingParticipationFeePercentage = uints[5];\\n            galaxyParticipationFeePercentage = SafeCast.toUint16(_galaxyParticipationFeePercentage);\\n            crowdfundingParticipationFeePercentage = SafeCast.toUint16(_crowdfundingParticipationFeePercentage);\\n        }\\n        {\\n            uint _galaxyPoolProportion = uints[6];\\n            uint _earlyAccessProportion = uints[7];\\n            uint _totalRaiseAmount = uints[8];\\n            galaxyPoolProportion = SafeCast.toUint16(_galaxyPoolProportion);\\n            earlyAccessProportion = SafeCast.toUint16(_earlyAccessProportion);\\n            totalRaiseAmount = _totalRaiseAmount;\\n\\n            maxPurchaseAmountForGalaxyPool = _totalRaiseAmount * _galaxyPoolProportion / PERCENTAGE_DENOMINATOR;\\n            maxPurchaseAmountForEarlyAccess = _totalRaiseAmount * (PERCENTAGE_DENOMINATOR - _galaxyPoolProportion) * _earlyAccessProportion / PERCENTAGE_DENOMINATOR / PERCENTAGE_DENOMINATOR;\\n        }\\n        {\\n            uint _whaleOpenTime = uints[9];\\n            uint _whaleDuration = uints[10];\\n            uint _communityDuration = uints[11];\\n            whaleOpenTime = SafeCast.toUint64(_whaleOpenTime);\\n            whaleCloseTime = SafeCast.toUint64(_whaleOpenTime+_whaleDuration);\\n            communityOpenTime = whaleCloseTime;\\n            communityCloseTime = SafeCast.toUint64(communityOpenTime + _communityDuration);\\n        }\\n        {\\n            uint _rate = uints[12];\\n            uint _decimal = uints[13];\\n            offeredCurrency.rate = _rate;\\n            offeredCurrency.decimal = _decimal;\\n        }\\n        \\n        emit PoolCreatedChild1(address(IDOToken), address(purchaseToken), maxPurchaseAmountForKYCUser, maxPurchaseAmountForNotKYCUser, TGEDate, TGEPercentage, galaxyParticipationFeePercentage, crowdfundingParticipationFeePercentage);\\n        emit PoolCreatedChild2(galaxyPoolProportion, earlyAccessProportion, totalRaiseAmount, whaleOpenTime, whaleCloseTime, communityCloseTime, offeredCurrency.rate, offeredCurrency.decimal);\\n    }\\n\\n    /**\\n     * @notice Set merkle tree root after snapshoting information of investor\\n     * @dev Only admin can call it\\n     * @param _root Root of merkle tree\\n     */\\n    function setRoot(bytes32 _root) external onlyAdmin{\\n        root = _root;\\n        emit UpdateRoot(root);\\n    }\\n\\n    /**\\n     * @notice Close pool: cancel project, nobody can buy token\\n     * @dev Only admin can call it\\n     */\\n    function closePool() external onlyAdmin {\\n        _pause();\\n        emit UpdateOpenPoolStatus(address(this), false);\\n    }\\n\\n    /**\\n     * @notice Update time for galaxy pool and crowdfunding pool\\n     * @dev Only admin can call it, galaxy pool must be closed before crowdfunding pool\\n     * @param _newWhaleCloseTime New close time of galaxy pool\\n     * @param _newCommunityCloseTime New close time of crowdfunding pool\\n     */\\n    function updateTime(uint64 _newWhaleCloseTime, uint64 _newCommunityCloseTime) external onlyAdmin {\\n        if(_newWhaleCloseTime >= _newCommunityCloseTime || _newWhaleCloseTime <= whaleOpenTime) {\\n            revert NotUpdateValidTime(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime);\\n        }\\n        whaleCloseTime = _newWhaleCloseTime;\\n        communityOpenTime = _newWhaleCloseTime;\\n        communityCloseTime = _newCommunityCloseTime;\\n        emit UpdateTime(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime);\\n    }\\n\\n    /**\\n     * @notice Investor buy token in galaxy pool\\n     * @dev Must be in time for whale and pool is not closed\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _maxPurchaseBaseOnAllocations Max purchase amount base on allocation of whale\\n     */\\n    function buyTokenInGalaxyPool(bytes32[] memory proof, uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations) external whenNotPaused nonReentrant {\\n        if(!_validWhaleSession()) {\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n        _preValidatePurchaseInGalaxyPool(_purchaseAmount,_maxPurchaseBaseOnAllocations);\\n        _internalWhaleBuyToken(proof, _purchaseAmount, _maxPurchaseBaseOnAllocations, galaxyParticipationFeePercentage);\\n        _updatePurchasingInGalaxyPoolState(_purchaseAmount);\\n    }\\n\\n    /**\\n     * @notice Investor buy token in crowdfunding pool\\n     * @dev Must be in time for crowdfunding pool and pool is not closed\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function buyTokenInCrowdfundingPool(bytes32[] memory proof, uint _purchaseAmount) external whenNotPaused nonReentrant {\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n        if(_validWhaleSession()){\\n            _preValidatePurchaseInEarlyAccess(_purchaseAmount);\\n            _internalWhaleBuyToken(proof, _purchaseAmount, 0, crowdfundingParticipationFeePercentage);\\n            _updatePurchasingInEarlyAccessState(_purchaseAmount);\\n        }else if(_validCommunitySession()){\\n            _preValidatePurchase(_purchaseAmount);\\n            _internalNormalUserBuyToken(proof, _purchaseAmount);\\n        }else{\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Investor buy token in galaxy pool\\n     * @dev Investor do not need execute approve transaction, but need to sign data off-chain; used only for USDC.\\n     * Must be in time for whale and pool is not closed\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _maxPurchaseBaseOnAllocations Max purchase amount base on allocation of whale\\n     * @param _deadline Deadline of off-chain investor's signature\\n     * @param _signature Signature of investor\\n     */\\n    function buyTokenInGalaxyPoolWithPermit(bytes32[] memory proof, uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations, uint _deadline, bytes memory _signature) external whenNotPaused nonReentrant{\\n        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(_signature);\\n        IERC20Permit(address(purchaseToken)).permit(_msgSender(), address(this), _purchaseAmount, _deadline, v, r, s);\\n        if(!_validWhaleSession()) {\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n        _preValidatePurchaseInGalaxyPool(_purchaseAmount,_maxPurchaseBaseOnAllocations);\\n        _internalWhaleBuyToken(proof, _purchaseAmount, _maxPurchaseBaseOnAllocations, galaxyParticipationFeePercentage);\\n        _updatePurchasingInGalaxyPoolState(_purchaseAmount);\\n    }\\n\\n    /**\\n     * @notice Investor buy token in crowdfunding pool\\n     * @dev Investor do not need execute approve transaction, but need to sign data off-chain; used only for USDC.\\n     * Must be in time for crowdfunding pool and pool is not closed\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _allowance Allowance amount of investor's USDC for pool\\n     * @param _deadline Deadline of off-chain investor's signature\\n     * @param _signature Signature of investor\\n     */\\n    function buyTokenInCrowdfundingPoolWithPermit(bytes32[] memory proof, uint _purchaseAmount, uint _allowance, uint _deadline, bytes memory _signature) external whenNotPaused nonReentrant{\\n        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(_signature);\\n        IERC20Permit(address(purchaseToken)).permit(_msgSender(), address(this), _allowance, _deadline, v, r, s);\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n        if(_validWhaleSession()){\\n            _preValidatePurchaseInEarlyAccess(_purchaseAmount);\\n            _internalWhaleBuyToken(proof, _purchaseAmount, 0, crowdfundingParticipationFeePercentage);\\n            _updatePurchasingInEarlyAccessState(_purchaseAmount);\\n        }else if(_validCommunitySession()){\\n            _preValidatePurchase(_purchaseAmount);\\n            _internalNormalUserBuyToken(proof, _purchaseAmount);\\n        }else{\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin withdraw redundant IDO token in pool\\n     * @dev Only admin can call it after pool closed\\n     * @param _withdrawIDOTokenRecipient Address of recipient\\n     */\\n    function withdrawIDOToken(address _withdrawIDOTokenRecipient) external onlyAdmin {\\n        _validAddress(address(IDOToken));\\n        _validAddress(_withdrawIDOTokenRecipient);\\n        if(paused() == true || block.timestamp > communityCloseTime){\\n            uint remainAmount = IDOToken.balanceOf(address(this));\\n            if(remainAmount > 0){\\n                IDOToken.safeTransfer(_withdrawIDOTokenRecipient, remainAmount);\\n                emit WithdrawIDOToken(_withdrawIDOTokenRecipient, address(IDOToken), remainAmount);\\n            }\\n        }else{\\n            revert NotEnoughConditionToWithdrawIDOToken();\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin withdraw purchase token in pool\\n     * @dev Only admin can call it after pool closed\\n     * @param _withdrawPurchaseTokenRecipient Address of recipient\\n     */\\n    function withdrawPurchaseToken(address _withdrawPurchaseTokenRecipient) external onlyAdmin{\\n        _validAddress(_withdrawPurchaseTokenRecipient);\\n        if(paused() == true || block.timestamp > communityCloseTime){\\n            uint purchaseAmount = purchaseToken.balanceOf(address(this));\\n            if(purchaseAmount > 0){\\n                purchaseToken.safeTransfer(_withdrawPurchaseTokenRecipient, purchaseAmount);\\n                emit WithdrawPurchaseToken(_withdrawPurchaseTokenRecipient, address(purchaseToken), purchaseAmount);\\n            }\\n        }else{\\n            revert NotEnoughConditionToWithdrawPurchaseToken();\\n        }\\n    }\\n\\n    /**\\n     * @notice Investor redeem IDO token after TGE date\\n     * @param _IDORedeemAmount Amount of IDO token is wanted to redeem\\n     */\\n    function redeemTGEIDOToken(uint _IDORedeemAmount) external {\\n        _validAddress(address(IDOToken));\\n        if(TGERedeemable == false){\\n            revert NotAllowedToRedeemTGEIDOAmount();\\n        }\\n        if(block.timestamp < TGEDate){\\n            revert NotYetTimeToRedeemTGE();\\n        }\\n        uint IDOTGEAmount = userIDOTGEAmount[_msgSender()];\\n        if(_IDORedeemAmount > IDOTGEAmount){\\n            revert RedeemExceedMaxTGEAmount();\\n        }\\n        userIDOTGEAmount[_msgSender()] -= _IDORedeemAmount;\\n        _deliverTGEIDOTokens(_msgSender(), _IDORedeemAmount);\\n        emit RedeemTGEAmount(_msgSender(), _IDORedeemAmount);\\n    }\\n\\n    /**\\n     * @notice Allow or disallow investors to redeem TGE amount of IDO token\\n     * @dev Only admin can call it\\n     */\\n    function setRedeemableTGEIDOToken(bool _TGERedeemableStatus) external onlyAdmin{\\n        _validAddress(address(IDOToken));\\n        if(TGERedeemable == _TGERedeemableStatus){\\n            revert AlreadySetRedeemableTGE(_TGERedeemableStatus);\\n        }\\n        TGERedeemable = _TGERedeemableStatus;\\n        emit SetTGERedeemable(_TGERedeemableStatus);\\n    }\\n\\n    /**\\n     * @dev Check whether or not an address is zero address\\n     * @param _address An address\\n     */\\n    function _validAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert ZeroAddress();\\n        }\\n    }\\n\\n    /**\\n     * @dev Check whether or not an amount greater than 0\\n     * @param _amount An amount\\n     */\\n    function _validAmount(uint _amount) internal pure {\\n        if (_amount == 0) {\\n            revert ZeroAmount();\\n        }\\n    }\\n\\n    /**\\n     * @dev Check whether or not length of a signature is valid\\n     * @param _signature Signature of investor\\n     */\\n    function _validSignature(bytes memory _signature) internal pure {\\n        if (_signature.length != 65) {\\n            revert NotValidSignature();\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function for whale to buy token\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _maxPurchaseBaseOnAllocations Max purchase amount base on allocation of whale\\n     * @param _participationFeePercentage Fee percentage when buying token\\n     */\\n    function _internalWhaleBuyToken(bytes32[] memory proof, uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations, uint _participationFeePercentage) internal {\\n        if(_verifyUser(_msgSender(), WHALE, maxPurchaseAmountForKYCUser, _maxPurchaseBaseOnAllocations, proof)){\\n            _internalBuyToken(_msgSender(), _purchaseAmount, _participationFeePercentage, true);\\n        }else if(_verifyUser(_msgSender(), WHALE, maxPurchaseAmountForNotKYCUser, _maxPurchaseBaseOnAllocations, proof)){\\n            _internalBuyToken(_msgSender(), _purchaseAmount, _participationFeePercentage, false);\\n        }else{\\n            revert NotInWhaleList(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function for normal user to buy token\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _internalNormalUserBuyToken(bytes32[] memory proof, uint _purchaseAmount) internal{\\n        if(_verifyUser(_msgSender(), NORMAL_USER, maxPurchaseAmountForKYCUser, 0, proof)){\\n            _internalBuyToken(_msgSender(), _purchaseAmount, crowdfundingParticipationFeePercentage, true);\\n        }else {\\n            _internalBuyToken(_msgSender(), _purchaseAmount, crowdfundingParticipationFeePercentage, false);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Split signature of investor to v,r,s\\n     * @param _signature Signature of investor\\n     * @return r r element of signature\\n     * @return s s element of signature\\n     * @return v v element of signature\\n     */\\n    function _splitSignature(bytes memory _signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        _validSignature(_signature);\\n        assembly {\\n            r := mload(add(_signature, 0x20))\\n            s := mload(add(_signature, 0x40))\\n            v := byte(0, mload(add(_signature, 0x60)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Check whether or not session of whale\\n     * @return Return true if yes, and vice versa\\n     */\\n    function _validWhaleSession() internal view returns(bool){\\n        return block.timestamp > whaleOpenTime && block.timestamp <= whaleCloseTime;\\n    }\\n\\n    /**\\n     * @dev Check whether or not session of community user\\n     * @return Return true if yes, and vice versa\\n     */\\n    function _validCommunitySession() internal view returns (bool) {\\n        return block.timestamp > communityOpenTime && block.timestamp <= communityCloseTime;\\n    }    \\n\\n    /**\\n     * @dev Internal function to buy token\\n     * @param buyer Address of investor\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _participationFeePercentage Fee percentage when buying token\\n     * @param _KYCStatus True if investor KYC and vice versa\\n     */\\n    function _internalBuyToken(address buyer, uint _purchaseAmount, uint _participationFeePercentage, bool _KYCStatus) internal{\\n\\n        if(_KYCStatus == true &&  userPurchasedAmount[_msgSender()] + _purchaseAmount > maxPurchaseAmountForKYCUser){\\n            revert ExceedMaxPurchaseAmountForKYCUser(_msgSender(), _purchaseAmount);\\n        }\\n\\n        if(_KYCStatus == false && userPurchasedAmount[_msgSender()] + _purchaseAmount > maxPurchaseAmountForNotKYCUser){\\n            revert ExceedMaxPurchaseAmountForNotKYCUser(_msgSender(), _purchaseAmount);\\n        }\\n\\n        uint participationFee = _calculateParticipantFee(_purchaseAmount, _participationFeePercentage);\\n        if(participationFee > 0){\\n            purchaseToken.safeTransferFrom(buyer, address(this), participationFee);\\n        }\\n        _forwardPurchaseTokenFunds(buyer, _purchaseAmount);\\n\\n        if(address(IDOToken) != address(0) || offeredCurrency.rate != 0){\\n            uint IDOTokenAmount = _getIDOTokenAmountByOfferedCurrency(_purchaseAmount);\\n            uint TGEIDOTokenAmount = IDOTokenAmount * TGEPercentage / PERCENTAGE_DENOMINATOR;\\n            uint airdropTokenAmount = IDOTokenAmount - TGEIDOTokenAmount;\\n            _updatePurchasingState(_purchaseAmount, airdropTokenAmount, TGEIDOTokenAmount);\\n        }else{\\n            _updatePurchasingState(_purchaseAmount, 0, 0);\\n        }\\n\\n        emit BuyToken(_msgSender(), address(this), address(IDOToken), _purchaseAmount);\\n    }\\n\\n    /**\\n     * @dev Update purchasing amount in galaxy pool\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _updatePurchasingInGalaxyPoolState(uint _purchaseAmount) internal {\\n        purchasedAmountInGalaxyPool += _purchaseAmount;\\n    }\\n\\n    /**\\n     * @dev Update purchasing amount in early access\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _updatePurchasingInEarlyAccessState(uint _purchaseAmount) internal {\\n        purchasedAmountInEarlyAccess += _purchaseAmount;\\n    }\\n\\n    /**\\n     * @dev Update purchasing amount, airdrop amount and TGE amount in all pools\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _airdropTokenAmount Airdrop token amount of investor\\n     * @param _TGEIDOTokenAmount TGE amount of investor\\n     */\\n    function _updatePurchasingState(uint _purchaseAmount, uint _airdropTokenAmount, uint _TGEIDOTokenAmount) internal {\\n        purchasedAmount += _purchaseAmount;\\n        userPurchasedAmount[_msgSender()] += _purchaseAmount;\\n        userIDOAirdropAmount[_msgSender()] += _airdropTokenAmount;\\n        userIDOTGEAmount[_msgSender()] += _TGEIDOTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Transfer TGE amount of token to investor\\n     * @param buyer Address of investor\\n     * @param _TGETokenAmount TGE amount of token of investor\\n     */\\n    function _deliverTGEIDOTokens(address buyer, uint _TGETokenAmount) internal {\\n        IDOToken.safeTransfer(buyer, _TGETokenAmount);\\n    }\\n\\n    /**\\n     * @dev Get IDO token amount base on amount of purchase token\\n     * @param _amount Amount of purchase token\\n     * @return Return amount of respective IDO token\\n     */\\n    function _getIDOTokenAmountByOfferedCurrency(uint _amount) internal view returns(uint){\\n        return _amount * offeredCurrency.rate / 10 ** offeredCurrency.decimal;\\n    }\\n\\n    /**\\n     * @dev Transfer purchase token from investor to pool\\n     * @param buyer Address of investor\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _forwardPurchaseTokenFunds(address buyer, uint _purchaseAmount) internal {\\n        purchaseToken.safeTransferFrom(buyer, address(this), _purchaseAmount);\\n    }\\n\\n    /**\\n     * @dev Calculate fee when investor buy token\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _participationFeePercentage Fee percentage when buying token\\n     * @return Return amount of fee when investor buy token\\n     */\\n    function _calculateParticipantFee(uint _purchaseAmount, uint _participationFeePercentage) internal pure returns(uint){\\n        if(_participationFeePercentage == 0) return 0;\\n        return _purchaseAmount * _participationFeePercentage / PERCENTAGE_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev Verify allowance of investor's token for pool\\n     * @param _user Address of investor\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _verifyAllowance(address _user, uint _purchaseAmount) private view{\\n        uint allowance = purchaseToken.allowance(_user, address(this));\\n        if(allowance < _purchaseAmount){\\n            revert NotEnoughAllowance(_user, address(purchaseToken), allowance, _purchaseAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Check whether or not purchase amount exceeds max purchase amount base on allocation for whale\\n     * @param _purchaseAmount Amount of purchase token\\n     * @param _maxPurchaseBaseOnAllocations Max purchase amount base on allocations for whale\\n     */\\n    function _preValidatePurchaseInGalaxyPool(uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations) internal pure{\\n        _validAmount(_purchaseAmount);\\n        if(_purchaseAmount > _maxPurchaseBaseOnAllocations){\\n            revert ExceedMaxPurchaseAmountForUser();\\n        }\\n    }\\n\\n    /**\\n     * @dev Check whether or not purchase amount exceeds max purchase in early access for whale\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _preValidatePurchaseInEarlyAccess(uint _purchaseAmount) internal view{\\n        _validAmount(_purchaseAmount);\\n        if(purchasedAmountInEarlyAccess + _purchaseAmount > maxPurchaseAmountForEarlyAccess){\\n            revert ExceedMaxPurchaseAmountForEarlyAccess(_msgSender(), _purchaseAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Check whether or not purchase amount exceeds amount in all pools\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _preValidatePurchase(uint _purchaseAmount) internal view{\\n        _validAmount(_purchaseAmount);\\n        if(purchasedAmount + _purchaseAmount > totalRaiseAmount){\\n            revert ExceedTotalRaiseAmount(_msgSender(), _purchaseAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28efc01f753beb6eefb060895528cbbb5599cf9c40d90e3519ea083fd2000212\",\"license\":\"UNLICENSED\"},\"contracts/extensions/IgnitionList.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/MerkleProof.sol\\\";\\n\\ncontract IgnitionList {\\n    bytes32 public root;\\n\\n    function _verifyUser(\\n        address _candidate,\\n        bytes32 _poolType,\\n        uint _maxPurchaseWhetherOrNotKYCAmount,\\n        uint _maxPurchaseBaseOnAllocations,\\n        bytes32[] memory proof\\n    ) internal view returns (bool) {\\n        // leaf = {address + hash(\\\"Pool type\\\") + max purchase KYC/notKYC amount + max purchase for each user per allocation}\\n        bytes32 leaf = keccak256(abi.encodePacked(_candidate, _poolType, _maxPurchaseWhetherOrNotKYCAmount, _maxPurchaseBaseOnAllocations));\\n        return MerkleProof.verify(proof, root, leaf);\\n    }\\n}\",\"keccak256\":\"0xb7a4ad193020fe234f779f66113d3f81cbc0ed3f38342912a404ca9cfc801e2c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x20b0d6d8e8df085e9caf8ca291248fff3948235892733d0af1fc25eed7e9d0fe\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0a9d562a248a740c982d5218ce9deabcaa77a3df4d5915dfc0b352496361abe5\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\ninterface IPoolFactory{\\n    function hasAdminRole(address _admin) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x4a4038e34a5595a68cc5e5121ff97a20a9ce4e70bb31b696fbd68ce4a61ac825\",\"license\":\"UNLICENSED\"},\"contracts/libraries/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1861b048258956fa4704249b225bbc77119ebf2223ad2dc536b2637c1b9850e4\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x9bce09fa412574146f23d8fdd32257ad5aa157e9a8c76efed60a0f55cb3fe15a\",\"license\":\"MIT\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xb8fbe60230f9487a501cb4d48d9d1586ef743163ea03401e0f5b21154140f9aa\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../libraries/Strings.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module thatIAccessControl allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9948d3c842dc9de2ccb37c58443fb38ef3ac631d87692a866aca7d0a1570f97\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x43a65135f4f49e783182290da5c4c86a2ac4599f94391483b360e094b3b8f759\",\"license\":\"MIT\"},\"contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x83ec9bcfbd79426bf1d84e96c3fe7092923e8e91abdc9c8e2489ede5e7b016ab\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity 0.8.10;\\n\\n// import \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            // (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            (isTopLevelCall && _initialized < 1) || (!(address(this).code.length > 0) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb1887e7ebbf1f08ab4075a35d87af54e145868ccd314f6fbd0d1f9440e7069f\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xd1750e2a389c2576ae7a0c2190fa7ee2e351bf0c7bb6320be27b36c7850a326e\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x80216195f399679b62d20ff215250a59a1562023d5c673255215863e20819d06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff19169055600180556130de8061002e6000396000f3fe608060405234801561001057600080fd5b50600436106102b65760003560e01c806385f8f4be11610172578063be5bb519116100d9578063ce7c641011610092578063ce7c641014610643578063d547741f1461065d578063dab5f34014610670578063e995914914610683578063ebf0c717146106aa578063efaad0ec146106b3578063f1379939146106c657600080fd5b8063be5bb519146105cb578063c09d6fb9146105de578063c4746f01146105f3578063c6b3665c14610606578063cb1287281461061b578063cdc5598e1461062e57600080fd5b8063a558b65c1161012b578063a558b65c14610563578063a95c4d621461057d578063aad967e414610590578063b3679bda146105a4578063b3cd4254146105ad578063b4582276146105b657600080fd5b806385f8f4be146104f957806387e449351461050257806391d1485414610515578063a09e06a114610528578063a217fddf1461053b578063a4f276c71461054357600080fd5b80633baa6fca116102215780635c975abb116101da5780635c975abb1461049957806366805de5146104a457806377292d5b146104ac5780637837734f146104b55780637b1a0838146104ca5780637dbdddfa146104d357806381e2403b146104e657600080fd5b80633baa6fca146103ea5780633d3e3763146103fd5780633da1d412146104105780634219dc40146104305780634f93d1ad146104565780635c5b1f831461047957600080fd5b806326e3e0d41161027357806326e3e0d41461036d5780632f2ff15d1461038057806330bba6c41461039357806331f7ebc51461039c57806334fa224b146103af57806336568abe146103d757600080fd5b806301ffc9a7146102bb578063086425bc146102e35780631353ff75146102f85780631acbc8231461030f5780632013b4c414610318578063248a9ca31461034a575b600080fd5b6102ce6102c9366004612884565b6106cf565b60405190151581526020015b60405180910390f35b6102f66102f13660046129b3565b610706565b005b61030160095481565b6040519081526020016102da565b61030160125481565b600f5461033290600160c01b90046001600160401b031681565b6040516001600160401b0390911681526020016102da565b610301610358366004612a00565b60009081526003602052604090206001015490565b6102f661037b366004612a35565b610810565b6102f661038e366004612a50565b6109d0565b610301600c5481565b6102f66103aa366004612a7c565b6109fa565b600d546103c490600160701b900461ffff1681565b60405161ffff90911681526020016102da565b6102f66103e5366004612a50565b610f07565b600f54610332906001600160401b031681565b6102f661040b366004612b4a565b610f81565b61030161041e366004612a35565b60146020526000908152604090205481565b600454610449906201000090046001600160a01b031681565b6040516102da9190612b74565b600754600854610464919082565b604080519283526020830191909152016102da565b610301610487366004612a35565b60156020526000908152604090205481565b60005460ff166102ce565b6102f6611132565b61030160105481565b600d546103c490600160501b900461ffff1681565b61030160115481565b6102f66104e1366004612a00565b611204565b6102f66104f4366004612b88565b611300565b610301600b5481565b600554610449906001600160a01b031681565b6102ce610523366004612a50565b61142d565b6102f6610536366004612b88565b611458565b610301600081565b610301610551366004612a35565b60136020526000908152604090205481565b600f5461033290600160801b90046001600160401b031681565b600654610449906001600160a01b031681565b600d546102ce90600160901b900460ff1681565b610301600e5481565b6103c461271081565b600d546103c490600160401b900461ffff1681565b6102f66105d9366004612a35565b6115ad565b61030160008051602061308983398151915281565b6102f6610601366004612c69565b611772565b600d546103c490600160601b900461ffff1681565b600d54610332906001600160401b031681565b600d546103c490600160801b900461ffff1681565b600f5461033290600160401b90046001600160401b031681565b6102f661066b366004612a50565b6118a7565b6102f661067e366004612a00565b6118cc565b6103017f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0181565b61030160025481565b6102f66106c1366004612c86565b611993565b610301600a5481565b60006001600160e01b03198216637965db0b60e01b148061070057506301ffc9a760e01b6001600160e01b03198316145b92915050565b61070e611a37565b6002600154141561073a5760405162461bcd60e51b815260040161073190612cca565b60405180910390fd5b6002600155610747611a7f565b6107cd57600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b90041642335b6040516364daa85360e11b81526001600160401b039687166004820152948616602486015292851660448501529316606483015260848201929092526001600160a01b0390911660a482015260c401610731565b6107d73383611ab3565b6107e18282611b70565b600d546107fe90849084908490600160501b900461ffff16611b9a565b61080782611c20565b50506001805550565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016108449190612b74565b602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108859190612d01565b6108a257604051637bfa4b9f60e01b815260040160405180910390fd5b6108ab81611c3a565b60005460ff161515600114806108d25750600f54600160c01b90046001600160401b031642115b156109b4576006546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610908903090600401612b74565b602060405180830381865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190612d1e565b905080156109b057600654610968906001600160a01b03168383611c61565b6006546040517f5fd58c95befebb6f19ad0a64e78722ab52aa3dcb7bb63efd80edb730b0cf12e8916109a79185916001600160a01b0316908590612d37565b60405180910390a15b5050565b6040516356621b7b60e11b815260040160405180910390fd5b50565b6000828152600360205260409020600101546109eb81611cb7565b6109f58383611cc1565b505050565b600454610100900460ff1615808015610a1a5750600454600160ff909116105b80610a345750303b158015610a34575060045460ff166001145b610a975760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610731565b6004805460ff191660011790558015610aba576004805461ff0019166101001790555b6004805462010000330262010000600160b01b03199091161790558251602080850151600580546001600160a01b039485166001600160a01b0319918216179091556006805492909416911617909155825190830151600b91909155600c5560408201516060830151610b2c82611d47565b600d805467ffffffffffffffff19166001600160401b0392909216919091179055610b5681611db3565b600d805461ffff92909216600160401b0261ffff60401b199092169190911790555050608082015160a0830151610b8c82611db3565b600d600a6101000a81548161ffff021916908361ffff160217905550610bb181611db3565b600d805461ffff92909216600160601b0261ffff60601b19909216919091179055505060c082015160e0830151610100840151610bed83611db3565b600d600e6101000a81548161ffff021916908361ffff160217905550610c1282611db3565b600d805461ffff92909216600160801b0261ffff60801b19909216919091179055600e819055612710610c458483612d87565b610c4f9190612da6565b6009556127108083610c618683612dc8565b610c6b9085612d87565b610c759190612d87565b610c7f9190612da6565b610c899190612da6565b600a55505050610120820151610140830151610160840151610caa83611d47565b600f805467ffffffffffffffff19166001600160401b0392909216919091179055610cdd610cd88385612ddf565b611d47565b600f8054600160401b600160c01b0319811667ffffffffffffffff60801b196001600160401b03948516600160401b9081029182169290921767ffffffffffffffff60401b1990931617048316600160801b9081029190911791829055610d4c92610cd8928592900416612ddf565b600f80546001600160c01b0316600160c01b6001600160401b03938416021790556101808601516101a0870151600791909155600855600554600654600b54600c54600d54604080516001600160a01b039687168152959094166020860152928401919091526060830152918216608082015261ffff600160401b8304811660a0830152600160501b8304811660c0830152600160601b90920490911660e08201527f75ab989fd8fb2390aca189e73e7167205ac4a3c29fd9d89c112c8a2fc97102fd93506101000191505060405180910390a1600d54600e54600f546007546008546040805161ffff600160701b880481168252600160801b90970490961660208701528501939093526001600160401b038083166060860152600160401b830481166080860152600160c01b90920490911660a084015260c083015260e08201527fe2a22c458b2e239482efb8652576064c276b0d1ce108e306de284c6c614e8f72906101000160405180910390a180156109f5576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6001600160a01b0381163314610f775760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610731565b6109b08282611e16565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b8152600401610fb59190612b74565b602060405180830381865afa158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff69190612d01565b61101357604051637bfa4b9f60e01b815260040160405180910390fd5b806001600160401b0316826001600160401b03161015806110435750600f546001600160401b0390811690831611155b1561108e57600f54604051633d9877ad60e11b8152610731916001600160401b0380821692600160401b8304821692600160801b8104831692600160c01b9091041690600401612df7565b600f8054600160401b600160c01b031916600160401b6001600160401b0385811682810267ffffffffffffffff60801b191693909317600160801b938402176001600160c01b038116600160c01b8784168102918217968790556040517feedf049ba2a9e400be9e2a2d93b7e6023411a5c4fd77fe703bc75c2fea691fc3976109a79794861693861693909317958304851694938304841693919092041690612df7565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016111669190612b74565b602060405180830381865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190612d01565b6111c457604051637bfa4b9f60e01b815260040160405180910390fd5b6111cc611e7d565b6040516000815230907ff0d6825187080fb76e877d6e8990b1e2a60ed4f2d8ccf610e889659854577e749060200160405180910390a2565b600554611219906001600160a01b0316611c3a565b600d54600160901b900460ff1661124357604051631b8b49f960e01b815260040160405180910390fd5b600d546001600160401b031642101561126f57604051630a919d3360e01b815260040160405180910390fd5b33600090815260156020526040902054808211156112a057604051630dc37d7560e21b815260040160405180910390fd5b33600090815260156020526040812080548492906112bf908490612dc8565b909155506112cf90503383611ed1565b7f248517048bc1878f5d0308e1114eba756dc34c77ea2627325801a71c05b5d39533836040516109a7929190612e22565b611308611a37565b6002600154141561132b5760405162461bcd60e51b815260040161073190612cca565b60026001556000808061133d84611ee8565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf9061137f90339030908c908b9088908b908b90600401612e3b565b600060405180830381600087803b15801561139957600080fd5b505af11580156113ad573d6000803e3d6000fd5b505050506113b9611a7f565b6113ef57600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610779565b6113f98787611b70565b600d5461141690899089908990600160501b900461ffff16611b9a565b61141f87611c20565b505060018055505050505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611460611a37565b600260015414156114835760405162461bcd60e51b815260040161073190612cca565b60026001556000808061149584611ee8565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf906114d790339030908b908b9088908b908b90600401612e3b565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b505050506115196115133390565b88611ab3565b611521611a7f565b1561155b5761152f87611f14565b600d5461154d9089908990600090600160601b900461ffff16611b9a565b61155687611f51565b61141f565b611563611f63565b1561157b5761157187611f9c565b6115568888611fd9565b600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610779565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016115e19190612b74565b602060405180830381865afa1580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116229190612d01565b61163f57604051637bfa4b9f60e01b815260040160405180910390fd5b600554611654906001600160a01b0316611c3a565b61165d81611c3a565b60005460ff161515600114806116845750600f54600160c01b90046001600160401b031642115b15611759576005546040516370a0823160e01b81526000916001600160a01b0316906370a08231906116ba903090600401612b74565b602060405180830381865afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190612d1e565b905080156109b05760055461171a906001600160a01b03168383611c61565b6005546040517f7645a5c54de72438a4de1507bde579a46ca541fe92760409bca92b588af03140916109a79185916001600160a01b0316908590612d37565b60405163b5d0229760e01b815260040160405180910390fd5b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016117a69190612b74565b602060405180830381865afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e79190612d01565b61180457604051637bfa4b9f60e01b815260040160405180910390fd5b600554611819906001600160a01b0316611c3a565b600d5460ff600160901b909104161515811515141561184f57604051633a5c93f960e11b81528115156004820152602401610731565b600d8054821515600160901b0260ff60901b199091161790556040517f54b036c17e62300d398f2d9af8763c2bf1ebce09c3b5743016e62cdccebec2c59061189c90831515815260200190565b60405180910390a150565b6000828152600360205260409020600101546118c281611cb7565b6109f58383611e16565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016119009190612b74565b602060405180830381865afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190612d01565b61195e57604051637bfa4b9f60e01b815260040160405180910390fd5b60028190556040518181527fc8d52687b85ab11e6859cb0b390a9e926e1b348d9796e084f88f88420c176fc69060200161189c565b61199b611a37565b600260015414156119be5760405162461bcd60e51b815260040161073190612cca565b60026001556119cd3382611ab3565b6119d5611a7f565b15611a0f576119e381611f14565b600d54611a019083908390600090600160601b900461ffff16611b9a565b611a0a81611f51565b611a2f565b611a17611f63565b1561157b57611a2581611f9c565b611a0a8282611fd9565b505060018055565b60005460ff1615611a7d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610731565b565b600f546000906001600160401b031642118015611aae5750600f54600160401b90046001600160401b03164211155b905090565b600654604051636eb1769f60e11b81526001600160a01b038481166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa158015611b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b289190612d1e565b9050818110156109f5576006546040516304fee01560e31b81526001600160a01b03808616600483015290911660248201526044810182905260648101839052608401610731565b611b7982612045565b808211156109b057604051632b37c00360e11b815260040160405180910390fd5b611bb833600b54600080516020613089833981519152908588612063565b15611bcf57611bca33848360016120cc565b611c1a565b611bed33600c54600080516020613089833981519152908588612063565b15611bff57611bca33848360006120cc565b33604051632e4f414f60e01b81526004016107319190612b74565b50505050565b8060106000828254611c329190612ddf565b909155505050565b6001600160a01b0381166109cd5760405163d92e233d60e01b815260040160405180910390fd5b6109f58363a9059cbb60e01b8484604051602401611c80929190612e22565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612278565b6109cd813361234a565b611ccb828261142d565b6109b05760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d033390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006001600160401b03821115611daf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610731565b5090565b600061ffff821115611daf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b6064820152608401610731565b611e20828261142d565b156109b05760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611e85611a37565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611eba3390565b604051611ec79190612b74565b60405180910390a1565b6005546109b0906001600160a01b03168383611c61565b6000806000611ef6846123ae565b50505060208101516040820151606090920151909260009190911a90565b611f1d81612045565b600a5481601154611f2e9190612ddf565b11156109cd5733816040516330b052c360e01b8152600401610731929190612e22565b8060116000828254611c329190612ddf565b600f54600090600160801b90046001600160401b031642118015611aae575050600f54600160c01b90046001600160401b031642111590565b611fa581612045565b600e5481601254611fb69190612ddf565b11156109cd57338160405163b17009d360e01b8152600401610731929190612e22565b61200a33600b547f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0190600086612063565b1561202a576109b033600d548390600160601b900461ffff1660016120cc565b6109b033600d548390600160601b900461ffff1660006120cc565b806109cd57604051631f2a200560e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606087901b16602082015260348101859052605481018490526074810183905260009081906094016040516020818303038152906040528051906020012090506120c183600254836123d0565b979650505050505050565b60018115151480156120f95750600b54336000908152601360205260409020546120f7908590612ddf565b115b1561211b573383604051631087b52160e01b8152600401610731929190612e22565b801580156121445750600c5433600090815260136020526040902054612142908590612ddf565b115b156121665733836040516384e66cd160e01b8152600401610731929190612e22565b600061217284846123e8565b9050801561219257600654612192906001600160a01b031686308461240e565b61219c858561242f565b6005546001600160a01b03161515806121b6575060075415155b156122155760006121c685612447565b600d54909150600090612710906121e890600160401b900461ffff1684612d87565b6121f29190612da6565b905060006122008284612dc8565b905061220d87828461246f565b505050612221565b6122218460008061246f565b6005546001600160a01b031630336001600160a01b03167fb56e31baf5ee91fd07834187784fb1cbdae3cb94b95610e2a8da75a624e71eaf8760405161226991815260200190565b60405180910390a45050505050565b60006122cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124f79092919063ffffffff16565b8051909150156109f557808060200190518101906122eb9190612d01565b6109f55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610731565b612354828261142d565b6109b05761236c816001600160a01b0316601461250e565b61237783602061250e565b604051602001612388929190612ea8565b60408051601f198184030181529082905262461bcd60e51b825261073191600401612f17565b80516041146109cd57604051637141605d60e11b815260040160405180910390fd5b6000826123dd85846126a9565b1490505b9392505050565b6000816123f757506000610700565b6127106124048385612d87565b6123e19190612da6565b611c1a846323b872dd60e01b858585604051602401611c8093929190612d37565b6006546109b0906001600160a01b031683308461240e565b60085460009061245890600a61302e565b6007546124659084612d87565b6107009190612da6565b82601260008282546124819190612ddf565b909155505033600090815260136020526040812080548592906124a5908490612ddf565b909155505033600090815260146020526040812080548492906124c9908490612ddf565b909155505033600090815260156020526040812080548392906124ed908490612ddf565b9091555050505050565b606061250684846000856126f6565b949350505050565b6060600061251d836002612d87565b612528906002612ddf565b6001600160401b0381111561253f5761253f6128ae565b6040519080825280601f01601f191660200182016040528015612569576020820181803683370190505b509050600360fc1b8160008151811061258457612584612d5b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125b3576125b3612d5b565b60200101906001600160f81b031916908160001a90535060006125d7846002612d87565b6125e2906001612ddf565b90505b600181111561265a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061261657612616612d5b565b1a60f81b82828151811061262c5761262c612d5b565b60200101906001600160f81b031916908160001a90535060049490941c936126538161303a565b90506125e5565b5083156123e15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610731565b600081815b84518110156126ee576126da828683815181106126cd576126cd612d5b565b602002602001015161281c565b9150806126e681613051565b9150506126ae565b509392505050565b6060824710156127575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610731565b6001600160a01b0385163b6127ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610731565b600080866001600160a01b031685876040516127ca919061306c565b60006040518083038185875af1925050503d8060008114612807576040519150601f19603f3d011682016040523d82523d6000602084013e61280c565b606091505b50915091506120c182828661284b565b60008183106128385760008281526020849052604090206123e1565b60008381526020839052604090206123e1565b6060831561285a5750816123e1565b82511561286a5782518084602001fd5b8160405162461bcd60e51b81526004016107319190612f17565b60006020828403121561289657600080fd5b81356001600160e01b0319811681146123e157600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156128e6576128e66128ae565b60405290565b6040516101c081016001600160401b03811182821017156128e6576128e66128ae565b604051601f8201601f191681016001600160401b0381118282101715612937576129376128ae565b604052919050565b600082601f83011261295057600080fd5b813560206001600160401b0382111561296b5761296b6128ae565b8160051b61297a82820161290f565b928352848101820192828101908785111561299457600080fd5b83870192505b848310156120c15782358252918301919083019061299a565b6000806000606084860312156129c857600080fd5b83356001600160401b038111156129de57600080fd5b6129ea8682870161293f565b9660208601359650604090950135949350505050565b600060208284031215612a1257600080fd5b5035919050565b80356001600160a01b0381168114612a3057600080fd5b919050565b600060208284031215612a4757600080fd5b6123e182612a19565b60008060408385031215612a6357600080fd5b82359150612a7360208401612a19565b90509250929050565b600080610200808486031215612a9157600080fd5b84601f850112612aa057600080fd5b612aa86128c4565b806040860187811115612aba57600080fd5b865b81811015612adb57612acd81612a19565b845260209384019301612abc565b5081955087605f880112612aee57600080fd5b612af66128ec565b93870193925082915087841115612b0c57600080fd5b5b83811015612b25578035835260209283019201612b0d565b508093505050509250929050565b80356001600160401b0381168114612a3057600080fd5b60008060408385031215612b5d57600080fd5b612b6683612b33565b9150612a7360208401612b33565b6001600160a01b0391909116815260200190565b600080600080600060a08688031215612ba057600080fd5b85356001600160401b0380821115612bb757600080fd5b612bc389838a0161293f565b9650602091508188013595506040880135945060608801359350608088013581811115612bef57600080fd5b8801601f81018a13612c0057600080fd5b803582811115612c1257612c126128ae565b612c24601f8201601f1916850161290f565b92508083528a84828401011115612c3a57600080fd5b80848301858501376000848285010152505080925050509295509295909350565b80151581146109cd57600080fd5b600060208284031215612c7b57600080fd5b81356123e181612c5b565b60008060408385031215612c9957600080fd5b82356001600160401b03811115612caf57600080fd5b612cbb8582860161293f565b95602094909401359450505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215612d1357600080fd5b81516123e181612c5b565b600060208284031215612d3057600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612da157612da1612d71565b500290565b600082612dc357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612dda57612dda612d71565b500390565b60008219821115612df257612df2612d71565b500190565b6001600160401b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b83811015612e97578181015183820152602001612e7f565b83811115611c1a5750506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612eda816017850160208801612e7c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f0b816028840160208801612e7c565b01602801949350505050565b6020815260008251806020840152612f36816040850160208701612e7c565b601f01601f19169190910160400192915050565b600181815b80851115612f85578160001904821115612f6b57612f6b612d71565b80851615612f7857918102915b93841c9390800290612f4f565b509250929050565b600082612f9c57506001610700565b81612fa957506000610700565b8160018114612fbf5760028114612fc957612fe5565b6001915050610700565b60ff841115612fda57612fda612d71565b50506001821b610700565b5060208310610133831016604e8410600b8410161715613008575081810a610700565b6130128383612f4a565b806000190482111561302657613026612d71565b029392505050565b60006123e18383612f8d565b60008161304957613049612d71565b506000190190565b600060001982141561306557613065612d71565b5060010190565b6000825161307e818460208701612e7c565b919091019291505056feed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95a2646970667358221220ab5f88ebddef9f8e1c18ad0a2adfd172dea52a9aa000da13c5fa88ae4a1de81a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102b65760003560e01c806385f8f4be11610172578063be5bb519116100d9578063ce7c641011610092578063ce7c641014610643578063d547741f1461065d578063dab5f34014610670578063e995914914610683578063ebf0c717146106aa578063efaad0ec146106b3578063f1379939146106c657600080fd5b8063be5bb519146105cb578063c09d6fb9146105de578063c4746f01146105f3578063c6b3665c14610606578063cb1287281461061b578063cdc5598e1461062e57600080fd5b8063a558b65c1161012b578063a558b65c14610563578063a95c4d621461057d578063aad967e414610590578063b3679bda146105a4578063b3cd4254146105ad578063b4582276146105b657600080fd5b806385f8f4be146104f957806387e449351461050257806391d1485414610515578063a09e06a114610528578063a217fddf1461053b578063a4f276c71461054357600080fd5b80633baa6fca116102215780635c975abb116101da5780635c975abb1461049957806366805de5146104a457806377292d5b146104ac5780637837734f146104b55780637b1a0838146104ca5780637dbdddfa146104d357806381e2403b146104e657600080fd5b80633baa6fca146103ea5780633d3e3763146103fd5780633da1d412146104105780634219dc40146104305780634f93d1ad146104565780635c5b1f831461047957600080fd5b806326e3e0d41161027357806326e3e0d41461036d5780632f2ff15d1461038057806330bba6c41461039357806331f7ebc51461039c57806334fa224b146103af57806336568abe146103d757600080fd5b806301ffc9a7146102bb578063086425bc146102e35780631353ff75146102f85780631acbc8231461030f5780632013b4c414610318578063248a9ca31461034a575b600080fd5b6102ce6102c9366004612884565b6106cf565b60405190151581526020015b60405180910390f35b6102f66102f13660046129b3565b610706565b005b61030160095481565b6040519081526020016102da565b61030160125481565b600f5461033290600160c01b90046001600160401b031681565b6040516001600160401b0390911681526020016102da565b610301610358366004612a00565b60009081526003602052604090206001015490565b6102f661037b366004612a35565b610810565b6102f661038e366004612a50565b6109d0565b610301600c5481565b6102f66103aa366004612a7c565b6109fa565b600d546103c490600160701b900461ffff1681565b60405161ffff90911681526020016102da565b6102f66103e5366004612a50565b610f07565b600f54610332906001600160401b031681565b6102f661040b366004612b4a565b610f81565b61030161041e366004612a35565b60146020526000908152604090205481565b600454610449906201000090046001600160a01b031681565b6040516102da9190612b74565b600754600854610464919082565b604080519283526020830191909152016102da565b610301610487366004612a35565b60156020526000908152604090205481565b60005460ff166102ce565b6102f6611132565b61030160105481565b600d546103c490600160501b900461ffff1681565b61030160115481565b6102f66104e1366004612a00565b611204565b6102f66104f4366004612b88565b611300565b610301600b5481565b600554610449906001600160a01b031681565b6102ce610523366004612a50565b61142d565b6102f6610536366004612b88565b611458565b610301600081565b610301610551366004612a35565b60136020526000908152604090205481565b600f5461033290600160801b90046001600160401b031681565b600654610449906001600160a01b031681565b600d546102ce90600160901b900460ff1681565b610301600e5481565b6103c461271081565b600d546103c490600160401b900461ffff1681565b6102f66105d9366004612a35565b6115ad565b61030160008051602061308983398151915281565b6102f6610601366004612c69565b611772565b600d546103c490600160601b900461ffff1681565b600d54610332906001600160401b031681565b600d546103c490600160801b900461ffff1681565b600f5461033290600160401b90046001600160401b031681565b6102f661066b366004612a50565b6118a7565b6102f661067e366004612a00565b6118cc565b6103017f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0181565b61030160025481565b6102f66106c1366004612c86565b611993565b610301600a5481565b60006001600160e01b03198216637965db0b60e01b148061070057506301ffc9a760e01b6001600160e01b03198316145b92915050565b61070e611a37565b6002600154141561073a5760405162461bcd60e51b815260040161073190612cca565b60405180910390fd5b6002600155610747611a7f565b6107cd57600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b90041642335b6040516364daa85360e11b81526001600160401b039687166004820152948616602486015292851660448501529316606483015260848201929092526001600160a01b0390911660a482015260c401610731565b6107d73383611ab3565b6107e18282611b70565b600d546107fe90849084908490600160501b900461ffff16611b9a565b61080782611c20565b50506001805550565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016108449190612b74565b602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108859190612d01565b6108a257604051637bfa4b9f60e01b815260040160405180910390fd5b6108ab81611c3a565b60005460ff161515600114806108d25750600f54600160c01b90046001600160401b031642115b156109b4576006546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610908903090600401612b74565b602060405180830381865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190612d1e565b905080156109b057600654610968906001600160a01b03168383611c61565b6006546040517f5fd58c95befebb6f19ad0a64e78722ab52aa3dcb7bb63efd80edb730b0cf12e8916109a79185916001600160a01b0316908590612d37565b60405180910390a15b5050565b6040516356621b7b60e11b815260040160405180910390fd5b50565b6000828152600360205260409020600101546109eb81611cb7565b6109f58383611cc1565b505050565b600454610100900460ff1615808015610a1a5750600454600160ff909116105b80610a345750303b158015610a34575060045460ff166001145b610a975760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610731565b6004805460ff191660011790558015610aba576004805461ff0019166101001790555b6004805462010000330262010000600160b01b03199091161790558251602080850151600580546001600160a01b039485166001600160a01b0319918216179091556006805492909416911617909155825190830151600b91909155600c5560408201516060830151610b2c82611d47565b600d805467ffffffffffffffff19166001600160401b0392909216919091179055610b5681611db3565b600d805461ffff92909216600160401b0261ffff60401b199092169190911790555050608082015160a0830151610b8c82611db3565b600d600a6101000a81548161ffff021916908361ffff160217905550610bb181611db3565b600d805461ffff92909216600160601b0261ffff60601b19909216919091179055505060c082015160e0830151610100840151610bed83611db3565b600d600e6101000a81548161ffff021916908361ffff160217905550610c1282611db3565b600d805461ffff92909216600160801b0261ffff60801b19909216919091179055600e819055612710610c458483612d87565b610c4f9190612da6565b6009556127108083610c618683612dc8565b610c6b9085612d87565b610c759190612d87565b610c7f9190612da6565b610c899190612da6565b600a55505050610120820151610140830151610160840151610caa83611d47565b600f805467ffffffffffffffff19166001600160401b0392909216919091179055610cdd610cd88385612ddf565b611d47565b600f8054600160401b600160c01b0319811667ffffffffffffffff60801b196001600160401b03948516600160401b9081029182169290921767ffffffffffffffff60401b1990931617048316600160801b9081029190911791829055610d4c92610cd8928592900416612ddf565b600f80546001600160c01b0316600160c01b6001600160401b03938416021790556101808601516101a0870151600791909155600855600554600654600b54600c54600d54604080516001600160a01b039687168152959094166020860152928401919091526060830152918216608082015261ffff600160401b8304811660a0830152600160501b8304811660c0830152600160601b90920490911660e08201527f75ab989fd8fb2390aca189e73e7167205ac4a3c29fd9d89c112c8a2fc97102fd93506101000191505060405180910390a1600d54600e54600f546007546008546040805161ffff600160701b880481168252600160801b90970490961660208701528501939093526001600160401b038083166060860152600160401b830481166080860152600160c01b90920490911660a084015260c083015260e08201527fe2a22c458b2e239482efb8652576064c276b0d1ce108e306de284c6c614e8f72906101000160405180910390a180156109f5576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6001600160a01b0381163314610f775760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610731565b6109b08282611e16565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b8152600401610fb59190612b74565b602060405180830381865afa158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff69190612d01565b61101357604051637bfa4b9f60e01b815260040160405180910390fd5b806001600160401b0316826001600160401b03161015806110435750600f546001600160401b0390811690831611155b1561108e57600f54604051633d9877ad60e11b8152610731916001600160401b0380821692600160401b8304821692600160801b8104831692600160c01b9091041690600401612df7565b600f8054600160401b600160c01b031916600160401b6001600160401b0385811682810267ffffffffffffffff60801b191693909317600160801b938402176001600160c01b038116600160c01b8784168102918217968790556040517feedf049ba2a9e400be9e2a2d93b7e6023411a5c4fd77fe703bc75c2fea691fc3976109a79794861693861693909317958304851694938304841693919092041690612df7565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016111669190612b74565b602060405180830381865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190612d01565b6111c457604051637bfa4b9f60e01b815260040160405180910390fd5b6111cc611e7d565b6040516000815230907ff0d6825187080fb76e877d6e8990b1e2a60ed4f2d8ccf610e889659854577e749060200160405180910390a2565b600554611219906001600160a01b0316611c3a565b600d54600160901b900460ff1661124357604051631b8b49f960e01b815260040160405180910390fd5b600d546001600160401b031642101561126f57604051630a919d3360e01b815260040160405180910390fd5b33600090815260156020526040902054808211156112a057604051630dc37d7560e21b815260040160405180910390fd5b33600090815260156020526040812080548492906112bf908490612dc8565b909155506112cf90503383611ed1565b7f248517048bc1878f5d0308e1114eba756dc34c77ea2627325801a71c05b5d39533836040516109a7929190612e22565b611308611a37565b6002600154141561132b5760405162461bcd60e51b815260040161073190612cca565b60026001556000808061133d84611ee8565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf9061137f90339030908c908b9088908b908b90600401612e3b565b600060405180830381600087803b15801561139957600080fd5b505af11580156113ad573d6000803e3d6000fd5b505050506113b9611a7f565b6113ef57600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610779565b6113f98787611b70565b600d5461141690899089908990600160501b900461ffff16611b9a565b61141f87611c20565b505060018055505050505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611460611a37565b600260015414156114835760405162461bcd60e51b815260040161073190612cca565b60026001556000808061149584611ee8565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf906114d790339030908b908b9088908b908b90600401612e3b565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b505050506115196115133390565b88611ab3565b611521611a7f565b1561155b5761152f87611f14565b600d5461154d9089908990600090600160601b900461ffff16611b9a565b61155687611f51565b61141f565b611563611f63565b1561157b5761157187611f9c565b6115568888611fd9565b600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610779565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016115e19190612b74565b602060405180830381865afa1580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116229190612d01565b61163f57604051637bfa4b9f60e01b815260040160405180910390fd5b600554611654906001600160a01b0316611c3a565b61165d81611c3a565b60005460ff161515600114806116845750600f54600160c01b90046001600160401b031642115b15611759576005546040516370a0823160e01b81526000916001600160a01b0316906370a08231906116ba903090600401612b74565b602060405180830381865afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190612d1e565b905080156109b05760055461171a906001600160a01b03168383611c61565b6005546040517f7645a5c54de72438a4de1507bde579a46ca541fe92760409bca92b588af03140916109a79185916001600160a01b0316908590612d37565b60405163b5d0229760e01b815260040160405180910390fd5b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016117a69190612b74565b602060405180830381865afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e79190612d01565b61180457604051637bfa4b9f60e01b815260040160405180910390fd5b600554611819906001600160a01b0316611c3a565b600d5460ff600160901b909104161515811515141561184f57604051633a5c93f960e11b81528115156004820152602401610731565b600d8054821515600160901b0260ff60901b199091161790556040517f54b036c17e62300d398f2d9af8763c2bf1ebce09c3b5743016e62cdccebec2c59061189c90831515815260200190565b60405180910390a150565b6000828152600360205260409020600101546118c281611cb7565b6109f58383611e16565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016119009190612b74565b602060405180830381865afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190612d01565b61195e57604051637bfa4b9f60e01b815260040160405180910390fd5b60028190556040518181527fc8d52687b85ab11e6859cb0b390a9e926e1b348d9796e084f88f88420c176fc69060200161189c565b61199b611a37565b600260015414156119be5760405162461bcd60e51b815260040161073190612cca565b60026001556119cd3382611ab3565b6119d5611a7f565b15611a0f576119e381611f14565b600d54611a019083908390600090600160601b900461ffff16611b9a565b611a0a81611f51565b611a2f565b611a17611f63565b1561157b57611a2581611f9c565b611a0a8282611fd9565b505060018055565b60005460ff1615611a7d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610731565b565b600f546000906001600160401b031642118015611aae5750600f54600160401b90046001600160401b03164211155b905090565b600654604051636eb1769f60e11b81526001600160a01b038481166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa158015611b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b289190612d1e565b9050818110156109f5576006546040516304fee01560e31b81526001600160a01b03808616600483015290911660248201526044810182905260648101839052608401610731565b611b7982612045565b808211156109b057604051632b37c00360e11b815260040160405180910390fd5b611bb833600b54600080516020613089833981519152908588612063565b15611bcf57611bca33848360016120cc565b611c1a565b611bed33600c54600080516020613089833981519152908588612063565b15611bff57611bca33848360006120cc565b33604051632e4f414f60e01b81526004016107319190612b74565b50505050565b8060106000828254611c329190612ddf565b909155505050565b6001600160a01b0381166109cd5760405163d92e233d60e01b815260040160405180910390fd5b6109f58363a9059cbb60e01b8484604051602401611c80929190612e22565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612278565b6109cd813361234a565b611ccb828261142d565b6109b05760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d033390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006001600160401b03821115611daf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610731565b5090565b600061ffff821115611daf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b6064820152608401610731565b611e20828261142d565b156109b05760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611e85611a37565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611eba3390565b604051611ec79190612b74565b60405180910390a1565b6005546109b0906001600160a01b03168383611c61565b6000806000611ef6846123ae565b50505060208101516040820151606090920151909260009190911a90565b611f1d81612045565b600a5481601154611f2e9190612ddf565b11156109cd5733816040516330b052c360e01b8152600401610731929190612e22565b8060116000828254611c329190612ddf565b600f54600090600160801b90046001600160401b031642118015611aae575050600f54600160c01b90046001600160401b031642111590565b611fa581612045565b600e5481601254611fb69190612ddf565b11156109cd57338160405163b17009d360e01b8152600401610731929190612e22565b61200a33600b547f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0190600086612063565b1561202a576109b033600d548390600160601b900461ffff1660016120cc565b6109b033600d548390600160601b900461ffff1660006120cc565b806109cd57604051631f2a200560e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606087901b16602082015260348101859052605481018490526074810183905260009081906094016040516020818303038152906040528051906020012090506120c183600254836123d0565b979650505050505050565b60018115151480156120f95750600b54336000908152601360205260409020546120f7908590612ddf565b115b1561211b573383604051631087b52160e01b8152600401610731929190612e22565b801580156121445750600c5433600090815260136020526040902054612142908590612ddf565b115b156121665733836040516384e66cd160e01b8152600401610731929190612e22565b600061217284846123e8565b9050801561219257600654612192906001600160a01b031686308461240e565b61219c858561242f565b6005546001600160a01b03161515806121b6575060075415155b156122155760006121c685612447565b600d54909150600090612710906121e890600160401b900461ffff1684612d87565b6121f29190612da6565b905060006122008284612dc8565b905061220d87828461246f565b505050612221565b6122218460008061246f565b6005546001600160a01b031630336001600160a01b03167fb56e31baf5ee91fd07834187784fb1cbdae3cb94b95610e2a8da75a624e71eaf8760405161226991815260200190565b60405180910390a45050505050565b60006122cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124f79092919063ffffffff16565b8051909150156109f557808060200190518101906122eb9190612d01565b6109f55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610731565b612354828261142d565b6109b05761236c816001600160a01b0316601461250e565b61237783602061250e565b604051602001612388929190612ea8565b60408051601f198184030181529082905262461bcd60e51b825261073191600401612f17565b80516041146109cd57604051637141605d60e11b815260040160405180910390fd5b6000826123dd85846126a9565b1490505b9392505050565b6000816123f757506000610700565b6127106124048385612d87565b6123e19190612da6565b611c1a846323b872dd60e01b858585604051602401611c8093929190612d37565b6006546109b0906001600160a01b031683308461240e565b60085460009061245890600a61302e565b6007546124659084612d87565b6107009190612da6565b82601260008282546124819190612ddf565b909155505033600090815260136020526040812080548592906124a5908490612ddf565b909155505033600090815260146020526040812080548492906124c9908490612ddf565b909155505033600090815260156020526040812080548392906124ed908490612ddf565b9091555050505050565b606061250684846000856126f6565b949350505050565b6060600061251d836002612d87565b612528906002612ddf565b6001600160401b0381111561253f5761253f6128ae565b6040519080825280601f01601f191660200182016040528015612569576020820181803683370190505b509050600360fc1b8160008151811061258457612584612d5b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125b3576125b3612d5b565b60200101906001600160f81b031916908160001a90535060006125d7846002612d87565b6125e2906001612ddf565b90505b600181111561265a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061261657612616612d5b565b1a60f81b82828151811061262c5761262c612d5b565b60200101906001600160f81b031916908160001a90535060049490941c936126538161303a565b90506125e5565b5083156123e15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610731565b600081815b84518110156126ee576126da828683815181106126cd576126cd612d5b565b602002602001015161281c565b9150806126e681613051565b9150506126ae565b509392505050565b6060824710156127575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610731565b6001600160a01b0385163b6127ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610731565b600080866001600160a01b031685876040516127ca919061306c565b60006040518083038185875af1925050503d8060008114612807576040519150601f19603f3d011682016040523d82523d6000602084013e61280c565b606091505b50915091506120c182828661284b565b60008183106128385760008281526020849052604090206123e1565b60008381526020839052604090206123e1565b6060831561285a5750816123e1565b82511561286a5782518084602001fd5b8160405162461bcd60e51b81526004016107319190612f17565b60006020828403121561289657600080fd5b81356001600160e01b0319811681146123e157600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156128e6576128e66128ae565b60405290565b6040516101c081016001600160401b03811182821017156128e6576128e66128ae565b604051601f8201601f191681016001600160401b0381118282101715612937576129376128ae565b604052919050565b600082601f83011261295057600080fd5b813560206001600160401b0382111561296b5761296b6128ae565b8160051b61297a82820161290f565b928352848101820192828101908785111561299457600080fd5b83870192505b848310156120c15782358252918301919083019061299a565b6000806000606084860312156129c857600080fd5b83356001600160401b038111156129de57600080fd5b6129ea8682870161293f565b9660208601359650604090950135949350505050565b600060208284031215612a1257600080fd5b5035919050565b80356001600160a01b0381168114612a3057600080fd5b919050565b600060208284031215612a4757600080fd5b6123e182612a19565b60008060408385031215612a6357600080fd5b82359150612a7360208401612a19565b90509250929050565b600080610200808486031215612a9157600080fd5b84601f850112612aa057600080fd5b612aa86128c4565b806040860187811115612aba57600080fd5b865b81811015612adb57612acd81612a19565b845260209384019301612abc565b5081955087605f880112612aee57600080fd5b612af66128ec565b93870193925082915087841115612b0c57600080fd5b5b83811015612b25578035835260209283019201612b0d565b508093505050509250929050565b80356001600160401b0381168114612a3057600080fd5b60008060408385031215612b5d57600080fd5b612b6683612b33565b9150612a7360208401612b33565b6001600160a01b0391909116815260200190565b600080600080600060a08688031215612ba057600080fd5b85356001600160401b0380821115612bb757600080fd5b612bc389838a0161293f565b9650602091508188013595506040880135945060608801359350608088013581811115612bef57600080fd5b8801601f81018a13612c0057600080fd5b803582811115612c1257612c126128ae565b612c24601f8201601f1916850161290f565b92508083528a84828401011115612c3a57600080fd5b80848301858501376000848285010152505080925050509295509295909350565b80151581146109cd57600080fd5b600060208284031215612c7b57600080fd5b81356123e181612c5b565b60008060408385031215612c9957600080fd5b82356001600160401b03811115612caf57600080fd5b612cbb8582860161293f565b95602094909401359450505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215612d1357600080fd5b81516123e181612c5b565b600060208284031215612d3057600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612da157612da1612d71565b500290565b600082612dc357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612dda57612dda612d71565b500390565b60008219821115612df257612df2612d71565b500190565b6001600160401b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b83811015612e97578181015183820152602001612e7f565b83811115611c1a5750506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612eda816017850160208801612e7c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f0b816028840160208801612e7c565b01602801949350505050565b6020815260008251806020840152612f36816040850160208701612e7c565b601f01601f19169190910160400192915050565b600181815b80851115612f85578160001904821115612f6b57612f6b612d71565b80851615612f7857918102915b93841c9390800290612f4f565b509250929050565b600082612f9c57506001610700565b81612fa957506000610700565b8160018114612fbf5760028114612fc957612fe5565b6001915050610700565b60ff841115612fda57612fda612d71565b50506001821b610700565b5060208310610133831016604e8410600b8410161715613008575081810a610700565b6130128383612f4a565b806000190482111561302657613026612d71565b029392505050565b60006123e18383612f8d565b60008161304957613049612d71565b506000190190565b600060001982141561306557613065612d71565b5060010190565b6000825161307e818460208701612e7c565b919091019291505056feed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95a2646970667358221220ab5f88ebddef9f8e1c18ad0a2adfd172dea52a9aa000da13c5fa88ae4a1de81a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyTokenInCrowdfundingPool(bytes32[],uint256)": {
        "details": "Must be in time for crowdfunding pool and pool is not closed",
        "params": {
          "_purchaseAmount": "Purchase amount of investor",
          "proof": "Respective proof for a leaf, which is respective for investor in merkle tree"
        }
      },
      "buyTokenInCrowdfundingPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)": {
        "details": "Investor do not need execute approve transaction, but need to sign data off-chain; used only for USDC. Must be in time for crowdfunding pool and pool is not closed",
        "params": {
          "_allowance": "Allowance amount of investor's USDC for pool",
          "_deadline": "Deadline of off-chain investor's signature",
          "_purchaseAmount": "Purchase amount of investor",
          "_signature": "Signature of investor",
          "proof": "Respective proof for a leaf, which is respective for investor in merkle tree"
        }
      },
      "buyTokenInGalaxyPool(bytes32[],uint256,uint256)": {
        "details": "Must be in time for whale and pool is not closed",
        "params": {
          "_maxPurchaseBaseOnAllocations": "Max purchase amount base on allocation of whale",
          "_purchaseAmount": "Purchase amount of investor",
          "proof": "Respective proof for a leaf, which is respective for investor in merkle tree"
        }
      },
      "buyTokenInGalaxyPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)": {
        "details": "Investor do not need execute approve transaction, but need to sign data off-chain; used only for USDC. Must be in time for whale and pool is not closed",
        "params": {
          "_deadline": "Deadline of off-chain investor's signature",
          "_maxPurchaseBaseOnAllocations": "Max purchase amount base on allocation of whale",
          "_purchaseAmount": "Purchase amount of investor",
          "_signature": "Signature of investor",
          "proof": "Respective proof for a leaf, which is respective for investor in merkle tree"
        }
      },
      "closePool()": {
        "details": "Only admin can call it"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address[2],uint256[14])": {
        "details": "Emit 2 events",
        "params": {
          "addrs": "Array of address includes: address of IDO token, address of purchase token",
          "uints": "Array of pool information includes: max purchase amount for KYC user, max purchase amount for Not KYC user, TGE date, TGE percentage,  galaxy participation fee percentage, crowdfunding participation fee percentage, galaxy pool proportion, early access proportion, total raise amount, whale open time, whale duration, community duration, rate and decimal of IDO token"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeemTGEIDOToken(uint256)": {
        "params": {
          "_IDORedeemAmount": "Amount of IDO token is wanted to redeem"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setRedeemableTGEIDOToken(bool)": {
        "details": "Only admin can call it"
      },
      "setRoot(bytes32)": {
        "details": "Only admin can call it",
        "params": {
          "_root": "Root of merkle tree"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateTime(uint64,uint64)": {
        "details": "Only admin can call it, galaxy pool must be closed before crowdfunding pool",
        "params": {
          "_newCommunityCloseTime": "New close time of crowdfunding pool",
          "_newWhaleCloseTime": "New close time of galaxy pool"
        }
      },
      "withdrawIDOToken(address)": {
        "details": "Only admin can call it after pool closed",
        "params": {
          "_withdrawIDOTokenRecipient": "Address of recipient"
        }
      },
      "withdrawPurchaseToken(address)": {
        "details": "Only admin can call it after pool closed",
        "params": {
          "_withdrawPurchaseTokenRecipient": "Address of recipient"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyTokenInCrowdfundingPool(bytes32[],uint256)": {
        "notice": "Investor buy token in crowdfunding pool"
      },
      "buyTokenInCrowdfundingPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)": {
        "notice": "Investor buy token in crowdfunding pool"
      },
      "buyTokenInGalaxyPool(bytes32[],uint256,uint256)": {
        "notice": "Investor buy token in galaxy pool"
      },
      "buyTokenInGalaxyPoolWithPermit(bytes32[],uint256,uint256,uint256,bytes)": {
        "notice": "Investor buy token in galaxy pool"
      },
      "closePool()": {
        "notice": "Close pool: cancel project, nobody can buy token"
      },
      "initialize(address[2],uint256[14])": {
        "notice": "Initialize a pool with its information"
      },
      "redeemTGEIDOToken(uint256)": {
        "notice": "Investor redeem IDO token after TGE date"
      },
      "setRedeemableTGEIDOToken(bool)": {
        "notice": "Allow or disallow investors to redeem TGE amount of IDO token"
      },
      "setRoot(bytes32)": {
        "notice": "Set merkle tree root after snapshoting information of investor"
      },
      "updateTime(uint64,uint64)": {
        "notice": "Update time for galaxy pool and crowdfunding pool"
      },
      "withdrawIDOToken(address)": {
        "notice": "Admin withdraw redundant IDO token in pool"
      },
      "withdrawPurchaseToken(address)": {
        "notice": "Admin withdraw purchase token in pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9528,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9629,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5358,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "root",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 9017,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)9012_storage)"
      },
      {
        "astId": 9364,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 9367,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3025,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "poolFactory",
        "offset": 2,
        "slot": "4",
        "type": "t_contract(IPoolFactory)5618"
      },
      {
        "astId": 3031,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "IDOToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)2372"
      },
      {
        "astId": 3034,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchaseToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)2372"
      },
      {
        "astId": 3037,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "offeredCurrency",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(OfferedCurrency)3016_storage"
      },
      {
        "astId": 3039,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForGalaxyPool",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3041,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForEarlyAccess",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3043,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForKYCUser",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3045,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForNotKYCUser",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3047,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "TGEDate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint64"
      },
      {
        "astId": 3049,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "TGEPercentage",
        "offset": 8,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3051,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "galaxyParticipationFeePercentage",
        "offset": 10,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3053,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "crowdfundingParticipationFeePercentage",
        "offset": 12,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3055,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "galaxyPoolProportion",
        "offset": 14,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3057,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "earlyAccessProportion",
        "offset": 16,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3059,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "TGERedeemable",
        "offset": 18,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 3061,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "totalRaiseAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3063,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "whaleOpenTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3065,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "whaleCloseTime",
        "offset": 8,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3067,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "communityOpenTime",
        "offset": 16,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3069,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "communityCloseTime",
        "offset": 24,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3071,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchasedAmountInGalaxyPool",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3073,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchasedAmountInEarlyAccess",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3075,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchasedAmount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3079,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "userPurchasedAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3083,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "userIDOAirdropAmount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3087,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "userIDOTGEAmount",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2372": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolFactory)5618": {
        "encoding": "inplace",
        "label": "contract IPoolFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)9012_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)9012_storage"
      },
      "t_struct(OfferedCurrency)3016_storage": {
        "encoding": "inplace",
        "label": "struct Pool.OfferedCurrency",
        "members": [
          {
            "astId": 3013,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3015,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "decimal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)9012_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 9009,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9011,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}