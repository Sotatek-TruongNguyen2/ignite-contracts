{
  "address": "0xFBFb9D921d65a566444C7aBF9620ADA5B92d6CE0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "presentStatus",
          "type": "bool"
        }
      ],
      "name": "AlreadySetClaimableTGE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimExceedMaxTGEAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForEarlyAccess",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForGalaxyPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForKYCUser",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxPurchaseAmountForNotKYCUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedMaxPurchaseAmountForUser",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedTotalRaiseAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedToClaimTGEIDOAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughConditionToRedeemIDOToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughConditionToRedeemPurchaseToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "NotInWhaleList",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "whaleOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whaleCloseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityCloseTime",
          "type": "uint256"
        }
      ],
      "name": "NotUpdateValidTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotValidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYetTimeToClaimTGE",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "whaleOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whaleCloseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityOpenTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityCloseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "TimeOutToBuyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimeOutToSetPoolStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "BuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimTGEAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPurchaseAmountForKYCUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPurchaseAmountForNotKYCUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "participationFeePercentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "galaxyPoolProportion",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "earlyAccessProportion",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRaiseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleCloseTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityCloseTime",
          "type": "uint64"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemIDOTokenRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemIDOToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemPurchaseTokenRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemPurchaseToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "IDOToken",
          "type": "address"
        }
      ],
      "name": "SetIDOTokenAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "claimable",
          "type": "bool"
        }
      ],
      "name": "SetTGEClaimable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "UpdateFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "UpdateOfferedCurrencyRateAndDecimal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "UpdateOpenPoolStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "UpdateRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleCloseTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityCloseTime",
          "type": "uint64"
        }
      ],
      "name": "UpdateTime",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDOToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NORMAL_USER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGEClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGEDate",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGEPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHALE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "buyTokenInCrowdfundingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "buyTokenInCrowdfundingPoolWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPurchaseBaseOnAllocations",
          "type": "uint256"
        }
      ],
      "name": "buyTokenInGalaxyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPurchaseBaseOnAllocations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "buyTokenInGalaxyPoolWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_IDOClaimAmount",
          "type": "uint256"
        }
      ],
      "name": "claimTGEIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityCloseTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityOpenTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyAccessProportion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "galaxyPoolProportion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "addrs",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[13]",
          "name": "uints",
          "type": "uint256[13]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForEarlyAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForGalaxyPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForKYCUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForNotKYCUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offeredCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "participationFeePercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactory",
      "outputs": [
        {
          "internalType": "contract IPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmountInEarlyAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmountInGalaxyPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_redeemIDOTokenRecipient",
          "type": "address"
        }
      ],
      "name": "redeemIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_redeemPurchaseTokenRecipient",
          "type": "address"
        }
      ],
      "name": "redeemPurchaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_TGEClaimableStatus",
          "type": "bool"
        }
      ],
      "name": "setClaimableTGEIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaiseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_newWhaleCloseTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_newCommunityCloseTime",
          "type": "uint64"
        }
      ],
      "name": "updateTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIDOAirdropAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIDOTGEAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPurchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whaleCloseTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whaleOpenTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf79e2ec67f95656e4a463254acfa9b6e6ed79d679e9c205133e93d01a95c23e7",
  "receipt": {
    "to": null,
    "from": "0x9460b481366b7462af4f7991d430e5eB97FAAEB5",
    "contractAddress": "0xFBFb9D921d65a566444C7aBF9620ADA5B92d6CE0",
    "transactionIndex": 3,
    "gasUsed": "2735050",
    "logsBloom": "0x
    "blockHash": "0xea4b66bdd398be83e0c1ecae9d2be3d41ed33bd9498c0717c04a966452f44dab",
    "transactionHash": "0xf79e2ec67f95656e4a463254acfa9b6e6ed79d679e9c205133e93d01a95c23e7",
    "logs": [],
    "blockNumber": 25816786,
    "cumulativeGasUsed": "3016586",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "530248caf089a1b51ebded0f5e95c980",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"presentStatus\",\"type\":\"bool\"}],\"name\":\"AlreadySetClaimableTGE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimExceedMaxTGEAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForEarlyAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForGalaxyPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForKYCUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxPurchaseAmountForNotKYCUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaxPurchaseAmountForUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedTotalRaiseAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToClaimTGEIDOAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughConditionToRedeemIDOToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughConditionToRedeemPurchaseToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"NotInWhaleList\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whaleOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleCloseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityCloseTime\",\"type\":\"uint256\"}],\"name\":\"NotUpdateValidTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotValidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYetTimeToClaimTGE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whaleOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleCloseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityCloseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TimeOutToBuyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimeOutToSetPoolStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimTGEAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPurchaseAmountForKYCUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPurchaseAmountForNotKYCUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"participationFeePercentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"galaxyPoolProportion\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"earlyAccessProportion\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRaiseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleCloseTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityCloseTime\",\"type\":\"uint64\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemIDOTokenRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemIDOToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemPurchaseTokenRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemPurchaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"IDOToken\",\"type\":\"address\"}],\"name\":\"SetIDOTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"name\":\"SetTGEClaimable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"UpdateFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"UpdateOfferedCurrencyRateAndDecimal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateOpenPoolStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"UpdateRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleCloseTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityCloseTime\",\"type\":\"uint64\"}],\"name\":\"UpdateTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDOToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NORMAL_USER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGEClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGEDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGEPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHALE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokenInCrowdfundingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenInCrowdfundingPoolWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchaseBaseOnAllocations\",\"type\":\"uint256\"}],\"name\":\"buyTokenInGalaxyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchaseBaseOnAllocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenInGalaxyPoolWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_IDOClaimAmount\",\"type\":\"uint256\"}],\"name\":\"claimTGEIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityCloseTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityOpenTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyAccessProportion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galaxyPoolProportion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"addrs\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[13]\",\"name\":\"uints\",\"type\":\"uint256[13]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForEarlyAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForGalaxyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForKYCUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForNotKYCUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offeredCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participationFeePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmountInEarlyAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmountInGalaxyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redeemIDOTokenRecipient\",\"type\":\"address\"}],\"name\":\"redeemIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redeemPurchaseTokenRecipient\",\"type\":\"address\"}],\"name\":\"redeemPurchaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_TGEClaimableStatus\",\"type\":\"bool\"}],\"name\":\"setClaimableTGEIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaiseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newWhaleCloseTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newCommunityCloseTime\",\"type\":\"uint64\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIDOAirdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIDOTGEAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleCloseTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleOpenTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDOpool/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/IDOpool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Pausable.sol\\\";\\nimport \\\"../utils/ReentrancyGuard.sol\\\";\\nimport \\\"../extensions/IgnitionList.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\ncontract Pool is Pausable, ReentrancyGuard, IgnitionList, AccessControl, Initializable {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint;\\n\\n    struct OfferedCurrency {\\n        uint rate;\\n        uint decimal;\\n    }\\n\\n    // keccak256(\\\"WHALE\\\")\\n    bytes32 public constant WHALE = 0xed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95;\\n\\n    // keccak256(\\\"NORMAL_USER\\\")\\n    bytes32 public constant NORMAL_USER = 0x13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e01;\\n\\n    IPoolFactory public poolFactory;\\n    uint16 public constant PERCENTAGE_DENOMINATOR = 10000;\\n    IERC20 public IDOToken;\\n    IERC20 public purchaseToken;\\n    OfferedCurrency public offeredCurrency;\\n\\n    uint public maxPurchaseAmountForGalaxyPool;\\n    uint public maxPurchaseAmountForEarlyAccess;\\n    uint public maxPurchaseAmountForKYCUser;\\n    uint public maxPurchaseAmountForNotKYCUser;\\n    \\n    uint64 public TGEDate;\\n    uint16 public TGEPercentage;\\n    uint16 public participationFeePercentage;\\n    uint16 public galaxyPoolProportion;\\n    uint16 public earlyAccessProportion;\\n    bool public TGEClaimable;\\n    uint public totalRaiseAmount;\\n\\n    uint64 public whaleOpenTime;\\n    uint64 public whaleCloseTime;\\n    uint64 public communityOpenTime;\\n    uint64 public communityCloseTime;\\n\\n    uint public purchasedAmountInGalaxyPool;\\n    uint public purchasedAmountInEarlyAccess;\\n    uint public purchasedAmount;\\n\\n    mapping(address => uint) public userPurchasedAmount;\\n    mapping(address => uint) public userIDOAirdropAmount;\\n    mapping(address => uint) public userIDOTGEAmount;\\n\\n    event UpdateRoot(bytes32 root);\\n    event SetTGEClaimable(bool claimable);\\n    event SetIDOTokenAddress(address IDOToken);\\n    event ClaimTGEAmount(address buyer, uint claimAmount);\\n    event UpdateFeeRecipient(address indexed feeRecipient);\\n    event UpdateOpenPoolStatus(address indexed pool, bool status);\\n    event UpdateOfferedCurrencyRateAndDecimal(uint _rate, uint _decimal);\\n    event RedeemIDOToken(address redeemIDOTokenRecipient, address IDOToken, uint remainAmount);\\n    event BuyToken(address indexed buyer, address indexed pool, address indexed IDOToken, uint purchaseAmount);\\n    event RedeemPurchaseToken(address redeemPurchaseTokenRecipient, address purchaseToken, uint purchaseAmount);\\n    event UpdateTime(uint64 whaleOpenTime, uint64 whaleCloseTime, uint64 communityOpenTime, uint64 communityCloseTime);\\n    event PoolCreated(address IDOToken, address purchaseToken, uint rate, uint decimal,uint maxPurchaseAmountForKYCUser, uint maxPurchaseAmountForNotKYCUser,\\n        uint16 participationFeePercentage, uint16 galaxyPoolProportion, uint16 earlyAccessProportion, uint totalRaiseAmount, uint64 whaleOpenTime, uint64 whaleCloseTime, uint64 communityCloseTime);\\n\\n    error NotAdmin();\\n    error ZeroAmount();\\n    error ZeroAddress();\\n    error NotValidSignature();\\n    error NotYetTimeToClaimTGE();\\n    error TimeOutToSetPoolStatus();\\n    error ClaimExceedMaxTGEAmount();\\n    error NotInWhaleList(address buyer);\\n    error NotAllowedToClaimTGEIDOAmount();\\n    error ExceedMaxPurchaseAmountForUser();\\n    error NotEnoughConditionToRedeemIDOToken();\\n    error NotEnoughConditionToRedeemPurchaseToken();\\n    error AlreadySetClaimableTGE(bool presentStatus);\\n    error ExceedTotalRaiseAmount(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForKYCUser(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForGalaxyPool(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForNotKYCUser(address buyer, uint purchaseAmount);\\n    error ExceedMaxPurchaseAmountForEarlyAccess(address buyer, uint purchaseAmount);\\n    error NotEnoughAllowance(address buyer, address purchaseToken, uint allowance, uint amount);\\n    error NotUpdateValidTime(uint whaleOpenTime, uint whaleCloseTime, uint communityOpenTime, uint communityCloseTime);\\n    error TimeOutToBuyToken(uint whaleOpenTime, uint whaleCloseTime, uint communityOpenTime, uint communityCloseTime, uint timestamp, address buyer);\\n\\n    modifier onlyAdmin {\\n        if(!poolFactory.hasAdminRole(_msgSender())){\\n            revert NotAdmin();\\n        }\\n        _;\\n    }\\n\\n    function initialize(address[2] memory addrs, uint[13] memory uints) external initializer{\\n        {\\n            poolFactory = IPoolFactory(_msgSender());\\n        }\\n        {\\n            address _IDOToken = addrs[0];\\n            address _purchaseToken = addrs[1];\\n            IDOToken = IERC20(_IDOToken);\\n            purchaseToken = IERC20(_purchaseToken);\\n        }\\n        {\\n            uint _maxPurchaseAmountForKYCUser = uints[0];\\n            uint _maxPurchaseAmountForNotKYCUser = uints[1];\\n            maxPurchaseAmountForKYCUser = _maxPurchaseAmountForKYCUser;\\n            maxPurchaseAmountForNotKYCUser = _maxPurchaseAmountForNotKYCUser;\\n        }\\n        {\\n            uint _TGEDate = uints[2];\\n            uint _TGEPercentage = uints[3];\\n            TGEDate = SafeCast.toUint64(_TGEDate);\\n            TGEPercentage = SafeCast.toUint16(_TGEPercentage);\\n        }\\n        {\\n            uint _participationFeePercentage = uints[4];\\n            participationFeePercentage = SafeCast.toUint16(_participationFeePercentage);\\n        }\\n        {\\n            uint _galaxyPoolProportion = uints[5];\\n            uint _earlyAccessProportion = uints[6];\\n            uint _totalRaiseAmount = uints[7];\\n            galaxyPoolProportion = SafeCast.toUint16(_galaxyPoolProportion);\\n            earlyAccessProportion = SafeCast.toUint16(_earlyAccessProportion);\\n            totalRaiseAmount = _totalRaiseAmount;\\n\\n            maxPurchaseAmountForGalaxyPool = _totalRaiseAmount * _galaxyPoolProportion / PERCENTAGE_DENOMINATOR;\\n            maxPurchaseAmountForEarlyAccess = _totalRaiseAmount * (PERCENTAGE_DENOMINATOR - _galaxyPoolProportion) * _earlyAccessProportion / PERCENTAGE_DENOMINATOR / PERCENTAGE_DENOMINATOR;\\n        }\\n        {\\n            uint _whaleOpenTime = uints[8];\\n            uint _whaleDuration = uints[9];\\n            uint _communityDuration = uints[10];\\n            whaleOpenTime = SafeCast.toUint64(_whaleOpenTime);\\n            whaleCloseTime = SafeCast.toUint64(_whaleOpenTime+_whaleDuration);\\n            communityOpenTime = whaleCloseTime;\\n            communityCloseTime = SafeCast.toUint64(communityOpenTime + _communityDuration);\\n        }\\n        {\\n            uint _rate = uints[11];\\n            uint _decimal = uints[12];\\n            offeredCurrency.rate = _rate;\\n            offeredCurrency.decimal = _decimal;\\n        }\\n        \\n        emit PoolCreated(address(IDOToken), address(purchaseToken), offeredCurrency.rate, offeredCurrency.decimal, maxPurchaseAmountForKYCUser, \\n            maxPurchaseAmountForNotKYCUser, participationFeePercentage, galaxyPoolProportion, earlyAccessProportion, totalRaiseAmount, whaleOpenTime, whaleCloseTime, communityCloseTime);\\n    }\\n\\n    function setRoot(bytes32 _root) external onlyAdmin{\\n        root = _root;\\n        emit UpdateRoot(root);\\n    }\\n\\n    function closePool() external onlyAdmin {\\n        _pause();\\n        emit UpdateOpenPoolStatus(address(this), false);\\n    }\\n\\n    function updateTime(uint64 _newWhaleCloseTime, uint64 _newCommunityCloseTime) external onlyAdmin {\\n        if(_newWhaleCloseTime >= _newCommunityCloseTime || _newWhaleCloseTime <= whaleOpenTime) {\\n            revert NotUpdateValidTime(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime);\\n        }\\n        whaleCloseTime = _newWhaleCloseTime;\\n        communityOpenTime = _newWhaleCloseTime;\\n        communityCloseTime = _newCommunityCloseTime;\\n        emit UpdateTime(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime);\\n    }\\n\\n    function buyTokenInGalaxyPool(bytes32[] memory proof, uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations) external whenNotPaused nonReentrant {\\n        if(!_validWhaleSession()) {\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n        _preValidatePurchaseInGalaxyPool(_purchaseAmount,_maxPurchaseBaseOnAllocations);\\n        _internalWhaleBuyToken(proof, _purchaseAmount, _maxPurchaseBaseOnAllocations, 0);\\n        _updatePurchasingInGalaxyPoolState(_purchaseAmount);\\n    }\\n\\n    function buyTokenInCrowdfundingPool(bytes32[] memory proof, uint _purchaseAmount) external whenNotPaused nonReentrant {\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n        if(_validWhaleSession()){\\n            _preValidatePurchaseInEarlyAccess(_purchaseAmount);\\n            _internalWhaleBuyToken(proof, _purchaseAmount, 0, participationFeePercentage);\\n            _updatePurchasingInEarlyAccessState(_purchaseAmount);\\n        }else if(_validCommunitySession()){\\n            _preValidatePurchase(_purchaseAmount);\\n            _internalNormalUserBuyToken(proof, _purchaseAmount);\\n        }else{\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n    }\\n\\n    // Used only for USDC\\n    function buyTokenInGalaxyPoolWithPermit(bytes32[] memory proof, uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations, uint _deadline, bytes memory _signature) external whenNotPaused nonReentrant{\\n        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(_signature);\\n        IERC20Permit(address(purchaseToken)).permit(_msgSender(), address(this), _purchaseAmount, _deadline, v, r, s);\\n        if(!_validWhaleSession()) {\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n        _preValidatePurchaseInGalaxyPool(_purchaseAmount,_maxPurchaseBaseOnAllocations);\\n        _internalWhaleBuyToken(proof, _purchaseAmount, _maxPurchaseBaseOnAllocations, 0);\\n        _updatePurchasingInGalaxyPoolState(_purchaseAmount);\\n    }\\n\\n    // Used only for USDC\\n    function buyTokenInCrowdfundingPoolWithPermit(bytes32[] memory proof, uint _purchaseAmount, uint _allowance, uint _deadline, bytes memory _signature) external whenNotPaused nonReentrant{\\n        \\n        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(_signature);\\n        IERC20Permit(address(purchaseToken)).permit(_msgSender(), address(this), _allowance, _deadline, v, r, s);\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n        if(_validWhaleSession()){\\n            _preValidatePurchaseInEarlyAccess(_purchaseAmount);\\n            _internalWhaleBuyToken(proof, _purchaseAmount, 0, participationFeePercentage);\\n            _updatePurchasingInEarlyAccessState(_purchaseAmount);\\n        }else if(_validCommunitySession()){\\n            _preValidatePurchase(_purchaseAmount);\\n            _internalNormalUserBuyToken(proof, _purchaseAmount);\\n        }else{\\n            revert TimeOutToBuyToken(whaleOpenTime, whaleCloseTime, communityOpenTime, communityCloseTime, block.timestamp, _msgSender());\\n        }\\n    }\\n\\n    function redeemIDOToken(address _redeemIDOTokenRecipient) external onlyAdmin {\\n        _validAddress(address(IDOToken));\\n        _validAddress(_redeemIDOTokenRecipient);\\n        if(paused() == true || block.timestamp > communityCloseTime){\\n            uint remainAmount = IDOToken.balanceOf(address(this));\\n            if(remainAmount > 0){\\n                IDOToken.safeTransfer(_redeemIDOTokenRecipient, remainAmount);\\n                emit RedeemIDOToken(_redeemIDOTokenRecipient, address(IDOToken), remainAmount);\\n            }\\n        }else{\\n            revert NotEnoughConditionToRedeemIDOToken();\\n        }\\n    }\\n\\n    function redeemPurchaseToken(address _redeemPurchaseTokenRecipient) external onlyAdmin{\\n        _validAddress(_redeemPurchaseTokenRecipient);\\n        if(paused() == true || block.timestamp > communityCloseTime){\\n            uint purchaseAmount = purchaseToken.balanceOf(address(this));\\n            if(purchaseAmount > 0){\\n                purchaseToken.safeTransfer(_redeemPurchaseTokenRecipient, purchaseAmount);\\n                emit RedeemPurchaseToken(_redeemPurchaseTokenRecipient, address(purchaseToken), purchaseAmount);\\n            }\\n        }else{\\n            revert NotEnoughConditionToRedeemPurchaseToken();\\n        }\\n    }\\n\\n    function claimTGEIDOToken(uint _IDOClaimAmount) external {\\n        _validAddress(address(IDOToken));\\n        if(TGEClaimable == false){\\n            revert NotAllowedToClaimTGEIDOAmount();\\n        }\\n        if(block.timestamp < TGEDate){\\n            revert NotYetTimeToClaimTGE();\\n        }\\n        uint IDOTGEAmount = userIDOTGEAmount[_msgSender()];\\n        if(_IDOClaimAmount > IDOTGEAmount){\\n            revert ClaimExceedMaxTGEAmount();\\n        }\\n        userIDOTGEAmount[_msgSender()] -= _IDOClaimAmount;\\n        _deliverTGEIDOTokens(_msgSender(), _IDOClaimAmount);\\n        emit ClaimTGEAmount(_msgSender(), _IDOClaimAmount);\\n    }\\n\\n    function setClaimableTGEIDOToken(bool _TGEClaimableStatus) external onlyAdmin{\\n        _validAddress(address(IDOToken));\\n        if(TGEClaimable == _TGEClaimableStatus){\\n            revert AlreadySetClaimableTGE(_TGEClaimableStatus);\\n        }\\n        TGEClaimable = _TGEClaimableStatus;\\n        emit SetTGEClaimable(_TGEClaimableStatus);\\n    }\\n\\n    function _validAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert ZeroAddress();\\n        }\\n    }\\n\\n    function _validAmount(uint _amount) internal pure {\\n        if (_amount == 0) {\\n            revert ZeroAmount();\\n        }\\n    }\\n\\n    function _validSignature(bytes memory _signature) internal pure {\\n        if (_signature.length != 65) {\\n            revert NotValidSignature();\\n        }\\n    }\\n\\n    function _internalWhaleBuyToken(bytes32[] memory proof, uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations, uint _participationFeePercentage) internal {\\n        if(_verifyUser(_msgSender(), WHALE, maxPurchaseAmountForKYCUser, _maxPurchaseBaseOnAllocations, proof)){\\n            _internalBuyToken(_msgSender(), _purchaseAmount, _participationFeePercentage, true);\\n        }else if(_verifyUser(_msgSender(), WHALE, maxPurchaseAmountForNotKYCUser, _maxPurchaseBaseOnAllocations, proof)){\\n            _internalBuyToken(_msgSender(), _purchaseAmount, _participationFeePercentage, false);\\n        }else{\\n            revert NotInWhaleList(_msgSender());\\n        }\\n    }\\n\\n    function _internalNormalUserBuyToken(bytes32[] memory proof, uint _purchaseAmount) internal{\\n        if(_verifyUser(_msgSender(), NORMAL_USER, maxPurchaseAmountForKYCUser, 0, proof)){\\n            _internalBuyToken(_msgSender(), _purchaseAmount, participationFeePercentage, true);\\n        }else {\\n            _internalBuyToken(_msgSender(), _purchaseAmount, participationFeePercentage, false);\\n        }\\n    }\\n    \\n    function _splitSignature(bytes memory _signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        _validSignature(_signature);\\n        assembly {\\n            r := mload(add(_signature, 0x20))\\n            s := mload(add(_signature, 0x40))\\n            v := byte(0, mload(add(_signature, 0x60)))\\n        }\\n    }\\n\\n    function _validWhaleSession() internal view returns(bool){\\n        return block.timestamp > whaleOpenTime && block.timestamp <= whaleCloseTime;\\n    }\\n\\n    function _validCommunitySession() internal view returns (bool) {\\n        return block.timestamp > communityOpenTime && block.timestamp <= communityCloseTime;\\n    }    \\n\\n    function _internalBuyToken(address buyer, uint _purchaseAmount, uint _participationFeePercentage, bool _KYCStatus) internal{\\n\\n        if(_KYCStatus == true &&  userPurchasedAmount[_msgSender()] + _purchaseAmount > maxPurchaseAmountForKYCUser){\\n            revert ExceedMaxPurchaseAmountForKYCUser(_msgSender(), _purchaseAmount);\\n        }\\n\\n        if(_KYCStatus == false && userPurchasedAmount[_msgSender()] + _purchaseAmount > maxPurchaseAmountForNotKYCUser){\\n            revert ExceedMaxPurchaseAmountForNotKYCUser(_msgSender(), _purchaseAmount);\\n        }\\n\\n        uint participationFee = _calculateParticipantFee(_purchaseAmount, _participationFeePercentage);\\n        if(participationFee > 0){\\n            purchaseToken.safeTransferFrom(buyer, address(this), participationFee);\\n        }\\n        _forwardPurchaseTokenFunds(buyer, _purchaseAmount);\\n\\n        if(address(IDOToken) != address(0) || offeredCurrency.rate != 0){\\n            uint IDOTokenAmount = _getIDOTokenAmountByOfferedCurrency(_purchaseAmount);\\n            uint TGEIDOTokenAmount = IDOTokenAmount * TGEPercentage / PERCENTAGE_DENOMINATOR;\\n            uint airdropTokenAmount = IDOTokenAmount - TGEIDOTokenAmount;\\n            _updatePurchasingState(_purchaseAmount, airdropTokenAmount, TGEIDOTokenAmount);\\n        }else{\\n            _updatePurchasingState(_purchaseAmount, 0, 0);\\n        }\\n\\n        emit BuyToken(_msgSender(), address(this), address(IDOToken), _purchaseAmount);\\n    }\\n\\n    function _updatePurchasingInGalaxyPoolState(uint _purchaseAmount) internal {\\n        purchasedAmountInGalaxyPool += _purchaseAmount;\\n    }\\n\\n    function _updatePurchasingInEarlyAccessState(uint _purchaseAmount) internal {\\n        purchasedAmountInEarlyAccess += _purchaseAmount;\\n    }\\n\\n    function _updatePurchasingState(uint _purchaseAmount, uint _airdropTokenAmount, uint _TGEIDOTokenAmount) internal {\\n        purchasedAmount += _purchaseAmount;\\n        userPurchasedAmount[_msgSender()] += _purchaseAmount;\\n        userIDOAirdropAmount[_msgSender()] += _airdropTokenAmount;\\n        userIDOTGEAmount[_msgSender()] += _TGEIDOTokenAmount;\\n    }\\n\\n    function _deliverTGEIDOTokens(address buyer, uint _TGEtokenAmount) internal {\\n        IDOToken.safeTransfer(buyer, _TGEtokenAmount);\\n    }\\n\\n    function _getIDOTokenAmountByOfferedCurrency(uint _amount) internal view returns(uint){\\n        return _amount * offeredCurrency.rate / 10 ** offeredCurrency.decimal;\\n    }\\n\\n    function _forwardPurchaseTokenFunds(address buyer, uint _purchaseAmount) internal {\\n        purchaseToken.safeTransferFrom(buyer, address(this), _purchaseAmount);\\n    }\\n\\n    function _calculateParticipantFee(uint _purchaseAmount, uint _participationFeePercentage) internal pure returns(uint){\\n        if(_participationFeePercentage == 0) return 0;\\n        return _purchaseAmount * _participationFeePercentage / PERCENTAGE_DENOMINATOR;\\n    }\\n\\n    function _verifyAllowance(address _user, uint _purchaseAmount) private view{\\n        uint allowance = purchaseToken.allowance(_user, address(this));\\n        if(allowance < _purchaseAmount){\\n            revert NotEnoughAllowance(_user, address(purchaseToken), allowance, _purchaseAmount);\\n        }\\n    }\\n\\n    function _preValidatePurchaseInGalaxyPool(uint _purchaseAmount, uint _maxPurchaseBaseOnAllocations) internal pure{\\n        _validAmount(_purchaseAmount);\\n        if(_purchaseAmount > _maxPurchaseBaseOnAllocations){\\n            revert ExceedMaxPurchaseAmountForUser();\\n        }\\n    }\\n\\n    function _preValidatePurchaseInEarlyAccess(uint _purchaseAmount) internal view{\\n        _validAmount(_purchaseAmount);\\n        if(purchasedAmountInEarlyAccess + _purchaseAmount > maxPurchaseAmountForEarlyAccess){\\n            revert ExceedMaxPurchaseAmountForEarlyAccess(_msgSender(), _purchaseAmount);\\n        }\\n    }\\n\\n    function _preValidatePurchase(uint _purchaseAmount) internal view{\\n        _validAmount(_purchaseAmount);\\n        if(purchasedAmount + _purchaseAmount > totalRaiseAmount){\\n            revert ExceedTotalRaiseAmount(_msgSender(), _purchaseAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x010d1e3a34ffc8151329a6722999d844f045ef5ec435390844c087008ac15bfe\",\"license\":\"UNLICENSED\"},\"contracts/extensions/IgnitionList.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/MerkleProof.sol\\\";\\n\\ncontract IgnitionList {\\n    bytes32 public root;\\n\\n    function _verifyUser(\\n        address _candidate,\\n        bytes32 _poolType,\\n        uint _maxPurchaseWhetherOrNotKYCAmount,\\n        uint _maxPurchaseBaseOnAllocations,\\n        bytes32[] memory proof\\n    ) internal view returns (bool) {\\n        // leaf = {address + hash(\\\"Pool type\\\") + max purchase KYC/notKYC amount + max purchase for each user per allocation}\\n        bytes32 leaf = keccak256(abi.encodePacked(_candidate, _poolType, _maxPurchaseWhetherOrNotKYCAmount, _maxPurchaseBaseOnAllocations));\\n        return MerkleProof.verify(proof, root, leaf);\\n    }\\n}\",\"keccak256\":\"0xb7a4ad193020fe234f779f66113d3f81cbc0ed3f38342912a404ca9cfc801e2c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x20b0d6d8e8df085e9caf8ca291248fff3948235892733d0af1fc25eed7e9d0fe\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0a9d562a248a740c982d5218ce9deabcaa77a3df4d5915dfc0b352496361abe5\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\ninterface IPoolFactory{\\n    function hasAdminRole(address _admin) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x4a4038e34a5595a68cc5e5121ff97a20a9ce4e70bb31b696fbd68ce4a61ac825\",\"license\":\"UNLICENSED\"},\"contracts/libraries/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1861b048258956fa4704249b225bbc77119ebf2223ad2dc536b2637c1b9850e4\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x9bce09fa412574146f23d8fdd32257ad5aa157e9a8c76efed60a0f55cb3fe15a\",\"license\":\"MIT\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xb8fbe60230f9487a501cb4d48d9d1586ef743163ea03401e0f5b21154140f9aa\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../libraries/Strings.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module thatIAccessControl allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9948d3c842dc9de2ccb37c58443fb38ef3ac631d87692a866aca7d0a1570f97\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x43a65135f4f49e783182290da5c4c86a2ac4599f94391483b360e094b3b8f759\",\"license\":\"MIT\"},\"contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x83ec9bcfbd79426bf1d84e96c3fe7092923e8e91abdc9c8e2489ede5e7b016ab\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity 0.8.10;\\n\\n// import \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            // (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            (isTopLevelCall && _initialized < 1) || (!(address(this).code.length > 0) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb1887e7ebbf1f08ab4075a35d87af54e145868ccd314f6fbd0d1f9440e7069f\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xd1750e2a389c2576ae7a0c2190fa7ee2e351bf0c7bb6320be27b36c7850a326e\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x80216195f399679b62d20ff215250a59a1562023d5c673255215863e20819d06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff191690556001805561301a8061002e6000396000f3fe608060405234801561001057600080fd5b50600436106102ab5760003560e01c806381e2403b11610172578063b4582276116100d9578063d547741f11610092578063d547741f14610629578063dab5f3401461063c578063e5fa15fa1461064f578063e995914914610663578063ebf0c7171461068a578063efaad0ec14610693578063f1379939146106a657600080fd5b8063b4582276146105aa578063c09d6fb9146105bf578063cb128728146105d4578063cdc5598e146105e7578063ce7c6410146105fc578063d38ae12b1461061657600080fd5b8063a217fddf1161012b578063a217fddf14610543578063a4f276c71461054b578063a558b65c1461056b578063a95c4d6214610585578063b3679bda14610598578063b3cd4254146105a157600080fd5b806381e2403b146104d957806385f8f4be146104ec57806387e44935146104f557806391d148541461050857806397ff2f221461051b578063a09e06a11461053057600080fd5b80633baa6fca116102165780635c5b1f83116101cf5780635c5b1f83146104815780635c975abb146104a157806366805de5146104ac5780637656cb83146104b457806377292d5b146104c75780637b1a0838146104d057600080fd5b80633baa6fca146103df5780633d3e3763146103f25780633da1d412146104055780634219dc40146104255780634327a9031461044b5780634f93d1ad1461045e57600080fd5b8063248a9ca311610268578063248a9ca3146103525780632f2ff15d1461037557806330bba6c41461038857806332aff4d31461039157806334fa224b146103a457806336568abe146103cc57600080fd5b806301ffc9a7146102b0578063086425bc146102d85780631353ff75146102ed5780631649da6e146103045780631acbc823146103175780632013b4c414610320575b600080fd5b6102c36102be3660046127c0565b6106af565b60405190151581526020015b60405180910390f35b6102eb6102e63660046128ef565b6106e6565b005b6102f660095481565b6040519081526020016102cf565b6102eb610312366004612958565b6107e0565b6102f660125481565b600f5461033a90600160c01b90046001600160401b031681565b6040516001600160401b0390911681526020016102cf565b6102f6610360366004612a0f565b60009081526003602052604090206001015490565b6102eb610383366004612a28565b610c6e565b6102f6600c5481565b6102eb61039f366004612a54565b610c93565b600d546103b990600160601b900461ffff1681565b60405161ffff90911681526020016102cf565b6102eb6103da366004612a28565b610e68565b600f5461033a906001600160401b031681565b6102eb610400366004612a86565b610ee2565b6102f6610413366004612a54565b60146020526000908152604090205481565b60045461043e906201000090046001600160a01b031681565b6040516102cf9190612ab0565b6102eb610459366004612ad2565b611093565b60075460085461046c919082565b604080519283526020830191909152016102cf565b6102f661048f366004612a54565b60156020526000908152604090205481565b60005460ff166102c3565b6102eb6111c8565b6102eb6104c2366004612a0f565b61129a565b6102f660105481565b6102f660115481565b6102eb6104e7366004612aef565b611396565b6102f6600b5481565b60055461043e906001600160a01b031681565b6102c3610516366004612a28565b6114b3565b600d546103b990600160501b900461ffff1681565b6102eb61053e366004612aef565b6114de565b6102f6600081565b6102f6610559366004612a54565b60136020526000908152604090205481565b600f5461033a90600160801b90046001600160401b031681565b60065461043e906001600160a01b031681565b6102f6600e5481565b6103b961271081565b600d546103b990600160401b900461ffff1681565b6102f6600080516020612fc583398151915281565b600d5461033a906001600160401b031681565b600d546103b990600160701b900461ffff1681565b600f5461033a90600160401b90046001600160401b031681565b6102eb610624366004612a54565b611633565b6102eb610637366004612a28565b6117e3565b6102eb61064a366004612a0f565b611808565b600d546102c390600160801b900460ff1681565b6102f67f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0181565b6102f660025481565b6102eb6106a1366004612bc2565b6118cf565b6102f6600a5481565b60006001600160e01b03198216637965db0b60e01b14806106e057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106ee611973565b6002600154141561071a5760405162461bcd60e51b815260040161071190612c06565b60405180910390fd5b60026001556107276119bb565b6107ad57600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b90041642335b6040516364daa85360e11b81526001600160401b039687166004820152948616602486015292851660448501529316606483015260848201929092526001600160a01b0390911660a482015260c401610711565b6107b733836119ef565b6107c18282611aac565b6107ce8383836000611ad6565b6107d782611b5c565b50506001805550565b600454610100900460ff16158080156108005750600454600160ff909116105b8061081a5750303b15801561081a575060045460ff166001145b61087d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610711565b6004805460ff1916600117905580156108a0576004805461ff0019166101001790555b6004805462010000330262010000600160b01b03199091161790558251602080850151600580546001600160a01b039485166001600160a01b0319918216179091556006805492909416911617909155825190830151600b91909155600c556040820151606083015161091282611b76565b600d805467ffffffffffffffff19166001600160401b039290921691909117905561093c81611be2565b600d805461ffff92909216600160401b0261ffff60401b199092169190911790555050608082015161096d81611be2565b600d805461ffff92909216600160501b0261ffff60501b199092169190911790555060a082015160c083015160e08401516109a783611be2565b600d600c6101000a81548161ffff021916908361ffff1602179055506109cc82611be2565b600d805461ffff92909216600160701b0261ffff60701b19909216919091179055600e8190556127106109ff8483612c69565b610a099190612c88565b6009556127108083610a1b8683612caa565b610a259085612c69565b610a2f9190612c69565b610a399190612c88565b610a439190612c88565b600a55505050610100820151610120830151610140840151610a6483611b76565b600f805467ffffffffffffffff19166001600160401b0392909216919091179055610a97610a928385612cc1565b611b76565b600f8054600160401b600160c01b0319811667ffffffffffffffff60801b196001600160401b03948516600160401b9081029182169290921767ffffffffffffffff60401b1990931617048316600160801b9081029190911791829055610b0692610a92928592900416612cc1565b600f80546001600160c01b038116600160c01b6001600160401b03948516810291821793849055610160808b0151610180808d015160078390556008819055600554600654600b54600c54600d54600e54604080516001600160a01b039788168152969095166020870152938501979097526060840194909452608083015260a0820192909252600160501b840461ffff90811660c0830152600160601b8504811660e0830152600160701b90940490931661010084015261012083015293871694871694909417610140850152600160401b8504861690840152909204909216908201527fff88ccb1dfbd918de09a2534be0afa5c86dde65c8c50d601b6d8e6a4de4bf60893506101a0019150610c1b9050565b60405180910390a18015610c69576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600082815260036020526040902060010154610c8981611c45565b610c698383611c4f565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b8152600401610cc79190612ab0565b602060405180830381865afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190612cd9565b610d2557604051637bfa4b9f60e01b815260040160405180910390fd5b600554610d3a906001600160a01b0316611cd5565b610d4381611cd5565b60005460ff16151560011480610d6a5750600f54600160c01b90046001600160401b031642115b15610e4c576005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610da0903090600401612ab0565b602060405180830381865afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612cf6565b90508015610e4857600554610e00906001600160a01b03168383611cfc565b6005546040517fb475b33e23c517ab04a59359c4593620c1fafb083636f450b501cfdc5fa7c1d191610e3f9185916001600160a01b0316908590612d0f565b60405180910390a15b5050565b6040516320f0ba3d60e21b815260040160405180910390fd5b50565b6001600160a01b0381163314610ed85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610711565b610e488282611d52565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b8152600401610f169190612ab0565b602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190612cd9565b610f7457604051637bfa4b9f60e01b815260040160405180910390fd5b806001600160401b0316826001600160401b0316101580610fa45750600f546001600160401b0390811690831611155b15610fef57600f54604051633d9877ad60e11b8152610711916001600160401b0380821692600160401b8304821692600160801b8104831692600160c01b9091041690600401612d33565b600f8054600160401b600160c01b031916600160401b6001600160401b0385811682810267ffffffffffffffff60801b191693909317600160801b938402176001600160c01b038116600160c01b8784168102918217968790556040517feedf049ba2a9e400be9e2a2d93b7e6023411a5c4fd77fe703bc75c2fea691fc397610e3f9794861693861693909317958304851694938304841693919092041690612d33565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016110c79190612ab0565b602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111089190612cd9565b61112557604051637bfa4b9f60e01b815260040160405180910390fd5b60055461113a906001600160a01b0316611cd5565b600d5460ff600160801b9091041615158115151415611170576040516338a6518f60e01b81528115156004820152602401610711565b600d8054821515600160801b0260ff60801b199091161790556040517fccb5bfd8e614719f5c62e9ee750481317991fd8133670aa1079f1c51d255c6de906111bd90831515815260200190565b60405180910390a150565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016111fc9190612ab0565b602060405180830381865afa158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190612cd9565b61125a57604051637bfa4b9f60e01b815260040160405180910390fd5b611262611db9565b6040516000815230907ff0d6825187080fb76e877d6e8990b1e2a60ed4f2d8ccf610e889659854577e749060200160405180910390a2565b6005546112af906001600160a01b0316611cd5565b600d54600160801b900460ff166112d957604051637e5634e560e11b815260040160405180910390fd5b600d546001600160401b031642101561130557604051634f10668960e01b815260040160405180910390fd5b336000908152601560205260409020548082111561133657604051631ee1609d60e11b815260040160405180910390fd5b3360009081526015602052604081208054849290611355908490612caa565b9091555061136590503383611e0d565b7f5db24f7604bd2c572f0b463cd8df4de756789f84ced94dafd7f83a4bcb6716403383604051610e3f929190612d5e565b61139e611973565b600260015414156113c15760405162461bcd60e51b815260040161071190612c06565b6002600155600080806113d384611e24565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf9061141590339030908c908b9088908b908b90600401612d77565b600060405180830381600087803b15801561142f57600080fd5b505af1158015611443573d6000803e3d6000fd5b5050505061144f6119bb565b61148557600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610759565b61148f8787611aac565b61149c8888886000611ad6565b6114a587611b5c565b505060018055505050505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6114e6611973565b600260015414156115095760405162461bcd60e51b815260040161071190612c06565b60026001556000808061151b84611e24565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf9061155d90339030908b908b9088908b908b90600401612d77565b600060405180830381600087803b15801561157757600080fd5b505af115801561158b573d6000803e3d6000fd5b5050505061159f6115993390565b886119ef565b6115a76119bb565b156115e1576115b587611e50565b600d546115d39089908990600090600160501b900461ffff16611ad6565b6115dc87611e8d565b6114a5565b6115e9611e9f565b15611601576115f787611ed8565b6115dc8888611f15565b600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610759565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016116679190612ab0565b602060405180830381865afa158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a89190612cd9565b6116c557604051637bfa4b9f60e01b815260040160405180910390fd5b6116ce81611cd5565b60005460ff161515600114806116f55750600f54600160c01b90046001600160401b031642115b156117ca576006546040516370a0823160e01b81526000916001600160a01b0316906370a082319061172b903090600401612ab0565b602060405180830381865afa158015611748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176c9190612cf6565b90508015610e485760065461178b906001600160a01b03168383611cfc565b6006546040517fd7be39376e98ef778d32829f2b7f11d5108fcefb6b518dcecf6b21859865fd4f91610e3f9185916001600160a01b0316908590612d0f565b604051633586a6e960e11b815260040160405180910390fd5b6000828152600360205260409020600101546117fe81611c45565b610c698383611d52565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b815260040161183c9190612ab0565b602060405180830381865afa158015611859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187d9190612cd9565b61189a57604051637bfa4b9f60e01b815260040160405180910390fd5b60028190556040518181527fc8d52687b85ab11e6859cb0b390a9e926e1b348d9796e084f88f88420c176fc6906020016111bd565b6118d7611973565b600260015414156118fa5760405162461bcd60e51b815260040161071190612c06565b600260015561190933826119ef565b6119116119bb565b1561194b5761191f81611e50565b600d5461193d9083908390600090600160501b900461ffff16611ad6565b61194681611e8d565b61196b565b611953611e9f565b156116015761196181611ed8565b6119468282611f15565b505060018055565b60005460ff16156119b95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610711565b565b600f546000906001600160401b0316421180156119ea5750600f54600160401b90046001600160401b03164211155b905090565b600654604051636eb1769f60e11b81526001600160a01b038481166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a649190612cf6565b905081811015610c69576006546040516304fee01560e31b81526001600160a01b03808616600483015290911660248201526044810182905260648101839052608401610711565b611ab582611f81565b80821115610e4857604051632b37c00360e11b815260040160405180910390fd5b611af433600b54600080516020612fc5833981519152908588611f9f565b15611b0b57611b063384836001612008565b611b56565b611b2933600c54600080516020612fc5833981519152908588611f9f565b15611b3b57611b063384836000612008565b33604051632e4f414f60e01b81526004016107119190612ab0565b50505050565b8060106000828254611b6e9190612cc1565b909155505050565b60006001600160401b03821115611bde5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610711565b5090565b600061ffff821115611bde5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b6064820152608401610711565b610e6581336121b4565b611c5982826114b3565b610e485760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c913390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b038116610e655760405163d92e233d60e01b815260040160405180910390fd5b610c698363a9059cbb60e01b8484604051602401611d1b929190612d5e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612218565b611d5c82826114b3565b15610e485760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611dc1611973565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611df63390565b604051611e039190612ab0565b60405180910390a1565b600554610e48906001600160a01b03168383611cfc565b6000806000611e32846122ea565b50505060208101516040820151606090920151909260009190911a90565b611e5981611f81565b600a5481601154611e6a9190612cc1565b1115610e655733816040516330b052c360e01b8152600401610711929190612d5e565b8060116000828254611b6e9190612cc1565b600f54600090600160801b90046001600160401b0316421180156119ea575050600f54600160c01b90046001600160401b031642111590565b611ee181611f81565b600e5481601254611ef29190612cc1565b1115610e6557338160405163b17009d360e01b8152600401610711929190612d5e565b611f4633600b547f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0190600086611f9f565b15611f6657610e4833600d548390600160501b900461ffff166001612008565b610e4833600d548390600160501b900461ffff166000612008565b80610e6557604051631f2a200560e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606087901b1660208201526034810185905260548101849052607481018390526000908190609401604051602081830303815290604052805190602001209050611ffd836002548361230c565b979650505050505050565b60018115151480156120355750600b5433600090815260136020526040902054612033908590612cc1565b115b15612057573383604051631087b52160e01b8152600401610711929190612d5e565b801580156120805750600c543360009081526013602052604090205461207e908590612cc1565b115b156120a25733836040516384e66cd160e01b8152600401610711929190612d5e565b60006120ae8484612324565b905080156120ce576006546120ce906001600160a01b031686308461234a565b6120d8858561236b565b6005546001600160a01b03161515806120f2575060075415155b1561215157600061210285612383565b600d549091506000906127109061212490600160401b900461ffff1684612c69565b61212e9190612c88565b9050600061213c8284612caa565b90506121498782846123ab565b50505061215d565b61215d846000806123ab565b6005546001600160a01b031630336001600160a01b03167fb56e31baf5ee91fd07834187784fb1cbdae3cb94b95610e2a8da75a624e71eaf876040516121a591815260200190565b60405180910390a45050505050565b6121be82826114b3565b610e48576121d6816001600160a01b03166014612433565b6121e1836020612433565b6040516020016121f2929190612de4565b60408051601f198184030181529082905262461bcd60e51b825261071191600401612e53565b600061226d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125ce9092919063ffffffff16565b805190915015610c69578080602001905181019061228b9190612cd9565b610c695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610711565b8051604114610e6557604051637141605d60e11b815260040160405180910390fd5b60008261231985846125e5565b1490505b9392505050565b600081612333575060006106e0565b6127106123408385612c69565b61231d9190612c88565b611b56846323b872dd60e01b858585604051602401611d1b93929190612d0f565b600654610e48906001600160a01b031683308461234a565b60085460009061239490600a612f6a565b6007546123a19084612c69565b6106e09190612c88565b82601260008282546123bd9190612cc1565b909155505033600090815260136020526040812080548592906123e1908490612cc1565b90915550503360009081526014602052604081208054849290612405908490612cc1565b90915550503360009081526015602052604081208054839290612429908490612cc1565b9091555050505050565b60606000612442836002612c69565b61244d906002612cc1565b6001600160401b03811115612464576124646127ea565b6040519080825280601f01601f19166020018201604052801561248e576020820181803683370190505b509050600360fc1b816000815181106124a9576124a9612c3d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124d8576124d8612c3d565b60200101906001600160f81b031916908160001a90535060006124fc846002612c69565b612507906001612cc1565b90505b600181111561257f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061253b5761253b612c3d565b1a60f81b82828151811061255157612551612c3d565b60200101906001600160f81b031916908160001a90535060049490941c9361257881612f76565b905061250a565b50831561231d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610711565b60606125dd8484600085612632565b949350505050565b600081815b845181101561262a576126168286838151811061260957612609612c3d565b6020026020010151612758565b91508061262281612f8d565b9150506125ea565b509392505050565b6060824710156126935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610711565b6001600160a01b0385163b6126ea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610711565b600080866001600160a01b031685876040516127069190612fa8565b60006040518083038185875af1925050503d8060008114612743576040519150601f19603f3d011682016040523d82523d6000602084013e612748565b606091505b5091509150611ffd828286612787565b600081831061277457600082815260208490526040902061231d565b600083815260208390526040902061231d565b6060831561279657508161231d565b8251156127a65782518084602001fd5b8160405162461bcd60e51b81526004016107119190612e53565b6000602082840312156127d257600080fd5b81356001600160e01b03198116811461231d57600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612822576128226127ea565b60405290565b6040516101a081016001600160401b0381118282101715612822576128226127ea565b604051601f8201601f191681016001600160401b0381118282101715612873576128736127ea565b604052919050565b600082601f83011261288c57600080fd5b813560206001600160401b038211156128a7576128a76127ea565b8160051b6128b682820161284b565b92835284810182019282810190878511156128d057600080fd5b83870192505b84831015611ffd578235825291830191908301906128d6565b60008060006060848603121561290457600080fd5b83356001600160401b0381111561291a57600080fd5b6129268682870161287b565b9660208601359650604090950135949350505050565b80356001600160a01b038116811461295357600080fd5b919050565b6000806101e080848603121561296d57600080fd5b84601f85011261297c57600080fd5b612984612800565b80604086018781111561299657600080fd5b865b818110156129b7576129a98161293c565b845260209384019301612998565b5081955087605f8801126129ca57600080fd5b6129d2612828565b938701939250829150878411156129e857600080fd5b5b83811015612a015780358352602092830192016129e9565b508093505050509250929050565b600060208284031215612a2157600080fd5b5035919050565b60008060408385031215612a3b57600080fd5b82359150612a4b6020840161293c565b90509250929050565b600060208284031215612a6657600080fd5b61231d8261293c565b80356001600160401b038116811461295357600080fd5b60008060408385031215612a9957600080fd5b612aa283612a6f565b9150612a4b60208401612a6f565b6001600160a01b0391909116815260200190565b8015158114610e6557600080fd5b600060208284031215612ae457600080fd5b813561231d81612ac4565b600080600080600060a08688031215612b0757600080fd5b85356001600160401b0380821115612b1e57600080fd5b612b2a89838a0161287b565b9650602091508188013595506040880135945060608801359350608088013581811115612b5657600080fd5b8801601f81018a13612b6757600080fd5b803582811115612b7957612b796127ea565b612b8b601f8201601f1916850161284b565b92508083528a84828401011115612ba157600080fd5b80848301858501376000848285010152505080925050509295509295909350565b60008060408385031215612bd557600080fd5b82356001600160401b03811115612beb57600080fd5b612bf78582860161287b565b95602094909401359450505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612c8357612c83612c53565b500290565b600082612ca557634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612cbc57612cbc612c53565b500390565b60008219821115612cd457612cd4612c53565b500190565b600060208284031215612ceb57600080fd5b815161231d81612ac4565b600060208284031215612d0857600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160401b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b83811015612dd3578181015183820152602001612dbb565b83811115611b565750506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612e16816017850160208801612db8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612e47816028840160208801612db8565b01602801949350505050565b6020815260008251806020840152612e72816040850160208701612db8565b601f01601f19169190910160400192915050565b600181815b80851115612ec1578160001904821115612ea757612ea7612c53565b80851615612eb457918102915b93841c9390800290612e8b565b509250929050565b600082612ed8575060016106e0565b81612ee5575060006106e0565b8160018114612efb5760028114612f0557612f21565b60019150506106e0565b60ff841115612f1657612f16612c53565b50506001821b6106e0565b5060208310610133831016604e8410600b8410161715612f44575081810a6106e0565b612f4e8383612e86565b8060001904821115612f6257612f62612c53565b029392505050565b600061231d8383612ec9565b600081612f8557612f85612c53565b506000190190565b6000600019821415612fa157612fa1612c53565b5060010190565b60008251612fba818460208701612db8565b919091019291505056feed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95a2646970667358221220a58214e07f5578d86aac42a94b74e0ab3e53161ab2ec47a96b982595dd3fcb2564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ab5760003560e01c806381e2403b11610172578063b4582276116100d9578063d547741f11610092578063d547741f14610629578063dab5f3401461063c578063e5fa15fa1461064f578063e995914914610663578063ebf0c7171461068a578063efaad0ec14610693578063f1379939146106a657600080fd5b8063b4582276146105aa578063c09d6fb9146105bf578063cb128728146105d4578063cdc5598e146105e7578063ce7c6410146105fc578063d38ae12b1461061657600080fd5b8063a217fddf1161012b578063a217fddf14610543578063a4f276c71461054b578063a558b65c1461056b578063a95c4d6214610585578063b3679bda14610598578063b3cd4254146105a157600080fd5b806381e2403b146104d957806385f8f4be146104ec57806387e44935146104f557806391d148541461050857806397ff2f221461051b578063a09e06a11461053057600080fd5b80633baa6fca116102165780635c5b1f83116101cf5780635c5b1f83146104815780635c975abb146104a157806366805de5146104ac5780637656cb83146104b457806377292d5b146104c75780637b1a0838146104d057600080fd5b80633baa6fca146103df5780633d3e3763146103f25780633da1d412146104055780634219dc40146104255780634327a9031461044b5780634f93d1ad1461045e57600080fd5b8063248a9ca311610268578063248a9ca3146103525780632f2ff15d1461037557806330bba6c41461038857806332aff4d31461039157806334fa224b146103a457806336568abe146103cc57600080fd5b806301ffc9a7146102b0578063086425bc146102d85780631353ff75146102ed5780631649da6e146103045780631acbc823146103175780632013b4c414610320575b600080fd5b6102c36102be3660046127c0565b6106af565b60405190151581526020015b60405180910390f35b6102eb6102e63660046128ef565b6106e6565b005b6102f660095481565b6040519081526020016102cf565b6102eb610312366004612958565b6107e0565b6102f660125481565b600f5461033a90600160c01b90046001600160401b031681565b6040516001600160401b0390911681526020016102cf565b6102f6610360366004612a0f565b60009081526003602052604090206001015490565b6102eb610383366004612a28565b610c6e565b6102f6600c5481565b6102eb61039f366004612a54565b610c93565b600d546103b990600160601b900461ffff1681565b60405161ffff90911681526020016102cf565b6102eb6103da366004612a28565b610e68565b600f5461033a906001600160401b031681565b6102eb610400366004612a86565b610ee2565b6102f6610413366004612a54565b60146020526000908152604090205481565b60045461043e906201000090046001600160a01b031681565b6040516102cf9190612ab0565b6102eb610459366004612ad2565b611093565b60075460085461046c919082565b604080519283526020830191909152016102cf565b6102f661048f366004612a54565b60156020526000908152604090205481565b60005460ff166102c3565b6102eb6111c8565b6102eb6104c2366004612a0f565b61129a565b6102f660105481565b6102f660115481565b6102eb6104e7366004612aef565b611396565b6102f6600b5481565b60055461043e906001600160a01b031681565b6102c3610516366004612a28565b6114b3565b600d546103b990600160501b900461ffff1681565b6102eb61053e366004612aef565b6114de565b6102f6600081565b6102f6610559366004612a54565b60136020526000908152604090205481565b600f5461033a90600160801b90046001600160401b031681565b60065461043e906001600160a01b031681565b6102f6600e5481565b6103b961271081565b600d546103b990600160401b900461ffff1681565b6102f6600080516020612fc583398151915281565b600d5461033a906001600160401b031681565b600d546103b990600160701b900461ffff1681565b600f5461033a90600160401b90046001600160401b031681565b6102eb610624366004612a54565b611633565b6102eb610637366004612a28565b6117e3565b6102eb61064a366004612a0f565b611808565b600d546102c390600160801b900460ff1681565b6102f67f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0181565b6102f660025481565b6102eb6106a1366004612bc2565b6118cf565b6102f6600a5481565b60006001600160e01b03198216637965db0b60e01b14806106e057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106ee611973565b6002600154141561071a5760405162461bcd60e51b815260040161071190612c06565b60405180910390fd5b60026001556107276119bb565b6107ad57600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b90041642335b6040516364daa85360e11b81526001600160401b039687166004820152948616602486015292851660448501529316606483015260848201929092526001600160a01b0390911660a482015260c401610711565b6107b733836119ef565b6107c18282611aac565b6107ce8383836000611ad6565b6107d782611b5c565b50506001805550565b600454610100900460ff16158080156108005750600454600160ff909116105b8061081a5750303b15801561081a575060045460ff166001145b61087d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610711565b6004805460ff1916600117905580156108a0576004805461ff0019166101001790555b6004805462010000330262010000600160b01b03199091161790558251602080850151600580546001600160a01b039485166001600160a01b0319918216179091556006805492909416911617909155825190830151600b91909155600c556040820151606083015161091282611b76565b600d805467ffffffffffffffff19166001600160401b039290921691909117905561093c81611be2565b600d805461ffff92909216600160401b0261ffff60401b199092169190911790555050608082015161096d81611be2565b600d805461ffff92909216600160501b0261ffff60501b199092169190911790555060a082015160c083015160e08401516109a783611be2565b600d600c6101000a81548161ffff021916908361ffff1602179055506109cc82611be2565b600d805461ffff92909216600160701b0261ffff60701b19909216919091179055600e8190556127106109ff8483612c69565b610a099190612c88565b6009556127108083610a1b8683612caa565b610a259085612c69565b610a2f9190612c69565b610a399190612c88565b610a439190612c88565b600a55505050610100820151610120830151610140840151610a6483611b76565b600f805467ffffffffffffffff19166001600160401b0392909216919091179055610a97610a928385612cc1565b611b76565b600f8054600160401b600160c01b0319811667ffffffffffffffff60801b196001600160401b03948516600160401b9081029182169290921767ffffffffffffffff60401b1990931617048316600160801b9081029190911791829055610b0692610a92928592900416612cc1565b600f80546001600160c01b038116600160c01b6001600160401b03948516810291821793849055610160808b0151610180808d015160078390556008819055600554600654600b54600c54600d54600e54604080516001600160a01b039788168152969095166020870152938501979097526060840194909452608083015260a0820192909252600160501b840461ffff90811660c0830152600160601b8504811660e0830152600160701b90940490931661010084015261012083015293871694871694909417610140850152600160401b8504861690840152909204909216908201527fff88ccb1dfbd918de09a2534be0afa5c86dde65c8c50d601b6d8e6a4de4bf60893506101a0019150610c1b9050565b60405180910390a18015610c69576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600082815260036020526040902060010154610c8981611c45565b610c698383611c4f565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b8152600401610cc79190612ab0565b602060405180830381865afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190612cd9565b610d2557604051637bfa4b9f60e01b815260040160405180910390fd5b600554610d3a906001600160a01b0316611cd5565b610d4381611cd5565b60005460ff16151560011480610d6a5750600f54600160c01b90046001600160401b031642115b15610e4c576005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610da0903090600401612ab0565b602060405180830381865afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612cf6565b90508015610e4857600554610e00906001600160a01b03168383611cfc565b6005546040517fb475b33e23c517ab04a59359c4593620c1fafb083636f450b501cfdc5fa7c1d191610e3f9185916001600160a01b0316908590612d0f565b60405180910390a15b5050565b6040516320f0ba3d60e21b815260040160405180910390fd5b50565b6001600160a01b0381163314610ed85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610711565b610e488282611d52565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b8152600401610f169190612ab0565b602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190612cd9565b610f7457604051637bfa4b9f60e01b815260040160405180910390fd5b806001600160401b0316826001600160401b0316101580610fa45750600f546001600160401b0390811690831611155b15610fef57600f54604051633d9877ad60e11b8152610711916001600160401b0380821692600160401b8304821692600160801b8104831692600160c01b9091041690600401612d33565b600f8054600160401b600160c01b031916600160401b6001600160401b0385811682810267ffffffffffffffff60801b191693909317600160801b938402176001600160c01b038116600160c01b8784168102918217968790556040517feedf049ba2a9e400be9e2a2d93b7e6023411a5c4fd77fe703bc75c2fea691fc397610e3f9794861693861693909317958304851694938304841693919092041690612d33565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016110c79190612ab0565b602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111089190612cd9565b61112557604051637bfa4b9f60e01b815260040160405180910390fd5b60055461113a906001600160a01b0316611cd5565b600d5460ff600160801b9091041615158115151415611170576040516338a6518f60e01b81528115156004820152602401610711565b600d8054821515600160801b0260ff60801b199091161790556040517fccb5bfd8e614719f5c62e9ee750481317991fd8133670aa1079f1c51d255c6de906111bd90831515815260200190565b60405180910390a150565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016111fc9190612ab0565b602060405180830381865afa158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190612cd9565b61125a57604051637bfa4b9f60e01b815260040160405180910390fd5b611262611db9565b6040516000815230907ff0d6825187080fb76e877d6e8990b1e2a60ed4f2d8ccf610e889659854577e749060200160405180910390a2565b6005546112af906001600160a01b0316611cd5565b600d54600160801b900460ff166112d957604051637e5634e560e11b815260040160405180910390fd5b600d546001600160401b031642101561130557604051634f10668960e01b815260040160405180910390fd5b336000908152601560205260409020548082111561133657604051631ee1609d60e11b815260040160405180910390fd5b3360009081526015602052604081208054849290611355908490612caa565b9091555061136590503383611e0d565b7f5db24f7604bd2c572f0b463cd8df4de756789f84ced94dafd7f83a4bcb6716403383604051610e3f929190612d5e565b61139e611973565b600260015414156113c15760405162461bcd60e51b815260040161071190612c06565b6002600155600080806113d384611e24565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf9061141590339030908c908b9088908b908b90600401612d77565b600060405180830381600087803b15801561142f57600080fd5b505af1158015611443573d6000803e3d6000fd5b5050505061144f6119bb565b61148557600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610759565b61148f8787611aac565b61149c8888886000611ad6565b6114a587611b5c565b505060018055505050505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6114e6611973565b600260015414156115095760405162461bcd60e51b815260040161071190612c06565b60026001556000808061151b84611e24565b60065460405163d505accf60e01b815293965091945092506001600160a01b03169063d505accf9061155d90339030908b908b9088908b908b90600401612d77565b600060405180830381600087803b15801561157757600080fd5b505af115801561158b573d6000803e3d6000fd5b5050505061159f6115993390565b886119ef565b6115a76119bb565b156115e1576115b587611e50565b600d546115d39089908990600090600160501b900461ffff16611ad6565b6115dc87611e8d565b6114a5565b6115e9611e9f565b15611601576115f787611ed8565b6115dc8888611f15565b600f546001600160401b0380821691600160401b8104821691600160801b8204811691600160c01b9004164233610759565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b81526004016116679190612ab0565b602060405180830381865afa158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a89190612cd9565b6116c557604051637bfa4b9f60e01b815260040160405180910390fd5b6116ce81611cd5565b60005460ff161515600114806116f55750600f54600160c01b90046001600160401b031642115b156117ca576006546040516370a0823160e01b81526000916001600160a01b0316906370a082319061172b903090600401612ab0565b602060405180830381865afa158015611748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176c9190612cf6565b90508015610e485760065461178b906001600160a01b03168383611cfc565b6006546040517fd7be39376e98ef778d32829f2b7f11d5108fcefb6b518dcecf6b21859865fd4f91610e3f9185916001600160a01b0316908590612d0f565b604051633586a6e960e11b815260040160405180910390fd5b6000828152600360205260409020600101546117fe81611c45565b610c698383611d52565b6004546201000090046001600160a01b031663c395fcb3336040518263ffffffff1660e01b815260040161183c9190612ab0565b602060405180830381865afa158015611859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187d9190612cd9565b61189a57604051637bfa4b9f60e01b815260040160405180910390fd5b60028190556040518181527fc8d52687b85ab11e6859cb0b390a9e926e1b348d9796e084f88f88420c176fc6906020016111bd565b6118d7611973565b600260015414156118fa5760405162461bcd60e51b815260040161071190612c06565b600260015561190933826119ef565b6119116119bb565b1561194b5761191f81611e50565b600d5461193d9083908390600090600160501b900461ffff16611ad6565b61194681611e8d565b61196b565b611953611e9f565b156116015761196181611ed8565b6119468282611f15565b505060018055565b60005460ff16156119b95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610711565b565b600f546000906001600160401b0316421180156119ea5750600f54600160401b90046001600160401b03164211155b905090565b600654604051636eb1769f60e11b81526001600160a01b038481166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a649190612cf6565b905081811015610c69576006546040516304fee01560e31b81526001600160a01b03808616600483015290911660248201526044810182905260648101839052608401610711565b611ab582611f81565b80821115610e4857604051632b37c00360e11b815260040160405180910390fd5b611af433600b54600080516020612fc5833981519152908588611f9f565b15611b0b57611b063384836001612008565b611b56565b611b2933600c54600080516020612fc5833981519152908588611f9f565b15611b3b57611b063384836000612008565b33604051632e4f414f60e01b81526004016107119190612ab0565b50505050565b8060106000828254611b6e9190612cc1565b909155505050565b60006001600160401b03821115611bde5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610711565b5090565b600061ffff821115611bde5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b6064820152608401610711565b610e6581336121b4565b611c5982826114b3565b610e485760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c913390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b038116610e655760405163d92e233d60e01b815260040160405180910390fd5b610c698363a9059cbb60e01b8484604051602401611d1b929190612d5e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612218565b611d5c82826114b3565b15610e485760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611dc1611973565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611df63390565b604051611e039190612ab0565b60405180910390a1565b600554610e48906001600160a01b03168383611cfc565b6000806000611e32846122ea565b50505060208101516040820151606090920151909260009190911a90565b611e5981611f81565b600a5481601154611e6a9190612cc1565b1115610e655733816040516330b052c360e01b8152600401610711929190612d5e565b8060116000828254611b6e9190612cc1565b600f54600090600160801b90046001600160401b0316421180156119ea575050600f54600160c01b90046001600160401b031642111590565b611ee181611f81565b600e5481601254611ef29190612cc1565b1115610e6557338160405163b17009d360e01b8152600401610711929190612d5e565b611f4633600b547f13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e0190600086611f9f565b15611f6657610e4833600d548390600160501b900461ffff166001612008565b610e4833600d548390600160501b900461ffff166000612008565b80610e6557604051631f2a200560e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606087901b1660208201526034810185905260548101849052607481018390526000908190609401604051602081830303815290604052805190602001209050611ffd836002548361230c565b979650505050505050565b60018115151480156120355750600b5433600090815260136020526040902054612033908590612cc1565b115b15612057573383604051631087b52160e01b8152600401610711929190612d5e565b801580156120805750600c543360009081526013602052604090205461207e908590612cc1565b115b156120a25733836040516384e66cd160e01b8152600401610711929190612d5e565b60006120ae8484612324565b905080156120ce576006546120ce906001600160a01b031686308461234a565b6120d8858561236b565b6005546001600160a01b03161515806120f2575060075415155b1561215157600061210285612383565b600d549091506000906127109061212490600160401b900461ffff1684612c69565b61212e9190612c88565b9050600061213c8284612caa565b90506121498782846123ab565b50505061215d565b61215d846000806123ab565b6005546001600160a01b031630336001600160a01b03167fb56e31baf5ee91fd07834187784fb1cbdae3cb94b95610e2a8da75a624e71eaf876040516121a591815260200190565b60405180910390a45050505050565b6121be82826114b3565b610e48576121d6816001600160a01b03166014612433565b6121e1836020612433565b6040516020016121f2929190612de4565b60408051601f198184030181529082905262461bcd60e51b825261071191600401612e53565b600061226d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125ce9092919063ffffffff16565b805190915015610c69578080602001905181019061228b9190612cd9565b610c695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610711565b8051604114610e6557604051637141605d60e11b815260040160405180910390fd5b60008261231985846125e5565b1490505b9392505050565b600081612333575060006106e0565b6127106123408385612c69565b61231d9190612c88565b611b56846323b872dd60e01b858585604051602401611d1b93929190612d0f565b600654610e48906001600160a01b031683308461234a565b60085460009061239490600a612f6a565b6007546123a19084612c69565b6106e09190612c88565b82601260008282546123bd9190612cc1565b909155505033600090815260136020526040812080548592906123e1908490612cc1565b90915550503360009081526014602052604081208054849290612405908490612cc1565b90915550503360009081526015602052604081208054839290612429908490612cc1565b9091555050505050565b60606000612442836002612c69565b61244d906002612cc1565b6001600160401b03811115612464576124646127ea565b6040519080825280601f01601f19166020018201604052801561248e576020820181803683370190505b509050600360fc1b816000815181106124a9576124a9612c3d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124d8576124d8612c3d565b60200101906001600160f81b031916908160001a90535060006124fc846002612c69565b612507906001612cc1565b90505b600181111561257f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061253b5761253b612c3d565b1a60f81b82828151811061255157612551612c3d565b60200101906001600160f81b031916908160001a90535060049490941c9361257881612f76565b905061250a565b50831561231d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610711565b60606125dd8484600085612632565b949350505050565b600081815b845181101561262a576126168286838151811061260957612609612c3d565b6020026020010151612758565b91508061262281612f8d565b9150506125ea565b509392505050565b6060824710156126935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610711565b6001600160a01b0385163b6126ea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610711565b600080866001600160a01b031685876040516127069190612fa8565b60006040518083038185875af1925050503d8060008114612743576040519150601f19603f3d011682016040523d82523d6000602084013e612748565b606091505b5091509150611ffd828286612787565b600081831061277457600082815260208490526040902061231d565b600083815260208390526040902061231d565b6060831561279657508161231d565b8251156127a65782518084602001fd5b8160405162461bcd60e51b81526004016107119190612e53565b6000602082840312156127d257600080fd5b81356001600160e01b03198116811461231d57600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612822576128226127ea565b60405290565b6040516101a081016001600160401b0381118282101715612822576128226127ea565b604051601f8201601f191681016001600160401b0381118282101715612873576128736127ea565b604052919050565b600082601f83011261288c57600080fd5b813560206001600160401b038211156128a7576128a76127ea565b8160051b6128b682820161284b565b92835284810182019282810190878511156128d057600080fd5b83870192505b84831015611ffd578235825291830191908301906128d6565b60008060006060848603121561290457600080fd5b83356001600160401b0381111561291a57600080fd5b6129268682870161287b565b9660208601359650604090950135949350505050565b80356001600160a01b038116811461295357600080fd5b919050565b6000806101e080848603121561296d57600080fd5b84601f85011261297c57600080fd5b612984612800565b80604086018781111561299657600080fd5b865b818110156129b7576129a98161293c565b845260209384019301612998565b5081955087605f8801126129ca57600080fd5b6129d2612828565b938701939250829150878411156129e857600080fd5b5b83811015612a015780358352602092830192016129e9565b508093505050509250929050565b600060208284031215612a2157600080fd5b5035919050565b60008060408385031215612a3b57600080fd5b82359150612a4b6020840161293c565b90509250929050565b600060208284031215612a6657600080fd5b61231d8261293c565b80356001600160401b038116811461295357600080fd5b60008060408385031215612a9957600080fd5b612aa283612a6f565b9150612a4b60208401612a6f565b6001600160a01b0391909116815260200190565b8015158114610e6557600080fd5b600060208284031215612ae457600080fd5b813561231d81612ac4565b600080600080600060a08688031215612b0757600080fd5b85356001600160401b0380821115612b1e57600080fd5b612b2a89838a0161287b565b9650602091508188013595506040880135945060608801359350608088013581811115612b5657600080fd5b8801601f81018a13612b6757600080fd5b803582811115612b7957612b796127ea565b612b8b601f8201601f1916850161284b565b92508083528a84828401011115612ba157600080fd5b80848301858501376000848285010152505080925050509295509295909350565b60008060408385031215612bd557600080fd5b82356001600160401b03811115612beb57600080fd5b612bf78582860161287b565b95602094909401359450505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612c8357612c83612c53565b500290565b600082612ca557634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612cbc57612cbc612c53565b500390565b60008219821115612cd457612cd4612c53565b500190565b600060208284031215612ceb57600080fd5b815161231d81612ac4565b600060208284031215612d0857600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160401b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b83811015612dd3578181015183820152602001612dbb565b83811115611b565750506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612e16816017850160208801612db8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612e47816028840160208801612db8565b01602801949350505050565b6020815260008251806020840152612e72816040850160208701612db8565b601f01601f19169190910160400192915050565b600181815b80851115612ec1578160001904821115612ea757612ea7612c53565b80851615612eb457918102915b93841c9390800290612e8b565b509250929050565b600082612ed8575060016106e0565b81612ee5575060006106e0565b8160018114612efb5760028114612f0557612f21565b60019150506106e0565b60ff841115612f1657612f16612c53565b50506001821b6106e0565b5060208310610133831016604e8410600b8410161715612f44575081810a6106e0565b612f4e8383612e86565b8060001904821115612f6257612f62612c53565b029392505050565b600061231d8383612ec9565b600081612f8557612f85612c53565b506000190190565b6000600019821415612fa157612fa1612c53565b5060010190565b60008251612fba818460208701612db8565b919091019291505056feed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95a2646970667358221220a58214e07f5578d86aac42a94b74e0ab3e53161ab2ec47a96b982595dd3fcb2564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9277,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9378,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5107,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "root",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 8766,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8761_storage)"
      },
      {
        "astId": 9113,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 9116,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3025,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "poolFactory",
        "offset": 2,
        "slot": "4",
        "type": "t_contract(IPoolFactory)5367"
      },
      {
        "astId": 3031,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "IDOToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)2372"
      },
      {
        "astId": 3034,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchaseToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)2372"
      },
      {
        "astId": 3037,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "offeredCurrency",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(OfferedCurrency)3016_storage"
      },
      {
        "astId": 3039,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForGalaxyPool",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3041,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForEarlyAccess",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3043,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForKYCUser",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3045,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "maxPurchaseAmountForNotKYCUser",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3047,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "TGEDate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint64"
      },
      {
        "astId": 3049,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "TGEPercentage",
        "offset": 8,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3051,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "participationFeePercentage",
        "offset": 10,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3053,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "galaxyPoolProportion",
        "offset": 12,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3055,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "earlyAccessProportion",
        "offset": 14,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3057,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "TGEClaimable",
        "offset": 16,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 3059,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "totalRaiseAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3061,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "whaleOpenTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3063,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "whaleCloseTime",
        "offset": 8,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3065,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "communityOpenTime",
        "offset": 16,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3067,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "communityCloseTime",
        "offset": 24,
        "slot": "15",
        "type": "t_uint64"
      },
      {
        "astId": 3069,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchasedAmountInGalaxyPool",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3071,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchasedAmountInEarlyAccess",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3073,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "purchasedAmount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3077,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "userPurchasedAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3081,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "userIDOAirdropAmount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3085,
        "contract": "contracts/IDOpool/Pool.sol:Pool",
        "label": "userIDOTGEAmount",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2372": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolFactory)5367": {
        "encoding": "inplace",
        "label": "contract IPoolFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8761_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8761_storage"
      },
      "t_struct(OfferedCurrency)3016_storage": {
        "encoding": "inplace",
        "label": "struct Pool.OfferedCurrency",
        "members": [
          {
            "astId": 3013,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3015,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "decimal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)8761_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 8758,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8760,
            "contract": "contracts/IDOpool/Pool.sol:Pool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}