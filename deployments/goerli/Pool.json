{
  "address": "0x377298bee37ddeAab8ac5944708b6A3e2c5c81bB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "IDOTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "name": "BuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permanentDeleteStatus",
          "type": "bool"
        }
      ],
      "name": "CancelPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "participationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimParticipationFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFee",
          "type": "uint256"
        }
      ],
      "name": "ClaimTokenFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20withDec",
          "name": "IDOToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        }
      ],
      "name": "FundIDOToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "UpdateRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whaleCloseTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityOpenTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "communityCloseTime",
          "type": "uint64"
        }
      ],
      "name": "UpdateTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPurchasedAmount",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NORMAL_USER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHALE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BasePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "buyTokenInCrowdfundingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPurchaseBaseOnAllocations",
          "type": "uint256"
        }
      ],
      "name": "buyTokenInGalaxyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_permanentDelete",
          "type": "bool"
        }
      ],
      "name": "cancelPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "claimFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "claimParticipationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "claimTokenFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityCloseTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityOpenTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crowdfundingParticipationFeePercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyAccessProportion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundClaimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20withDec",
          "name": "_IDOToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fundIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "galaxyParticipationFeePercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "galaxyPoolProportion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimableFundAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getIDOTokenAmountByOfferedCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ignitionFactory",
      "outputs": [
        {
          "internalType": "contract IIgnitionFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "addrs",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[18]",
          "name": "uints",
          "type": "uint256[18]"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFailBeforeTGEDate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForEarlyAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForGalaxyPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForKYCUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseAmountForNotKYCUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offeredCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "participationFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "participationFeeClaimedStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmountInEarlyAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmountInGalaxyPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setClaimableStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFeeClaimedStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFeePercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaiseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_newTGEDate",
          "type": "uint64"
        }
      ],
      "name": "updateTGEDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_newWhaleCloseTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_newCommunityCloseTime",
          "type": "uint64"
        }
      ],
      "name": "updateTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPurchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vesting",
      "outputs": [
        {
          "internalType": "contract IVesting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whaleCloseTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whaleOpenTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whalePurchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawPurchasedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawRedundantIDOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x388e63ba79c9b9cee0b80082937a3bbbe11f818847a8827f664371202a49ea52",
  "receipt": {
    "to": null,
    "from": "0x5E699389821850Ea35f5A1f99384DF3E1B4C118b",
    "contractAddress": "0x377298bee37ddeAab8ac5944708b6A3e2c5c81bB",
    "transactionIndex": 54,
    "gasUsed": "5138699",
    "logsBloom": "0x
    "blockHash": "0x9bcaf6f35d48712494cc7cb2958e765bf5d898972b9ffe1c4452ebcaf842d58c",
    "transactionHash": "0x388e63ba79c9b9cee0b80082937a3bbbe11f818847a8827f664371202a49ea52",
    "logs": [],
    "blockNumber": 9944957,
    "cumulativeGasUsed": "11530984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b3f02ead79515d4df3cfefaba7d06c24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"IDOTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permanentDeleteStatus\",\"type\":\"bool\"}],\"name\":\"CancelPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"participationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimParticipationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"}],\"name\":\"ClaimTokenFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20withDec\",\"name\":\"IDOToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"}],\"name\":\"FundIDOToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"UpdateRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whaleCloseTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityOpenTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"communityCloseTime\",\"type\":\"uint64\"}],\"name\":\"UpdateTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPurchasedAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NORMAL_USER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHALE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BasePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokenInCrowdfundingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchaseBaseOnAllocations\",\"type\":\"uint256\"}],\"name\":\"buyTokenInGalaxyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_permanentDelete\",\"type\":\"bool\"}],\"name\":\"cancelPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimParticipationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityCloseTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityOpenTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdfundingParticipationFeePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyAccessProportion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20withDec\",\"name\":\"_IDOToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fundIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galaxyParticipationFeePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galaxyPoolProportion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableFundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getIDOTokenAmountByOfferedCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ignitionFactory\",\"outputs\":[{\"internalType\":\"contract IIgnitionFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"addrs\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[18]\",\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFailBeforeTGEDate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForEarlyAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForGalaxyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForKYCUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseAmountForNotKYCUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offeredCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participationFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participationFeeClaimedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmountInEarlyAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmountInGalaxyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setClaimableStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFeeClaimedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFeePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaiseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newTGEDate\",\"type\":\"uint64\"}],\"name\":\"updateTGEDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newWhaleCloseTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newCommunityCloseTime\",\"type\":\"uint64\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleCloseTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleOpenTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whalePurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawPurchasedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawRedundantIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyTokenInCrowdfundingPool(bytes32[],uint256)\":{\"details\":\"Must be in time for crowdfunding pool and pool is not closed\",\"params\":{\"_purchaseAmount\":\"Purchase amount of investor\",\"proof\":\"Respective proof for a leaf, which is respective for investor in merkle tree\"}},\"buyTokenInGalaxyPool(bytes32[],uint256,uint256)\":{\"details\":\"Must be in time for whale and pool is not closed\",\"params\":{\"_maxPurchaseBaseOnAllocations\":\"Max purchase amount base on allocation of whale\",\"_purchaseAmount\":\"Purchase amount of investor\",\"proof\":\"Respective proof for a leaf, which is respective for investor in merkle tree\"}},\"cancelPool(bool)\":{\"details\":\"Only admin can call it\"},\"claimParticipationFee(address)\":{\"params\":{\"_beneficiary\":\"Address to receive\"}},\"claimTokenFee(address)\":{\"params\":{\"_beneficiary\":\"Address to receive\"}},\"getIDOTokenAmountByOfferedCurrency(uint256)\":{\"details\":\"Get IDO token amount base on amount of purchase token\",\"params\":{\"_amount\":\"Amount of purchase token\"},\"returns\":{\"_0\":\"Return amount of respective IDO token\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address[2],uint256[18],address)\":{\"params\":{\"addrs\":\"Array of address includes: - address of IDO token - Can be zero address - address of purchase token \",\"uints\":\"Array of pool information includes: - max purchase amount for KYC user, - max purchase amount for Not KYC user, - token fee percentage, - galaxy participation fee percentage, - crowdfunding participation fee percentage, - galaxy pool proportion, - early access proportion, - total raise amount, - whale open time, - whale duration, - community duration, - rate of IDO token (based on README formula), - decimal of IDO token (based on README formula, is different from decimals in contract of IDO token), - TGE date, - TGE percentage, - vesting cliff, - vesting frequency, - number of vesting release\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setRoot(bytes32)\":{\"details\":\"Only admin can call it\",\"params\":{\"_root\":\"Root of merkle tree\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateTime(uint64,uint64)\":{\"details\":\"Only admin can call it, galaxy pool must be closed before crowdfunding pool\",\"params\":{\"_newCommunityCloseTime\":\"New close time of crowdfunding pool\",\"_newWhaleCloseTime\":\"New close time of galaxy pool\"}},\"withdrawPurchasedAmount(address)\":{\"params\":{\"_beneficiary\":\"Address of receiver\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER_ROLE()\":{\"notice\":\"keccak256(\\\"OWNER_ROLE\\\")\"},\"buyTokenInCrowdfundingPool(bytes32[],uint256)\":{\"notice\":\"Investor buy token in crowdfunding pool\"},\"buyTokenInGalaxyPool(bytes32[],uint256,uint256)\":{\"notice\":\"Investor buy token in galaxy pool\"},\"cancelPool(bool)\":{\"notice\":\"Cancel pool: cancel project, nobody can buy token\"},\"claimParticipationFee(address)\":{\"notice\":\"System's admin participation token fee only when project is success after lockup time\"},\"claimTokenFee(address)\":{\"notice\":\"System's admin receive token fee only when project is success after lockup time\"},\"initialize(address[2],uint256[18],address)\":{\"notice\":\"Initialize a pool with its information\"},\"setRoot(bytes32)\":{\"notice\":\"Set merkle tree root after snapshoting information of investor\"},\"updateTime(uint64,uint64)\":{\"notice\":\"Update time for galaxy pool and crowdfunding pool\"},\"withdrawPurchasedAmount(address)\":{\"notice\":\"When project is fail (cancelled by admin or not be funded enough IDO token)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"contracts/core/BasePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\ncontract BasePausable is\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /// @notice keccak256(\\\"OWNER_ROLE\\\")\\n    bytes32 public constant OWNER_ROLE =\\n        0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e;\\n\\n    modifier onlyOwner() {\\n        require(isOwner(_msgSender()), Errors.CALLER_NOT_OWNER);\\n        _;\\n    }\\n\\n    function __BasePausable__init(address owner) public onlyInitializing {\\n        require(owner != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n\\n        _grantRole(OWNER_ROLE, owner);\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    }\\n\\n    function isOwner(address sender) public view returns (bool) {\\n        return hasRole(OWNER_ROLE, sender);\\n    }\\n}\\n\",\"keccak256\":\"0xa48cf798423aa339687de72ba2c17fda9cda0d4e4d47e84e642adab664eb4dd3\",\"license\":\"MIT\"},\"contracts/core/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"./PoolStorage.sol\\\";\\nimport \\\"./BasePausable.sol\\\";\\nimport \\\"../extensions/IgnitionList.sol\\\";\\nimport \\\"../logics/PoolLogic.sol\\\";\\nimport \\\"../logics/VestingLogic.sol\\\";\\n\\ncontract Pool is IgnitionList, IPool, PoolStorage, BasePausable, EIP712Upgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20withDec;\\n    using SafeCast for uint;\\n\\n    // ============================== EVENT ==============================\\n\\n    event UpdateRoot(bytes32 root);\\n\\n    event CancelPool(address indexed pool, bool permanentDeleteStatus);\\n\\n    event BuyToken(\\n        address indexed buyer,\\n        address indexed pool,\\n        uint purchaseAmount,\\n        uint IDOTokenAmount,\\n        uint8 poolType\\n    );\\n\\n    event UpdateTime(\\n        uint64 whaleOpenTime,\\n        uint64 whaleCloseTime,\\n        uint64 communityOpenTime,\\n        uint64 communityCloseTime\\n    );\\n\\n    event FundIDOToken(IERC20withDec IDOToken, uint fundAmount);\\n\\n    event ClaimTokenFee(address beneficiary, uint tokenFee);\\n\\n    event ClaimParticipationFee(\\n        address beneficiary,\\n        uint participationFeeAmount\\n    );\\n\\n    event WithdrawPurchasedAmount(\\n        address sender,\\n        address beneficiary,\\n        uint principalAmount\\n    );\\n\\n    event ClaimFund(address beneficiary, uint claimableAmount);\\n\\n    // ============================== MODIFIER ==============================\\n\\n    /**\\n     * @dev Check whether or not sender of transaction has admin role\\n     */\\n    modifier onlyAdmin() {\\n        require(ignitionFactory.isOwner(_msgSender()), Errors.CALLER_NOT_ADMIN);\\n        _;\\n    }\\n\\n    modifier onlyFunded() {\\n        require(vesting.isFunded(), Errors.NOT_FUNDED);\\n        _;\\n    }\\n\\n    modifier beforeTGEDate() {\\n        (uint64 _TGEDate, , , , ) = vesting.getVestingInfo();\\n        require(\\n            block.timestamp < _TGEDate,\\n            Errors.NOT_ALLOWED_TO_DO_AFTER_TGE_DATE\\n        );\\n        _;\\n    }\\n\\n    modifier afterLockupTime() {\\n        (uint64 _TGEDate, , , , ) = vesting.getVestingInfo();\\n        require(\\n            block.timestamp >= (ignitionFactory.getLockupDuration() + _TGEDate),\\n            Errors.NOT_ALLOWED_TO_TRANSFER_BEFORE_LOCKUP_TIME\\n        );\\n        _;\\n    }\\n\\n    modifier notEmergencyCancelled() {\\n        require(\\n            !vesting.isEmergencyCancelled(),\\n            Errors.NOT_ALLOWED_TO_DO_AFTER_EMERGENCY_CANCELLED\\n        );\\n        _;\\n    }\\n\\n    // ============================== EXTERNAL FUNCTION ==============================\\n\\n    /**\\n     * @notice Initialize a pool with its information\\n     * @param addrs Array of address includes:\\n     * - address of IDO token - Can be zero address\\n     * - address of purchase token \\n     * @param uints Array of pool information includes:\\n     * - max purchase amount for KYC user,\\n     * - max purchase amount for Not KYC user,\\n     * - token fee percentage,\\n     * - galaxy participation fee percentage,\\n     * - crowdfunding participation fee percentage,\\n     * - galaxy pool proportion,\\n     * - early access proportion,\\n     * - total raise amount,\\n     * - whale open time,\\n     * - whale duration,\\n     * - community duration,\\n     * - rate of IDO token (based on README formula),\\n     * - decimal of IDO token (based on README formula, is different from decimals in contract of IDO token),\\n     * - TGE date,\\n     * - TGE percentage,\\n     * - vesting cliff,\\n     * - vesting frequency,\\n     * - number of vesting release\\n     */\\n    function initialize(\\n        address[2] calldata addrs,\\n        uint[18] calldata uints,\\n        address owner\\n    ) external initializer {\\n        // Validate zero address. Make sure: must be an admin exist\\n        PoolLogic.validAddress(owner);\\n        \\n        __EIP712_init(name, version);\\n        __BasePausable__init(owner);\\n        PoolLogic.verifyPoolInfo(addrs, uints);\\n        {\\n            ignitionFactory = IIgnitionFactory(_msgSender());\\n        }\\n\\n        _createAndSetVesting(\\n            addrs[0],\\n            uints[13],\\n            uints[14],\\n            uints[15],\\n            uints[16],\\n            uints[17]\\n        );\\n        {\\n            PoolLogic.validAddress(addrs[1]);\\n            purchaseToken = IERC20(addrs[1]);\\n        }\\n        {\\n            maxPurchaseAmountForKYCUser = uints[0];\\n            maxPurchaseAmountForNotKYCUser = uints[1];\\n            require(maxPurchaseAmountForKYCUser > maxPurchaseAmountForNotKYCUser, Errors.MAX_PURCHASE_FOR_KYC_USER_NOT_VALID);\\n        }\\n        {\\n            tokenFeePercentage = SafeCast.toUint16(uints[2]);\\n            galaxyParticipationFeePercentage = SafeCast.toUint16(uints[3]);\\n            crowdfundingParticipationFeePercentage = SafeCast.toUint16(\\n                uints[4]\\n            );\\n            require(\\n                galaxyParticipationFeePercentage >= ignitionFactory.getMinGalaxyParticipationFeePercentage() &&\\n                galaxyParticipationFeePercentage <= ignitionFactory.getMaxGalaxyParticipationFeePercentage(),\\n                Errors.GALAXY_PARTICIPATION_FEE_PERCENTAGE_NOT_IN_THE_RANGE\\n            );\\n\\n            require(\\n                crowdfundingParticipationFeePercentage >= ignitionFactory.getMinCrowdfundingParticipationFeePercentage() &&\\n                crowdfundingParticipationFeePercentage <= ignitionFactory.getMaxCrowdfundingParticipationFeePercentage(),\\n                Errors.CROWN_FUNDING_PARTICIPATION_FEE_PERCENTAGE_NOT_IN_THE_RANGE\\n            );\\n        }\\n        {\\n            galaxyPoolProportion = SafeCast.toUint16(uints[5]);\\n            earlyAccessProportion = SafeCast.toUint16(uints[6]);\\n            totalRaiseAmount = uints[7];\\n\\n            maxPurchaseAmountForGalaxyPool =\\n                (totalRaiseAmount * galaxyPoolProportion) /\\n                PERCENTAGE_DENOMINATOR;\\n            maxPurchaseAmountForEarlyAccess =\\n                (totalRaiseAmount * (PERCENTAGE_DENOMINATOR - galaxyPoolProportion) * earlyAccessProportion) /\\n                PERCENTAGE_DENOMINATOR /\\n                PERCENTAGE_DENOMINATOR;\\n        }\\n        {\\n            whaleOpenTime = SafeCast.toUint64(uints[8]);\\n            communityOpenTime = whaleCloseTime = SafeCast.toUint64(\\n                uints[8] + uints[9]\\n            );\\n            communityCloseTime = SafeCast.toUint64(\\n                communityOpenTime + uints[10]\\n            );\\n        }\\n        {\\n            offeredCurrency.rate = uints[11];\\n            offeredCurrency.decimal = uints[12];\\n        }\\n    }\\n\\n    /**\\n     * @notice Set merkle tree root after snapshoting information of investor\\n     * @dev Only admin can call it\\n     * @param _root Root of merkle tree\\n     */\\n    function setRoot(bytes32 _root) external onlyAdmin {\\n        root = _root;\\n        emit UpdateRoot(root);\\n    }\\n\\n    /**\\n     * @notice Cancel pool: cancel project, nobody can buy token\\n     * @dev Only admin can call it\\n     */\\n    function cancelPool(bool _permanentDelete) external onlyAdmin {\\n        (uint64 _TGEDate, , , , ) = vesting.getVestingInfo();\\n        if (block.timestamp >= _TGEDate) {\\n            require(\\n                block.timestamp <=\\n                    (ignitionFactory.getLockupDuration() + _TGEDate),\\n                Errors.NOT_ALLOWED_TO_CANCEL_AFTER_LOCKUP_TIME\\n            );\\n            vesting.setEmergencyCancelled(true);\\n        }\\n        // This should be marked as cancel (paused === cancel)\\n        _pause();\\n        vesting.setClaimableStatus(false);\\n        emit CancelPool(address(this), _permanentDelete);\\n    }\\n\\n    /**\\n     * @notice Update time for galaxy pool and crowdfunding pool\\n     * @dev Only admin can call it, galaxy pool must be closed before crowdfunding pool\\n     * @param _newWhaleCloseTime New close time of galaxy pool\\n     * @param _newCommunityCloseTime New close time of crowdfunding pool\\n     */\\n    function updateTime(\\n        uint64 _newWhaleCloseTime,\\n        uint64 _newCommunityCloseTime\\n    ) external onlyAdmin beforeTGEDate {\\n        (uint64 _TGEDate, , , , ) = vesting.getVestingInfo();\\n        require(\\n            whaleOpenTime < _newWhaleCloseTime &&\\n                _newWhaleCloseTime < _newCommunityCloseTime &&\\n                _newCommunityCloseTime <= _TGEDate,\\n            Errors.INVALID_TIME\\n        );\\n\\n        communityOpenTime = whaleCloseTime = _newWhaleCloseTime;\\n        communityCloseTime = _newCommunityCloseTime;\\n\\n        emit UpdateTime(\\n            whaleOpenTime,\\n            whaleCloseTime,\\n            communityOpenTime,\\n            communityCloseTime\\n        );\\n    }\\n\\n    function updateTGEDate(\\n        uint64 _newTGEDate\\n    ) external onlyAdmin beforeTGEDate {\\n        (uint64 TGEDate, , , , ) = vesting.getVestingInfo();\\n        require(_newTGEDate <= TGEDate + ignitionFactory.getMaximumTGEDateAdjustment(), Errors.NOT_ALLOWED_TO_ADJUST_TGE_DATE_TOO_BIG);\\n        require(communityCloseTime <= _newTGEDate, Errors.INVALID_TIME);\\n        vesting.updateTGEDate(_newTGEDate);\\n    }\\n\\n    /**\\n     * @notice Investor buy token in galaxy pool\\n     * @dev Must be in time for whale and pool is not closed\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _maxPurchaseBaseOnAllocations Max purchase amount base on allocation of whale\\n     */\\n    function buyTokenInGalaxyPool(\\n        bytes32[] calldata proof,\\n        uint _purchaseAmount,\\n        uint _maxPurchaseBaseOnAllocations\\n    ) external whenNotPaused nonReentrant {\\n        require(_validWhaleSession(), Errors.TIME_OUT_TO_BUY_IDO_TOKEN);\\n\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n        _preValidatePurchaseInGalaxyPool(\\n            _msgSender(),\\n            _purchaseAmount,\\n            _maxPurchaseBaseOnAllocations\\n        );\\n        //  // @fix: Need to check if the purchase amount is exceeds total raise amount\\n        _preValidatePurchase(_purchaseAmount);\\n\\n        _internalWhaleBuyToken(\\n            proof,\\n            _purchaseAmount,\\n            _maxPurchaseBaseOnAllocations,\\n            galaxyParticipationFeePercentage,\\n            uint8(PoolLogic.PoolType.GALAXY_POOL)\\n        );\\n        _updatePurchasingInGalaxyPoolState(_purchaseAmount);\\n    }\\n\\n    /**\\n     * @notice Investor buy token in crowdfunding pool\\n     * @dev Must be in time for crowdfunding pool and pool is not closed\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function buyTokenInCrowdfundingPool(\\n        bytes32[] calldata proof,\\n        uint _purchaseAmount\\n    ) external whenNotPaused nonReentrant {\\n        _verifyAllowance(_msgSender(), _purchaseAmount);\\n\\n        // @fix: Need to check if the purchase amount is exceeds total raise amount\\n        _preValidatePurchase(_purchaseAmount);\\n\\n        if (_validWhaleSession()) {\\n            _preValidatePurchaseInEarlyAccess(_purchaseAmount);\\n            _internalWhaleBuyToken(\\n                proof,\\n                _purchaseAmount,\\n                0,\\n                crowdfundingParticipationFeePercentage,\\n                uint8(PoolLogic.PoolType.EARLY_ACCESS)\\n            );\\n            _updatePurchasingInEarlyAccessState(_purchaseAmount);\\n            \\n            return;\\n        }\\n\\n        require(_validCommunitySession(), Errors.TIME_OUT_TO_BUY_IDO_TOKEN);\\n\\n        _internalNormalUserBuyToken(proof, _purchaseAmount);\\n    }\\n\\n    function setClaimableStatus(bool _status) external onlyAdmin {\\n        if (_status == true) {\\n            require(\\n                !isFailBeforeTGEDate(),\\n                Errors.NOT_ALLOWED_TO_ALLOW_INVESTOR_TO_CLAIM\\n            );\\n        }\\n        return vesting.setClaimableStatus(_status);\\n    }\\n\\n    function fundIDOToken(\\n        IERC20withDec _IDOToken,\\n        bytes calldata signature\\n    ) external onlyOwner whenNotPaused nonReentrant beforeTGEDate {\\n        require(!vesting.isFunded(), Errors.POOL_IS_ALREADY_FUNDED); \\n\\n        IERC20withDec IDOToken = vesting.getIDOToken();\\n\\n        uint256 fundAmount = getIDOTokenAmountByOfferedCurrency(totalRaiseAmount);\\n\\n        /// @fix: Total IDO token deposit to the funds always equals total raise amount\\n        if (address(IDOToken) == address(0)) { // private sale, so total token\\n            require(block.timestamp > communityCloseTime, Errors.NOT_ALLOWED_TO_FUND_BEFORE_COMMUNITY_TIME);\\n\\n            require(\\n                _verifyFundAllowanceSignature(_IDOToken, signature),\\n                Errors.INVALID_SIGNER\\n            );\\n\\n            vesting.setIDOToken(_IDOToken);\\n\\n            fundAmount = getIDOTokenAmountByOfferedCurrency(purchasedAmount);\\n        }\\n\\n        _forwardToken(\\n            _IDOToken,\\n            _msgSender(),\\n            address(vesting),\\n            fundAmount\\n        );\\n\\n        vesting.setFundedStatus(true);\\n        emit FundIDOToken(_IDOToken, fundAmount);\\n    }\\n\\n    function withdrawRedundantIDOToken(\\n        address _beneficiary\\n    ) external onlyOwner {\\n        uint vestingIDOBalance = IERC20(vesting.getIDOToken()).balanceOf(\\n            address(vesting)\\n        );\\n        uint redundantAmount;\\n\\n        // In case project is not funded at TGE Date\\n        if (isFailBeforeTGEDate()) {\\n            redundantAmount = vestingIDOBalance;\\n        } else {\\n            (uint64 _TGEDate, , , , ) = vesting.getVestingInfo();\\n            require(\\n                block.timestamp >= _TGEDate,\\n                Errors.NOT_ALLOWED_TO_TRANSFER_BEFORE_TGE_DATE\\n            );\\n            redundantAmount =\\n                vestingIDOBalance -\\n                getIDOTokenAmountByOfferedCurrency(purchasedAmount);\\n        }\\n        vesting.withdrawRedundantIDOToken(_beneficiary, redundantAmount);\\n    }\\n\\n    /// @notice System's admin receive token fee only when project is success after lockup time\\n    /// @param _beneficiary Address to receive\\n    function claimTokenFee(\\n        address _beneficiary\\n    )\\n        external\\n        onlyAdmin\\n        whenNotPaused\\n        onlyFunded\\n        nonReentrant\\n        afterLockupTime\\n        notEmergencyCancelled\\n    {\\n        require(\\n            tokenFeeClaimedStatus == false,\\n            Errors.NOT_ALLOWED_TO_CLAIM_TOKEN_FEE\\n        );\\n        uint tokenFee = (purchasedAmount * tokenFeePercentage) /\\n            PERCENTAGE_DENOMINATOR;\\n\\n        purchaseToken.safeTransfer(_beneficiary, tokenFee);\\n        tokenFeeClaimedStatus = true;\\n\\n        emit ClaimTokenFee(_beneficiary, tokenFee);\\n    }\\n\\n    /// @notice System's admin participation token fee only when project is success after lockup time\\n    /// @param _beneficiary Address to receive\\n    function claimParticipationFee(\\n        address _beneficiary\\n    )\\n        external\\n        onlyAdmin\\n        whenNotPaused\\n        onlyFunded\\n        nonReentrant\\n        afterLockupTime\\n        notEmergencyCancelled\\n    {\\n        require(\\n            participationFeeClaimedStatus == false,\\n            Errors.NOT_ALLOWED_TO_CLAIM_PARTICIPATION_FEE\\n        );\\n        purchaseToken.safeTransfer(_beneficiary, participationFeeAmount);\\n        participationFeeClaimedStatus = true;\\n\\n        emit ClaimParticipationFee(_beneficiary, participationFeeAmount);\\n    }\\n\\n    /// @notice When project is fail (cancelled by admin or not be funded enough IDO token)\\n    /// @param _beneficiary Address of receiver\\n    function withdrawPurchasedAmount(\\n        address _beneficiary\\n    ) external nonReentrant {\\n        PurchaseAmount storage userInfo = userPurchasedAmount[_msgSender()];\\n\\n        uint principalAmount = userInfo.principal;\\n        uint feeAmount = userInfo.fee;\\n        uint amount = principalAmount + feeAmount;\\n\\n        require(amount > 0, Errors.ZERO_AMOUNT_NOT_VALID);\\n        // @fix: There're 2 ways to withdraw purchased amount: Pool is closed or Pool is failed at TGE Date\\n        require(\\n            (isFailBeforeTGEDate() || vesting.isEmergencyCancelled()) &&\\n                userInfo.withdrawn == 0,\\n            Errors.NOT_ALLOWED_TO_WITHDRAW_PURCHASED_AMOUNT\\n        );\\n\\n        purchaseToken.safeTransfer(_beneficiary, amount);\\n        userInfo.withdrawn = amount;\\n\\n        emit WithdrawPurchasedAmount(_msgSender(), _beneficiary, amount);\\n    }\\n\\n    function claimFund(\\n        address _beneficiary\\n    )\\n        external\\n        onlyOwner\\n        whenNotPaused\\n        onlyFunded\\n        nonReentrant\\n        afterLockupTime\\n        notEmergencyCancelled\\n    {\\n        require(\\n            vesting.isClaimable(),\\n            Errors.NOT_ALLOWED_TO_CLAIM_PURCHASE_TOKEN\\n        );\\n        uint claimableAmount = getClaimableFundAmount();\\n        require(claimableAmount > 0, Errors.INVALID_CLAIMABLE_AMOUNT);\\n\\n        claimableAmount = claimableAmount <=\\n            purchaseToken.balanceOf(address(this))\\n            ? claimableAmount\\n            : purchaseToken.balanceOf(address(this));\\n        fundClaimedAmount += claimableAmount;\\n\\n        purchaseToken.safeTransfer(_beneficiary, claimableAmount);\\n\\n        emit ClaimFund(_beneficiary, claimableAmount);\\n    }\\n\\n    // ============================== PUBLIC FUNCTION ==============================\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function isFailBeforeTGEDate() public view returns (bool) {\\n        (uint64 _TGEDate, , , , ) = vesting.getVestingInfo();\\n        return (paused() ||\\n            (!vesting.isFunded() && block.timestamp >= _TGEDate));\\n    }\\n\\n    /**\\n     * @dev Get IDO token amount base on amount of purchase token\\n     * @param _amount Amount of purchase token\\n     * @return Return amount of respective IDO token\\n     */\\n    function getIDOTokenAmountByOfferedCurrency(\\n        uint _amount\\n    ) public view returns (uint) {\\n        return\\n            (_amount * offeredCurrency.rate) / (10 ** offeredCurrency.decimal);\\n    }\\n\\n    function getClaimableFundAmount() public view returns (uint) {\\n        uint tokenFee = (purchasedAmount * tokenFeePercentage) /\\n            PERCENTAGE_DENOMINATOR;\\n        uint totalFundAmount = purchasedAmount - tokenFee;\\n        (\\n            uint64 _TGEDate,\\n            uint16 _TGEPercentage,\\n            uint64 _vestingCliff,\\n            uint64 _vestingFrequency,\\n            uint _numberOfVestingRelease\\n        ) = vesting.getVestingInfo();\\n\\n        return\\n            VestingLogic.calculateClaimableAmount(\\n                totalFundAmount,\\n                fundClaimedAmount,\\n                _TGEPercentage,\\n                _TGEDate,\\n                _vestingCliff,\\n                _vestingFrequency,\\n                _numberOfVestingRelease\\n            );\\n    }\\n\\n    // ============================== INTERNAL FUNCTION ==============================\\n\\n    function _createAndSetVesting(\\n        address _IDOToken,\\n        uint _TGEDate,\\n        uint _TGEPercentage,\\n        uint _vestingCliff,\\n        uint _vestingFrequency,\\n        uint _numberOfVestingRelease\\n    ) internal {\\n        address _vesting = IIgnitionFactory(ignitionFactory).createVesting();\\n        vesting = IVesting(_vesting);\\n        vesting.initialize(\\n            address(this),\\n            _IDOToken,\\n            _TGEDate,\\n            _TGEPercentage,\\n            _vestingCliff,\\n            _vestingFrequency,\\n            _numberOfVestingRelease\\n        );\\n    }\\n\\n    function _verifyFundAllowanceSignature(\\n        IERC20withDec _IDOToken,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 symbolHash = keccak256(abi.encodePacked(_IDOToken.symbol()));\\n        uint8 decimals = _IDOToken.decimals();\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        FUND_TYPEHASH,\\n                        address(_IDOToken),\\n                        address(this),\\n                        symbolHash,\\n                        decimals\\n                    )\\n                )\\n            )\\n        );\\n\\n        return ignitionFactory.isOwner(ECDSA.recover(digest, signature));\\n    }\\n\\n    /**\\n     * @dev Internal function for whale to buy token\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _maxPurchaseBaseOnAllocations Max purchase amount base on allocation of whale\\n     * @param _participationFeePercentage Fee percentage when buying token\\n     * @param _poolType 0 for galaxy pool, 1 for early access and 2 for normal user in crowdfunding pool\\n     */\\n    function _internalWhaleBuyToken(\\n        bytes32[] calldata proof,\\n        uint _purchaseAmount,\\n        uint _maxPurchaseBaseOnAllocations,\\n        uint _participationFeePercentage,\\n        uint8 _poolType\\n    ) internal {\\n        // Update Whale Purchase Amount\\n        whalePurchasedAmount[_msgSender()] += _purchaseAmount;\\n\\n        bool verifyWithKYCed = _verifyUser(\\n            _msgSender(),\\n            WHALE,\\n            maxPurchaseAmountForKYCUser,\\n            _maxPurchaseBaseOnAllocations,\\n            proof\\n        );\\n        if (verifyWithKYCed) {\\n            _internalBuyToken(\\n                _msgSender(),\\n                _purchaseAmount,\\n                _participationFeePercentage,\\n                true,\\n                _poolType\\n            );\\n            return;\\n        }\\n\\n        bool verifyWithoutKYC = _verifyUser(\\n            _msgSender(),\\n            WHALE,\\n            maxPurchaseAmountForNotKYCUser,\\n            _maxPurchaseBaseOnAllocations,\\n            proof\\n        );\\n\\n        require(verifyWithoutKYC, Errors.NOT_IN_WHALE_LIST);\\n\\n        _internalBuyToken(\\n            _msgSender(),\\n            _purchaseAmount,\\n            _participationFeePercentage,\\n            false,\\n            _poolType\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function for normal user to buy token\\n     * @param proof Respective proof for a leaf, which is respective for investor in merkle tree\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _internalNormalUserBuyToken(\\n        bytes32[] calldata proof,\\n        uint _purchaseAmount\\n    ) internal {\\n        uint8 poolType = uint8(PoolLogic.PoolType.NORMAL_ACCESS);\\n        bool verifyWithKYCed = _verifyUser(\\n            _msgSender(),\\n            NORMAL_USER,\\n            maxPurchaseAmountForKYCUser,\\n            0,\\n            proof\\n        );\\n        if (verifyWithKYCed) {\\n            _internalBuyToken(\\n                _msgSender(),\\n                _purchaseAmount,\\n                crowdfundingParticipationFeePercentage,\\n                true,\\n                poolType\\n            );\\n            return;\\n        }\\n\\n        bool verifyWithoutKYC = _verifyUser(\\n            _msgSender(),\\n            NORMAL_USER,\\n            maxPurchaseAmountForNotKYCUser,\\n            0,\\n            proof\\n        );\\n\\n        require(verifyWithoutKYC, Errors.NOT_IN_INVESTOR_LIST);\\n\\n        _internalBuyToken(\\n            _msgSender(),\\n            _purchaseAmount,\\n            crowdfundingParticipationFeePercentage,\\n            false,\\n            poolType\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to buy token\\n     * @param buyer Address of investor\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _participationFeePercentage Fee percentage when buying token\\n     * @param _KYCStatus True if investor KYC and vice versa\\n     * @param _poolType 0 for galaxy pool, 1 for early access and 2 for normal user in crowdfunding pool\\n     */\\n    function _internalBuyToken(\\n        address buyer,\\n        uint _purchaseAmount,\\n        uint _participationFeePercentage,\\n        bool _KYCStatus,\\n        uint8 _poolType\\n    ) internal {\\n        if (_KYCStatus == true) {\\n            require(\\n                userPurchasedAmount[buyer].principal + _purchaseAmount <=\\n                    maxPurchaseAmountForKYCUser,\\n                Errors.EXCEED_MAX_PURCHASE_AMOUNT_FOR_KYC_USER\\n            );\\n        } else {\\n            require(\\n                userPurchasedAmount[buyer].principal + _purchaseAmount <=\\n                    maxPurchaseAmountForNotKYCUser,\\n                Errors.EXCEED_MAX_PURCHASE_AMOUNT_FOR_NOT_KYC_USER\\n            );\\n        }\\n\\n        uint participationFee = PoolLogic.calculateParticipantFee(\\n            _purchaseAmount,\\n            _participationFeePercentage\\n        );\\n        _handleParticipationFee(buyer, participationFee);\\n        _handlePurchaseTokenFund(buyer, _purchaseAmount);\\n\\n        uint IDOTokenAmount = getIDOTokenAmountByOfferedCurrency(\\n            _purchaseAmount\\n        );\\n        vesting.createVestingSchedule(buyer, IDOTokenAmount);\\n\\n        emit BuyToken(buyer, address(this), _purchaseAmount, IDOTokenAmount, _poolType);\\n    }\\n\\n    function _handlePurchaseTokenFund(\\n        address _buyer,\\n        uint _purchaseAmount\\n    ) internal {\\n        _forwardPurchasedToken(_buyer, _purchaseAmount);\\n        _updatePurchasingState(_buyer, _purchaseAmount);\\n    }\\n\\n    function _handleParticipationFee(\\n        address _buyer,\\n        uint _participationFee\\n    ) internal {\\n        if (_participationFee > 0) {\\n            _forwardPurchasedToken(_buyer, _participationFee);\\n            _updateParticipationFee(_buyer, _participationFee);\\n        }\\n    }\\n\\n    function _forwardPurchasedToken(\\n        address _addr,\\n        uint _amount\\n    ) internal {\\n        purchaseToken.safeTransferFrom(\\n            _addr,\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    function _updateParticipationFee(\\n        address _buyer,\\n        uint _participationFee\\n    ) internal {\\n        userPurchasedAmount[_buyer].fee += _participationFee;\\n        participationFeeAmount += _participationFee;\\n    }\\n\\n    /**\\n     * @dev Update purchasing amount in galaxy pool\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _updatePurchasingInGalaxyPoolState(uint _purchaseAmount) internal {\\n        purchasedAmountInGalaxyPool += _purchaseAmount;\\n    }\\n\\n    /**\\n     * @dev Update purchasing amount in early access\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _updatePurchasingInEarlyAccessState(\\n        uint _purchaseAmount\\n    ) internal {\\n        purchasedAmountInEarlyAccess += _purchaseAmount;\\n    }\\n\\n    /**\\n     * @dev Update purchasing amount, airdrop amount and TGE amount in all pools\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _updatePurchasingState(\\n        address _buyer,\\n        uint _purchaseAmount\\n    ) internal {\\n        userPurchasedAmount[_buyer].principal += _purchaseAmount;\\n        purchasedAmount += _purchaseAmount;\\n    }\\n\\n    function _forwardToken(\\n        IERC20withDec token,\\n        address sender,\\n        address receiver,\\n        uint amount\\n    ) internal {\\n        token.safeTransferFrom(sender, receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Check whether or not purchase amount exceeds max purchase in early access for whale\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _preValidatePurchaseInEarlyAccess(\\n        uint _purchaseAmount\\n    ) internal view {\\n        PoolLogic.validAmount(_purchaseAmount);\\n        require(\\n            purchasedAmountInEarlyAccess + _purchaseAmount <=\\n                maxPurchaseAmountForEarlyAccess,\\n            Errors.EXCEED_MAX_PURCHASE_AMOUNT_FOR_EARLY_ACCESS\\n        );\\n    }\\n\\n    /**\\n     * @dev Check whether or not purchase amount exceeds amount in all pools\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _preValidatePurchase(uint _purchaseAmount) internal view {\\n        PoolLogic.validAmount(_purchaseAmount);\\n        require(\\n            purchasedAmount + _purchaseAmount <= totalRaiseAmount,\\n            Errors.EXCEED_TOTAL_RAISE_AMOUNT\\n        );\\n    }\\n\\n    /**\\n     * @dev Check whether or not session of whale\\n     * @return Return true if yes, and vice versa\\n     */\\n    function _validWhaleSession() internal view returns (bool) {\\n        return\\n            block.timestamp > whaleOpenTime &&\\n            block.timestamp <= whaleCloseTime;\\n    }\\n\\n    /**\\n     * @dev Check whether or not session of community user\\n     * @return Return true if yes, and vice versa\\n     */\\n    function _validCommunitySession() internal view returns (bool) {\\n        return\\n            block.timestamp > communityOpenTime &&\\n            block.timestamp <= communityCloseTime;\\n    }\\n\\n    /**\\n     * @dev Verify allowance of investor's token for pool\\n     * @param _user Address of investor\\n     * @param _purchaseAmount Purchase amount of investor\\n     */\\n    function _verifyAllowance(\\n        address _user,\\n        uint _purchaseAmount\\n    ) private view {\\n        uint allowance = purchaseToken.allowance(_user, address(this));\\n        require(allowance >= _purchaseAmount, Errors.NOT_ENOUGH_ALLOWANCE);\\n    }\\n\\n    /**\\n     * @dev Check whether or not purchase amount exceeds max purchase amount base on allocation for whale\\n     * @param _purchaseAmount Amount of purchase token\\n     * @param _maxPurchaseBaseOnAllocations Max purchase amount base on allocations for whale\\n     */\\n    function _preValidatePurchaseInGalaxyPool(\\n        address _whaleAddress,\\n        uint _purchaseAmount,\\n        uint _maxPurchaseBaseOnAllocations\\n    ) internal view {\\n        PoolLogic.validAmount(_purchaseAmount);\\n        require(\\n            whalePurchasedAmount[_whaleAddress] +  _purchaseAmount <= _maxPurchaseBaseOnAllocations,\\n            Errors.EXCEED_MAX_PURCHASE_AMOUNT_FOR_USER\\n        );\\n    }\\n    \\n}\\n\",\"keccak256\":\"0xd5f10c548a1fcdcd389f66f5b04089696f251a2a69eb9db42fc75c59c74613cb\",\"license\":\"MIT\"},\"contracts/core/PoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IIgnitionFactory.sol\\\";\\nimport \\\"../interfaces/IVesting.sol\\\";\\n\\ncontract PoolStorage {\\n    /// @dev rate and decimal to display price of IDO token\\n    struct OfferedCurrency {\\n        uint rate;\\n        uint decimal;\\n    }\\n\\n    /// @dev amount of purchase token, fee used to buy IDO token and withdrawn amount status if project failed\\n    struct PurchaseAmount {\\n        uint principal; // purchased amount(based on purchased token)\\n        uint fee; // participation fee (based on purchased token)\\n        uint withdrawn;\\n    }\\n\\n    // // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // // invalidate the cached domain separator if the chain id changes.\\n    // bytes32 private immutable _cachedDomainSeparator;\\n    // uint256 private immutable _cachedChainId;\\n    // address private immutable _cachedThis;\\n\\n    // bytes32 private immutable _hashedName;\\n    // bytes32 private immutable _hashedVersion;\\n\\n    // bytes32 private constant TYPE_HASH =\\n    //     keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @dev keccak256(\\\"WHALE\\\")\\n    bytes32 public constant WHALE =\\n        0xed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95;\\n\\n    /// @dev keccak256(\\\"NORMAL_USER\\\")\\n    bytes32 public constant NORMAL_USER =\\n        0x13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e01;\\n\\n    /// @dev Percentage denominator\\n    uint16 public constant PERCENTAGE_DENOMINATOR = 10000;\\n\\n    // bytes32 public constant FUND_TYPEHASH = keccak256(\\\"Fund(address IDOToken,address pool,string symbol,uint8 decimals)\\\");\\n    bytes32 public constant FUND_TYPEHASH =\\n        0x52d52760e40624a39bea36339850f64206470d82f714f11095b454fbff6de952;\\n\\n    /// @dev Name used for fund signature\\n    string public constant name = \\\"Pool\\\";\\n\\n    /// @dev Version used for fund signature\\n    string public constant version = \\\"1\\\";\\n\\n    /// @dev Address of pool factory\\n    IIgnitionFactory public ignitionFactory;\\n\\n    /// @dev Address of purchase token\\n    IERC20 public purchaseToken;\\n\\n    /// @dev Store rate and decimal to display price of IDO token\\n    OfferedCurrency public offeredCurrency;\\n\\n    /// @dev Max purchase amount for galaxy pool = total raise amount * galaxy pool proportion\\n    uint public maxPurchaseAmountForGalaxyPool;\\n\\n    /// @dev Max purchase amount for early access = (total raise amount - total raise amount * galaxy pool proportion) * early access proportion\\n    uint public maxPurchaseAmountForEarlyAccess;\\n\\n    /// @dev Max purchase amount for KYC user\\n    uint public maxPurchaseAmountForKYCUser;\\n\\n    /// @dev Max purchase amount for NOT KYC user\\n    uint public maxPurchaseAmountForNotKYCUser;\\n\\n    /// @dev Token fee to create project\\n    uint16 public tokenFeePercentage;\\n\\n    /// @dev True if token fee is claimed\\n    bool public tokenFeeClaimedStatus;\\n\\n    /// @dev Fee percentage when buying token in galaxy pool\\n    uint16 public galaxyParticipationFeePercentage;\\n\\n    /// @dev Fee percentage when buying token in crowdfunding pool\\n    uint16 public crowdfundingParticipationFeePercentage;\\n\\n    /// @dev Proportion of total raise for galaxy pool\\n    uint16 public galaxyPoolProportion;\\n\\n    /// @dev Proportion of crowdfunding pool amount for early access\\n    uint16 public earlyAccessProportion;\\n\\n    /// @dev Total raise amount of all pools (based on purchase token)\\n    uint public totalRaiseAmount;\\n\\n    /// @dev Open time of galaxy pool\\n    uint64 public whaleOpenTime;\\n\\n    /// @dev Close time of galaxy pool\\n    uint64 public whaleCloseTime;\\n\\n    /// @dev Open time for community user = Close time of galaxy pool\\n    uint64 public communityOpenTime;\\n\\n    /// @dev Close time of crowdfunding pool\\n    uint64 public communityCloseTime;\\n\\n    /// @dev Participation fee in all sub-pool (based on purchase token)\\n    uint public participationFeeAmount;\\n\\n    /// @dev True if participation fee is claimed\\n    bool public participationFeeClaimedStatus;\\n\\n    /// @dev Purchased amount in galaxy pool (based on purchase token), do not include participation fee\\n    uint public purchasedAmountInGalaxyPool;\\n\\n    /// @dev Purchased amount in early access (based on purchase token), do not include participation fee\\n    uint public purchasedAmountInEarlyAccess;\\n\\n    /// @dev Purchased amount in all pools (based on purchase token), do not include participation fee\\n    uint public purchasedAmount;\\n\\n    /// @dev Fund amount which is claimed by collaborator (exclude token fee)\\n    uint public fundClaimedAmount;\\n\\n    /// @dev Mapping from User to purchased amount (based on purchase token)\\n    mapping(address => PurchaseAmount) public userPurchasedAmount;\\n\\n    /// @dev Whale address to whale purchased amount by allocation\\n    mapping(address => uint256) public whalePurchasedAmount;\\n\\n    /// @dev Vesting contract address\\n    IVesting public vesting;\\n}\\n\",\"keccak256\":\"0x638645314c77c25eea59c3ca7aac5a4ee223e4204624bc4adf1b4387b0f7cea5\",\"license\":\"MIT\"},\"contracts/extensions/IgnitionList.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract IgnitionList {\\n    bytes32 public root;\\n\\n    function _verifyUser(\\n        address _candidate,\\n        bytes32 _userType,\\n        uint _maxPurchaseWhetherOrNotKYCAmount,\\n        uint _maxPurchaseBaseOnAllocations,\\n        bytes32[] memory proof\\n    ) internal view returns (bool) {\\n        // leaf = {address + hash(\\\"User type\\\") + max purchase KYC/notKYC amount + max purchase for each user per allocation}\\n        bytes32 leaf = keccak256(\\n            abi.encodePacked(\\n                _candidate,\\n                _userType,\\n                _maxPurchaseWhetherOrNotKYCAmount,\\n                _maxPurchaseBaseOnAllocations\\n            )\\n        );\\n        return MerkleProof.verify(proof, root, leaf);\\n    }\\n}\\n\",\"keccak256\":\"0xf5e03a871acbbfbbf625c595377581df6d30cd88113b5df6213970d7ef510d95\",\"license\":\"UNLICENSED\"},\"contracts/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    string public constant CALLER_NOT_ADMIN = \\\"1\\\"; // 'The caller of the function is not an admin'\\n    string public constant CALLER_NOT_OWNER = \\\"2\\\"; // 'The caller of the funtion is not an owner'\\n    string public constant ZERO_AMOUNT_NOT_VALID = \\\"3\\\"; // 'Amount must be greater than 0'\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"4\\\"; // 'Zero address not valid'\\n    string public constant INVALID_TOKEN_FEE_PERCENTAGE = \\\"5\\\"; // 'Token fee must not be greater than 100%'\\n    string public constant INVALID_TGE_PERCENTAGE = \\\"6\\\"; // 'TGE must be smaller than or equal 100%'\\n    string public constant INVALID_GALAXY_POOL_PROPORTION = \\\"7\\\"; // 'Galaxy pool proportion must be greater than 0% and smaller than 100%'\\n    string public constant INVALID_EARLY_ACCESS_PROPORTION = \\\"8\\\"; // 'Early access proportion must be smaller than 100%'\\n    string public constant INVALID_TIME = \\\"9\\\"; // 'Open time must be smaller than close time, close time for whale must not be greater than open time for community and not be greater than TGE date'\\n    string public constant INVALID_SIGNER = \\\"10\\\"; // 'Signer does not have the right to approve'\\n    string public constant INVALID_CLAIMABLE_AMOUNT = \\\"11\\\"; // 'Claimable amount must be greater than 0'\\n    string public constant NOT_IN_WHALE_LIST = \\\"12\\\"; // 'Investor must be in whale list'\\n    string public constant NOT_IN_INVESTOR_LIST = \\\"13\\\"; // 'Investor must be in the list'\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"14\\\"; // 'Investor need to approve or permit pool for their token before invest'\\n    string public constant NOT_FUNDED = \\\"15\\\"; // 'Collaborator need to fund enough IDO token'\\n    string public constant ALREADY_CLAIM_TOTAL_AMOUNT = \\\"16\\\"; // 'User already claim all of their token'\\n    string public constant TIME_OUT_TO_BUY_IDO_TOKEN = \\\"17\\\"; // 'Time out for investor to buy IDO token'\\n    string public constant EXCEED_MAX_PURCHASE_AMOUNT_FOR_USER = \\\"18\\\"; // 'Investor can not buy exceed allocated amount'\\n    string public constant EXCEED_TOTAL_RAISE_AMOUNT = \\\"19\\\"; // 'Investor can not buy exceed total IDO token raise amount'\\n    string public constant EXCEED_MAX_PURCHASE_AMOUNT_FOR_KYC_USER = \\\"20\\\"; // 'Investor who already kyced can not buy exceed allocated amount for KYCed user'\\n    string public constant EXCEED_MAX_PURCHASE_AMOUNT_FOR_NOT_KYC_USER = \\\"21\\\"; // 'Investor who not kyc can not buy exceed allocated amount for not KYC user'\\n    string public constant EXCEED_MAX_PURCHASE_AMOUNT_FOR_EARLY_ACCESS = \\\"22\\\"; // 'Investor can not buy exceed allocated amount for early access'\\n    string public constant NOT_ALLOWED_TO_CLAIM_IDO_TOKEN = \\\"23\\\"; // 'Need admin's allowance to claim IDO token'\\n    string public constant NOT_ALLOWED_TO_CLAIM_TOKEN_FEE = \\\"24\\\"; // 'Admin can claim only one single time'\\n    string public constant NOT_ALLOWED_TO_DO_AFTER_TGE_DATE = \\\"25\\\"; // 'User must execute before TGE Date'\\n    string public constant NOT_ALLOWED_TO_CLAIM_PARTICIPATION_FEE = \\\"26\\\"; // 'Admin can claim only one single time'\\n    string public constant NOT_ALLOWED_TO_WITHDRAW_PURCHASED_AMOUNT = \\\"27\\\"; // 'Investor can withdraw their purchased amount if project failed and only one single time'\\n    string public constant NOT_ALLOWED_TO_FUND_AFTER_TGE_DATE = \\\"28\\\"; // 'Collaborator must fund IDO token before TGE date'\\n    string public constant NOT_ALLOWED_TO_ALLOW_INVESTOR_TO_CLAIM = \\\"29\\\"; // 'Admin can set claimable status to true if project success'\\n    string public constant NOT_ALLOWED_TO_CLAIM_PURCHASE_TOKEN = \\\"30\\\"; // 'Collaborator can only claim fund (which exclude token fee) when project successes'\\n    string public constant NOT_ALLOWED_TO_TRANSFER_BEFORE_TGE_DATE = \\\"31\\\"; // 'User can only claim or withdraw after TGE date'\\n    string public constant NOT_ALLOWED_TO_TRANSFER_BEFORE_LOCKUP_TIME = \\\"32\\\"; // 'Admin can only claim token fee, participation fee; collaborator can only claim fund after lockup time'\\n    string public constant NOT_ALLOWED_TO_DO_AFTER_EMERGENCY_CANCELLED = \\\"33\\\"; // 'Collaborator can withdraw redundant IDO token only,claim fund; admin can only claim token fee, participation fee if project is not emergency cancelled'\\n    string public constant NOT_ALLOWED_TO_CANCEL_AFTER_LOCKUP_TIME = \\\"34\\\"; // 'Admin can only cancel pool before lockup time'\\n    string public constant NOT_ALLOWED_TO_EXCEED_TOTAL_RAISE_AMOUNT = \\\"35\\\"; // Total Purchased Amount can't exceeds total raise amount\\n    string public constant NOT_ALLOWED_TO_FUND_BEFORE_COMMUNITY_TIME = \\\"36\\\"; // Not allow to fund IDO token before Community Close Time\\n    string public constant GALAXY_PARTICIPATION_FEE_PERCENTAGE_NOT_IN_THE_RANGE = \\\"37\\\";\\n    string public constant CROWN_FUNDING_PARTICIPATION_FEE_PERCENTAGE_NOT_IN_THE_RANGE = \\\"38\\\";\\n    string public constant NOT_ALLOWED_TO_ADJUST_TGE_DATE_TOO_BIG = \\\"39\\\";\\n    string public constant MAX_PURCHASE_FOR_KYC_USER_NOT_VALID = \\\"40\\\";\\n    string public constant POOL_IS_ALREADY_FUNDED = \\\"41\\\";\\n}\\n\",\"keccak256\":\"0xcd8639399476188cdc8d36ecc0c6f383a041f6172edf222b7bd771dff679d833\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20withDec is IERC20 {\\n    /**\\n     * @dev Returns the symbol of tokens\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals of token\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd833b00968268053a0ea7eadf2bab94f236048a8a6d94a587cc1e0e43ab28d8f\",\"license\":\"MIT\"},\"contracts/interfaces/IIgnitionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IVesting.sol\\\";\\n\\ninterface IIgnitionFactory {\\n    function isOwner(address sender) external view returns (bool);\\n\\n    function createVesting() external returns (address);\\n\\n    function getLockupDuration() external pure returns (uint);\\n\\n    function getMaxGalaxyParticipationFeePercentage() external pure returns (uint16);\\n\\n    function getMinGalaxyParticipationFeePercentage() external pure returns (uint16);\\n\\n    function getMaxCrowdfundingParticipationFeePercentage() external pure returns (uint16);\\n\\n    function getMinCrowdfundingParticipationFeePercentage() external pure returns (uint16);\\n\\n    function getMaximumTGEDateAdjustment() external pure returns (uint);\\n}\\n\",\"keccak256\":\"0x9daedbd5c06466a17ea7c4f4e71849ed4ddd61c020107ae792c6235d8e67a67a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\ninterface IPool {\\n    function initialize(\\n        address[2] memory addresses,\\n        uint[18] memory numbers,\\n        address owner\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3b53ab2b59c52fd8ab1dcd7956ee85ef37b882ee9e7dfedb1e67d4eb7ce8d5c4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC20withDec.sol\\\";\\n\\ninterface IVesting {\\n    function initialize(\\n        address owner,\\n        address _IDOToken,\\n        uint _TGEDate,\\n        uint _TGEPercentage,\\n        uint _vestingCliff,\\n        uint _vestingFrequency,\\n        uint _numberOfVestingRelease\\n    ) external;\\n\\n    function createVestingSchedule(address _user, uint _totalAmount) external;\\n\\n    function setIDOToken(IERC20withDec _IDOToken) external;\\n\\n    function getIDOToken() external view returns (IERC20withDec);\\n\\n    function setFundedStatus(bool _status) external;\\n\\n    function setClaimableStatus(bool _status) external;\\n\\n    function isClaimable() external view returns (bool);\\n\\n    function getVestingInfo()\\n        external\\n        view\\n        returns (uint64, uint16, uint64, uint64, uint);\\n\\n    function updateTGEDate(uint64 _newTGEDate) external;\\n\\n    function isFunded() external view returns (bool);\\n\\n    function withdrawRedundantIDOToken(\\n        address _beneficiary,\\n        uint _redundantAmount\\n    ) external;\\n\\n    function isEmergencyCancelled() external view returns (bool);\\n\\n    function setEmergencyCancelled(bool _status) external;\\n}\\n\",\"keccak256\":\"0x19dafa8e4d475e5f16d0230f94065bb51bcfd0d2f310cfb4a448fdb71f9f4223\",\"license\":\"UNLICENSED\"},\"contracts/logics/PoolLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\nlibrary PoolLogic {\\n    /// @dev Percentage denominator\\n    uint16 public constant PERCENTAGE_DENOMINATOR = 10000;\\n\\n    enum PoolType {\\n        GALAXY_POOL,\\n        EARLY_ACCESS,\\n        NORMAL_ACCESS\\n    }\\n\\n    /**\\n     * @dev Calculate fee when investor buy token\\n     * @param _purchaseAmount Purchase amount of investor\\n     * @param _participationFeePercentage Fee percentage when buying token\\n     * @return Return amount of fee when investor buy token\\n     */\\n    function calculateParticipantFee(\\n        uint _purchaseAmount,\\n        uint _participationFeePercentage\\n    ) external pure returns (uint) {\\n        if (_participationFeePercentage == 0) return 0;\\n        return\\n            (_purchaseAmount * _participationFeePercentage) /\\n            PERCENTAGE_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev Check whether or not an amount greater than 0\\n     * @param _amount An amount\\n     */\\n    function validAmount(uint _amount) public pure {\\n        require(_amount > 0, Errors.ZERO_AMOUNT_NOT_VALID);\\n    }\\n\\n    /**\\n     * @dev Check whether or not an address is zero address\\n     * @param _address An address\\n     */\\n    function validAddress(address _address) public pure {\\n        require(_address != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    }\\n\\n    /**\\n     * @dev verify information of pool\\n     * @param addrs Array of address includes:\\n     * - address of IDO token,\\n     * - address of purchase token\\n     * @param uints Array of pool information includes:\\n     * - max purchase amount for KYC user,\\n     * - max purchase amount for Not KYC user,\\n     * - token fee percentage,\\n     * - galaxy participation fee percentage,\\n     * - crowdfunding participation fee percentage,\\n     * - galaxy pool proportion,\\n     * - early access proportion,\\n     * - total raise amount,\\n     * - whale open time,\\n     * - whale duration,\\n     * - community duration,\\n     * - rate of IDO token (based on README formula),\\n     * - decimal of IDO token (based on README formula, is different from decimals in contract of IDO token),\\n     * - TGE date,\\n     * - TGE percentage,\\n     * - vesting cliff,\\n     * - vesting frequency,\\n     * - number of vesting release\\n     */\\n    function verifyPoolInfo(\\n        address[2] memory addrs,\\n        uint[18] memory uints\\n    ) external pure {\\n        validAddress(addrs[1]); // purchaseToken\\n\\n        // tokenFeePercentage\\n        require(\\n            uints[2] <= PERCENTAGE_DENOMINATOR,\\n            Errors.INVALID_TOKEN_FEE_PERCENTAGE\\n        );\\n\\n        // galaxyPoolProportion\\n        validAmount(uints[5]);\\n        require(\\n            uints[5] < PERCENTAGE_DENOMINATOR,\\n            Errors.INVALID_GALAXY_POOL_PROPORTION\\n        );\\n\\n        // earlyAccessProportion\\n        require(\\n            uints[6] < PERCENTAGE_DENOMINATOR,\\n            Errors.INVALID_EARLY_ACCESS_PROPORTION\\n        );\\n\\n        require(\\n            uints[8]+uints[9]+uints[10] <= uints[13],\\n            Errors.INVALID_TIME\\n        );\\n\\n        // totalRaiseAmount\\n        validAmount(uints[7]);\\n    }\\n}\\n\",\"keccak256\":\"0x0a682e303095d0dfed754ff046ce89d2fda9a46d1a5dadbb25db5b633f306c5c\",\"license\":\"MIT\"},\"contracts/logics/VestingLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\nlibrary VestingLogic {\\n    /// @dev Percentage denominator\\n    uint16 public constant PERCENTAGE_DENOMINATOR = 10000;\\n\\n    function calculateClaimableAmount(\\n        uint totalAmount,\\n        uint claimedAmount,\\n        uint16 TGEPercentage,\\n        uint64 TGEDate,\\n        uint64 vestingCliff,\\n        uint64 vestingFrequency,\\n        uint numberOfVestingRelease\\n    ) external view returns (uint) {\\n        if (claimedAmount >= totalAmount) {\\n            return 0;\\n        }\\n        uint TGEAmount = (totalAmount * TGEPercentage) / PERCENTAGE_DENOMINATOR;\\n\\n        // In cliff time\\n        if (block.timestamp < TGEDate + vestingCliff || vestingFrequency == 0) {\\n            return TGEAmount - claimedAmount;\\n        }\\n\\n        // After vesting duration\\n        uint releaseIndex = (block.timestamp - TGEDate - vestingCliff) /\\n            vestingFrequency +\\n            1;\\n        if (releaseIndex >= numberOfVestingRelease) {\\n            return totalAmount - claimedAmount;\\n        }\\n\\n        // In vesting duration\\n        uint totalClaimableExceptTGEAmount = totalAmount - TGEAmount;\\n        return\\n            (releaseIndex * totalClaimableExceptTGEAmount) /\\n            numberOfVestingRelease +\\n            TGEAmount -\\n            claimedAmount;\\n    }\\n\\n    function verifyVestingInfo(uint _TGEPercentage) external pure {\\n        require(\\n            _TGEPercentage <= PERCENTAGE_DENOMINATOR,\\n            Errors.INVALID_TGE_PERCENTAGE\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcbd24f0f4d418998f5eb7a185517a35086fb6621f02545c763965b2520b85d84\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615bf280620000216000396000f3fe608060405234801561001057600080fd5b50600436106103455760003560e01c806377292d5b116101bf578063c09d6fb9116100fa578063e3b37f301161009d578063e3b37f30146107c6578063e58378bb146107d9578063e7a00232146107ee578063e995914914610815578063ebf0c7171461082a578063efaad0ec14610833578063f137993914610846578063f1f8044a1461084f57600080fd5b8063c09d6fb914610714578063c313607414610729578063c6b3665c1461073c578063cdc5598e14610751578063ce7c641014610766578063cf4186ec14610780578063d547741f146107a0578063dab5f340146107b357600080fd5b8063a217fddf11610162578063a217fddf14610667578063a4f276c71461066f578063a558b65c146106b9578063a95c4d62146106d3578063adaa039c146106e6578063b3679bda146106ef578063b3cd4254146106f8578063bb8e3f441461070157600080fd5b806377292d5b146105fc5780637837734f146106055780637b1a08381461061a57806385f8f4be146106235780638a39face1461062c57806391d148541461063f5780639ac8d38b14610652578063a0918c4f1461065f57600080fd5b80633644e5151161028f57806350a729281161023257806350a729281461056a57806354fd4d501461057d5780635671e8c91461059d5780635c975abb146105b05780636db6e031146105bb5780636e3b466d146105ce5780636e44a6c9146105e15780636e516bbe146105e957600080fd5b80633644e515146104c057806336568abe146104c85780633baa6fca146104db5780633bc270db146104ee5780633d3e3763146105015780633d4527b71461051457806344c63eec146105275780634f93d1ad1461054757600080fd5b80632013b4c4116102f75780632013b4c4146104015780632186b36814610433578063226d232a14610446578063248a9ca3146104595780632f2ff15d1461047c5780632f54bf6e1461048f57806330bba6c4146104a257806334fa224b146104ab57600080fd5b806301ffc9a71461034a57806302bb34c814610372578063068350b91461038957806306fdde03146103aa578063086425bc146103da5780631353ff75146103ef5780631acbc823146103f8575b600080fd5b61035d6103583660046152a8565b610862565b60405190151581526020015b60405180910390f35b61037b60115481565b604051908152602001610369565b6009546103979061ffff1681565b60405161ffff9091168152602001610369565b6103cd60405180604001604052806004815260200163141bdbdb60e21b81525081565b60405161036991906152fe565b6103ed6103e8366004615375565b610899565b005b61037b60055481565b61037b60105481565b600b5461041b90600160c01b90046001600160401b031681565b6040516001600160401b039091168152602001610369565b6103ed6104413660046153da565b610967565b6103ed6104543660046153da565b610d8b565b61037b6104673660046153f7565b60009081526079602052604090206001015490565b6103ed61048a366004615410565b6112f9565b61035d61049d3660046153da565b611323565b61037b60085481565b60095461039790600160381b900461ffff1681565b61037b61133d565b6103ed6104d6366004615410565b61134c565b600b5461041b906001600160401b031681565b6103ed6104fc366004615440565b6113ca565b6103ed61050f3660046154d9565b6117f0565b6103ed610522366004615515565b611b08565b60145461053a906001600160a01b031681565b6040516103699190615532565b600354600454610555919082565b60408051928352602083019190915201610369565b60015461053a906001600160a01b031681565b6103cd604051806040016040528060018152602001603160f81b81525081565b6103ed6105ab366004615515565b611df0565b60ab5460ff1661035d565b6103ed6105c9366004615546565b611f4a565b60095461035d9062010000900460ff1681565b61037b6127d2565b6103ed6105f73660046153da565b612956565b61037b600e5481565b600954610397906301000000900461ffff1681565b61037b600f5481565b61037b60075481565b61037b61063a3660046153f7565b612b14565b61035d61064d366004615410565b612b3c565b600d5461035d9060ff1681565b61035d612b67565b61037b600081565b61069e61067d3660046153da565b60126020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610369565b600b5461041b90600160801b90046001600160401b031681565b60025461053a906001600160a01b031681565b61037b600c5481565b61037b600a5481565b61039761271081565b6103ed61070f3660046153da565b612c8c565b61037b600080516020615b5d83398151915281565b6103ed6107373660046153da565b612d3d565b60095461039790600160281b900461ffff1681565b60095461039790600160481b900461ffff1681565b600b5461041b90600160401b90046001600160401b031681565b61037b61078e3660046153da565b60136020526000908152604090205481565b6103ed6107ae366004615410565b61317a565b6103ed6107c13660046153f7565b61319f565b6103ed6107d436600461559a565b613282565b61037b600080516020615b7d83398151915281565b61037b7f52d52760e40624a39bea36339850f64206470d82f714f11095b454fbff6de95281565b61037b600080516020615b9d83398151915281565b61037b60005481565b6103ed6108413660046155b7565b6135d7565b61037b60065481565b6103ed61085d3660046153da565b6136b7565b60006001600160e01b03198216637965db0b60e01b148061089357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6108a16138f6565b600260dd5414156108cd5760405162461bcd60e51b81526004016108c490615602565b60405180910390fd5b600260dd556108da61393e565b60405180604001604052806002815260200161313760f01b815250906109135760405162461bcd60e51b81526004016108c491906152fe565b5061091e3383613970565b610929338383613a24565b61093282613ae8565b6009546109539085908590859085906301000000900461ffff166000613b97565b61095c82613cd8565b5050600160dd555050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016109959190615532565b602060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d6919061564f565b604051806040016040528060018152602001603160f81b81525090610a0e5760405162461bcd60e51b81526004016108c491906152fe565b50610a176138f6565b601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061564f565b60405180604001604052806002815260200161313560f01b81525090610ac75760405162461bcd60e51b81526004016108c491906152fe565b50600260dd541415610aeb5760405162461bcd60e51b81526004016108c490615602565b600260dd556014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190615683565b505050509050806001600160401b0316600160009054906101000a90046001600160a01b03166001600160a01b031663bc87783f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be491906156ea565b610bee9190615719565b42101560405180604001604052806002815260200161199960f11b81525090610c2a5760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b0316639aa74a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca2919061564f565b1560405180604001604052806002815260200161333360f01b81525090610cdc5760405162461bcd60e51b81526004016108c491906152fe565b50600d54604080518082019091526002815261191b60f11b60208201529060ff1615610d1b5760405162461bcd60e51b81526004016108c491906152fe565b50600c54600254610d39916001600160a01b03909116908490613cf2565b600d805460ff19166001179055600c546040517f271b8a9c81b4d02d8aca6c2a2e341a4e3e125356c586780413e857a0fadd766a91610d7a91859190615731565b60405180910390a15050600160dd55565b610d9433611323565b604051806040016040528060018152602001601960f91b81525090610dcc5760405162461bcd60e51b81526004016108c491906152fe565b50610dd56138f6565b601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c919061564f565b60405180604001604052806002815260200161313560f01b81525090610e855760405162461bcd60e51b81526004016108c491906152fe565b50600260dd541415610ea95760405162461bcd60e51b81526004016108c490615602565b600260dd556014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190615683565b505050509050806001600160401b0316600160009054906101000a90046001600160a01b03166001600160a01b031663bc87783f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa291906156ea565b610fac9190615719565b42101560405180604001604052806002815260200161199960f11b81525090610fe85760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b0316639aa74a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611060919061564f565b1560405180604001604052806002815260200161333360f01b8152509061109a5760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b03166374478bb36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611112919061564f565b60405180604001604052806002815260200161033360f41b8152509061114b5760405162461bcd60e51b81526004016108c491906152fe565b5060006111566127d2565b90506000811160405180604001604052806002815260200161313160f01b815250906111955760405162461bcd60e51b81526004016108c491906152fe565b506002546040516370a0823160e01b81526001600160a01b03909116906370a08231906111c6903090600401615532565b602060405180830381865afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120791906156ea565b811115611284576002546040516370a0823160e01b81526001600160a01b03909116906370a082319061123e903090600401615532565b602060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f91906156ea565b611286565b805b9050806011600082825461129a9190615719565b90915550506002546112b6906001600160a01b03168483613cf2565b7f0f8819b8888ebff61f219df3a7380d5329e5c298966c09de72e7a1449149b47483826040516112e7929190615731565b60405180910390a15050600160dd5550565b60008281526079602052604090206001015461131481613d48565b61131e8383613d52565b505050565b6000610893600080516020615b7d83398151915283612b3c565b6000611347613dd8565b905090565b6001600160a01b03811633146113bc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108c4565b6113c68282613e55565b5050565b6113d333611323565b604051806040016040528060018152602001601960f91b8152509061140b5760405162461bcd60e51b81526004016108c491906152fe565b506114146138f6565b600260dd5414156114375760405162461bcd60e51b81526004016108c490615602565b600260dd556014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015611485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a99190615683565b505050509050806001600160401b0316421060405180604001604052806002815260200161323560f01b815250906114f45760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c919061564f565b1560405180604001604052806002815260200161343160f01b815250906115a65760405162461bcd60e51b81526004016108c491906152fe565b5060145460408051630edaf7f360e11b815290516000926001600160a01b031691631db5efe69160048083019260209291908290030181865afa1580156115f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611615919061574a565b90506000611624600a54612b14565b90506001600160a01b03821661173557600b54604080518082019091526002815261199b60f11b602082015290600160c01b90046001600160401b031642116116805760405162461bcd60e51b81526004016108c491906152fe565b5061168c868686613ebc565b60405180604001604052806002815260200161031360f41b815250906116c55760405162461bcd60e51b81526004016108c491906152fe565b50601454604051620c8f6d60e81b81526001600160a01b0390911690630c8f6d00906116f5908990600401615532565b600060405180830381600087803b15801561170f57600080fd5b505af1158015611723573d6000803e3d6000fd5b50505050611732601054612b14565b90505b61174c86336014546001600160a01b031684614120565b60145460405163b61a40c760e01b8152600160048201526001600160a01b039091169063b61a40c790602401600060405180830381600087803b15801561179257600080fd5b505af11580156117a6573d6000803e3d6000fd5b505050507ffd1c6e1b2189d312d7360ee69c2e59b038f3f1e637e102efc2c3a833b617958e86826040516117db929190615731565b60405180910390a15050600160dd5550505050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b815260040161181e9190615532565b602060405180830381865afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f919061564f565b604051806040016040528060018152602001603160f81b815250906118975760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190615683565b505050509050806001600160401b0316421060405180604001604052806002815260200161323560f01b815250906119505760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190615683565b5050600b5492935050506001600160401b0380861691161080156119f35750826001600160401b0316846001600160401b0316105b8015611a115750806001600160401b0316836001600160401b031611155b604051806040016040528060018152602001603960f81b81525090611a495760405162461bcd60e51b81526004016108c491906152fe565b50600b8054600160401b600160c01b031916600160401b6001600160401b0387811682810267ffffffffffffffff60801b191693909317600160801b938402176001600160c01b038116600160c01b8984168102918217968790556040805193851692851692909217835293860483166020830152938504821693810193909352920490911660608201527feedf049ba2a9e400be9e2a2d93b7e6023411a5c4fd77fe703bc75c2fea691fc3906080015b60405180910390a150505050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401611b369190615532565b602060405180830381865afa158015611b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b77919061564f565b604051806040016040528060018152602001603160f81b81525090611baf5760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015611bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1d9190615683565b505050509050806001600160401b03164210611d4f576001546040805163bc87783f60e01b815290516001600160401b038416926001600160a01b03169163bc87783f9160048083019260209291908290030181865afa158015611c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca991906156ea565b611cb39190615719565b421115604051806040016040528060028152602001610ccd60f21b81525090611cef5760405162461bcd60e51b81526004016108c491906152fe565b506014546040516358e0fb5560e01b8152600160048201526001600160a01b03909116906358e0fb5590602401600060405180830381600087803b158015611d3657600080fd5b505af1158015611d4a573d6000803e3d6000fd5b505050505b611d57614135565b601454604051635671e8c960e01b8152600060048201526001600160a01b0390911690635671e8c990602401600060405180830381600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b505060405184151581523092507fcf113a21b92df7813071b3bb491583c8469cf02f9b1c0280d4500d339570a17f915060200160405180910390a25050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401611e1e9190615532565b602060405180830381865afa158015611e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5f919061564f565b604051806040016040528060018152602001603160f81b81525090611e975760405162461bcd60e51b81526004016108c491906152fe565b5060018115151415611ee757611eab612b67565b1560405180604001604052806002815260200161323960f01b81525090611ee55760405162461bcd60e51b81526004016108c491906152fe565b505b601454604051635671e8c960e01b815282151560048201526001600160a01b0390911690635671e8c990602401600060405180830381600087803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b505050505b50565b601454600160a81b900460ff1615808015611f7257506014546001600160a01b90910460ff16105b80611f935750303b158015611f935750601454600160a01b900460ff166001145b611ff65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108c4565b6014805460ff60a01b1916600160a01b1790558015612023576014805460ff60a81b1916600160a81b1790555b604051635c1c862160e01b815273EC110FbCAd8311fbB06BAD7970De252133F0281a90635c1c86219061205a908590600401615532565b60006040518083038186803b15801561207257600080fd5b505af4158015612086573d6000803e3d6000fd5b505050506120c960405180604001604052806004815260200163141bdbdb60e21b815250604051806040016040528060018152602001603160f81b815250614189565b6120d282612c8c565b60405163b95f0a6360e01b815273EC110FbCAd8311fbB06BAD7970De252133F0281a9063b95f0a639061210b9087908790600401615767565b60006040518083038186803b15801561212357600080fd5b505af4158015612137573d6000803e3d6000fd5b505050506121423390565b600180546001600160a01b0319166001600160a01b039290921691909117905561219561217260208601866153da565b6101a08501356101c08601356101e08701356102008801356102208901356141bc565b73EC110FbCAd8311fbB06BAD7970De252133F0281a635c1c86216121bf60408701602088016153da565b6040518263ffffffff1660e01b81526004016121db9190615532565b60006040518083038186803b1580156121f357600080fd5b505af4158015612207573d6000803e3d6000fd5b505050508360016002811061221e5761221e6157ba565b60200201602081019061223191906153da565b600280546001600160a01b0319166001600160a01b03929092169190911781558335600781905560208086013560088190556040805180820190915293845261034360f41b918401919091521061229b5760405162461bcd60e51b81526004016108c491906152fe565b506122ad8360025b60200201356142cf565b6009805461ffff191661ffff929092169190911790556122ce8360036122a3565b6009805461ffff9290921663010000000264ffff000000199092169190911790556122fa8360046122a3565b600960056101000a81548161ffff021916908361ffff160217905550600160009054906101000a90046001600160a01b03166001600160a01b031663d8c128226040518163ffffffff1660e01b8152600401602060405180830381865afa158015612369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238d91906157d0565b60095461ffff9182166301000000909104909116108015906124385750600160009054906101000a90046001600160a01b03166001600160a01b031663884c45096040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242191906157d0565b60095461ffff918216630100000090910490911611155b60405180604001604052806002815260200161333760f01b815250906124715760405162461bcd60e51b81526004016108c491906152fe565b50600160009054906101000a90046001600160a01b03166001600160a01b031663397a1cb36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e991906157d0565b60095461ffff918216600160281b909104909116108015906125945750600160009054906101000a90046001600160a01b03166001600160a01b031663d6de71fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257d91906157d0565b60095461ffff918216600160281b90910490911611155b60405180604001604052806002815260200161066760f31b815250906125cd5760405162461bcd60e51b81526004016108c491906152fe565b506125d98360056122a3565b6009805461ffff92909216600160381b0261ffff60381b199092169190911790556126058360066122a3565b6009805461ffff60481b1916600160481b61ffff93841602179081905560e0850135600a8190556127109261264292600160381b900416906157eb565b61264c919061580a565b60055560095461271090819061ffff600160481b820481169161267891600160381b909104168361582c565b61ffff16600a5461268991906157eb565b61269391906157eb565b61269d919061580a565b6126a7919061580a565b6006556126b8610100840135614336565b600b805467ffffffffffffffff19166001600160401b03929092169190911790556126f56126f0610120850135610100860135615719565b614336565b600b8054600160401b600160c01b031916600160401b6001600160401b0393841690810267ffffffffffffffff60801b191691909117600160801b918202179182905561274f926126f09261014088013592900416615719565b600b80546001600160401b0392909216600160c01b026001600160c01b0390921691909117905561016083013560035561018083013560045580156127cc576014805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611afa565b50505050565b6009546010546000918291612710916127f19161ffff909116906157eb565b6127fb919061580a565b905060008160105461280d919061584f565b90506000806000806000601460009054906101000a90046001600160a01b03166001600160a01b031663dc25a3006040518163ffffffff1660e01b815260040160a060405180830381865afa15801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e9190615683565b601154604051633954a8c760e01b8152600481018d9052602481019190915261ffff851660448201526001600160401b0380871660648301528085166084830152831660a482015260c4810182905294995092975090955093509150734018dfa69C71AAE148AaF29Fd07b48aEc4C3B61e90633954a8c79060e401602060405180830381865af4158015612926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294a91906156ea565b97505050505050505090565b600260dd5414156129795760405162461bcd60e51b81526004016108c490615602565b600260dd553360009081526012602052604081208054600182015491929091906129a38284615719565b905060008111604051806040016040528060018152602001603360f81b815250906129e15760405162461bcd60e51b81526004016108c491906152fe565b506129ea612b67565b80612a675750601460009054906101000a90046001600160a01b03166001600160a01b0316639aa74a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a67919061564f565b8015612a7557506002840154155b60405180604001604052806002815260200161323760f01b81525090612aae5760405162461bcd60e51b81526004016108c491906152fe565b50600254612ac6906001600160a01b03168683613cf2565b600284018190557f06ef36b707e3dba03834e3b12d116525831e552283719e0bb25d309006322a61338683604051612b0093929190615866565b60405180910390a15050600160dd55505050565b600454600090612b2590600a61596e565b600354612b3290846157eb565b610893919061580a565b60009182526079602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080601460009054906101000a90046001600160a01b03166001600160a01b031663dc25a3006040518163ffffffff1660e01b815260040160a060405180830381865afa158015612bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be19190615683565b505050509050612bf360ab5460ff1690565b80612c865750601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c70919061564f565b158015612c865750806001600160401b03164210155b91505090565b601454600160a81b900460ff16612cb55760405162461bcd60e51b81526004016108c49061597a565b6040805180820190915260018152600d60fa1b60208201526001600160a01b038216612cf45760405162461bcd60e51b81526004016108c491906152fe565b50612cfd61439e565b612d056143c7565b612d0d6143f8565b612d25600080516020615b7d83398151915282613d52565b611f47600080516020615b7d83398151915280614429565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401612d6b9190615532565b602060405180830381865afa158015612d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dac919061564f565b604051806040016040528060018152602001603160f81b81525090612de45760405162461bcd60e51b81526004016108c491906152fe565b50612ded6138f6565b601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e64919061564f565b60405180604001604052806002815260200161313560f01b81525090612e9d5760405162461bcd60e51b81526004016108c491906152fe565b50600260dd541415612ec15760405162461bcd60e51b81526004016108c490615602565b600260dd556014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015612f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f339190615683565b505050509050806001600160401b0316600160009054906101000a90046001600160a01b03166001600160a01b031663bc87783f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fba91906156ea565b612fc49190615719565b42101560405180604001604052806002815260200161199960f11b815250906130005760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b0316639aa74a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613054573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613078919061564f565b1560405180604001604052806002815260200161333360f01b815250906130b25760405162461bcd60e51b81526004016108c491906152fe565b506009546040805180820190915260028152610c8d60f21b60208201529062010000900460ff16156130f75760405162461bcd60e51b81526004016108c491906152fe565b50600954601054600091612710916131139161ffff16906157eb565b61311d919061580a565b600254909150613137906001600160a01b03168483613cf2565b6009805462ff00001916620100001790556040517fcb4040dca59670b070ce40b47eb84aff39fa7db8cd83ad903380534add01dffa906112e79085908490615731565b60008281526079602052604090206001015461319581613d48565b61131e8383613e55565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016131cd9190615532565b602060405180830381865afa1580156131ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320e919061564f565b604051806040016040528060018152602001603160f81b815250906132465760405162461bcd60e51b81526004016108c491906152fe565b5060008190556040518181527fc8d52687b85ab11e6859cb0b390a9e926e1b348d9796e084f88f88420c176fc69060200160405180910390a150565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016132b09190615532565b602060405180830381865afa1580156132cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f1919061564f565b604051806040016040528060018152602001603160f81b815250906133295760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015613373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133979190615683565b505050509050806001600160401b0316421060405180604001604052806002815260200161323560f01b815250906133e25760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa15801561342c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134509190615683565b505060015460408051633160d6e160e11b815290519495506001600160a01b03909116936362c1adc29350600480830193506020928290030181865afa15801561349e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c291906156ea565b6134d5906001600160401b038316615719565b836001600160401b0316111560405180604001604052806002815260200161333960f01b8152509061351a5760405162461bcd60e51b81526004016108c491906152fe565b50600b546040805180820190915260018152603960f81b6020820152906001600160401b03808616600160c01b90920416111561356a5760405162461bcd60e51b81526004016108c491906152fe565b50601454604051630e3b37f360e41b81526001600160401b03851660048201526001600160a01b039091169063e3b37f30906024015b600060405180830381600087803b1580156135ba57600080fd5b505af11580156135ce573d6000803e3d6000fd5b50505050505050565b6135df6138f6565b600260dd5414156136025760405162461bcd60e51b81526004016108c490615602565b600260dd556136113382613970565b61361a81613ae8565b61362261393e565b156136605761363081614474565b60095461365290849084908490600090600160281b900461ffff166001613b97565b61365b81614523565b6136ad565b613668614535565b60405180604001604052806002815260200161313760f01b815250906136a15760405162461bcd60e51b81526004016108c491906152fe565b506136ad83838361456e565b5050600160dd5550565b6136c033611323565b604051806040016040528060018152602001601960f91b815250906136f85760405162461bcd60e51b81526004016108c491906152fe565b5060145460408051630edaf7f360e11b815290516000926001600160a01b031691631db5efe69160048083019260209291908290030181865afa158015613743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613767919061574a565b6014546040516370a0823160e01b81526001600160a01b03928316926370a082319261379892911690600401615532565b602060405180830381865afa1580156137b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d991906156ea565b905060006137e5612b67565b156137f15750806138c4565b6014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa15801561383a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385e9190615683565b505050509050806001600160401b031642101560405180604001604052806002815260200161333160f01b815250906138aa5760405162461bcd60e51b81526004016108c491906152fe565b506138b6601054612b14565b6138c0908461584f565b9150505b601454604051631773307960e21b81526001600160a01b0390911690635dccc1e4906135a09086908590600401615731565b60ab5460ff161561393c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016108c4565b565b600b546000906001600160401b031642118015611347575050600b54600160401b90046001600160401b031642111590565b600254604051636eb1769f60e11b81526001600160a01b038481166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa1580156139c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e591906156ea565b905081811015604051806040016040528060028152602001610c4d60f21b815250906127cc5760405162461bcd60e51b81526004016108c491906152fe565b604051633a4d4bcd60e11b81526004810183905273EC110FbCAd8311fbB06BAD7970De252133F0281a9063749a979a9060240160006040518083038186803b158015613a6f57600080fd5b505af4158015613a83573d6000803e3d6000fd5b5050506001600160a01b038416600090815260136020526040902054829150613aad908490615719565b111560405180604001604052806002815260200161062760f31b815250906127cc5760405162461bcd60e51b81526004016108c491906152fe565b604051633a4d4bcd60e11b81526004810182905273EC110FbCAd8311fbB06BAD7970De252133F0281a9063749a979a9060240160006040518083038186803b158015613b3357600080fd5b505af4158015613b47573d6000803e3d6000fd5b50505050600a5481601054613b5c9190615719565b111560405180604001604052806002815260200161313960f01b815250906113c65760405162461bcd60e51b81526004016108c491906152fe565b3360009081526013602052604081208054869290613bb6908490615719565b9091555060009050613c1133600080516020615b5d83398151915260001b600754878b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b90508015613c2d57613c27338685600186614702565b50613cd0565b6000613c8233600080516020615b5d83398151915260001b600854888c8c8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b90508060405180604001604052806002815260200161189960f11b81525090613cbe5760405162461bcd60e51b81526004016108c491906152fe565b50613ccd338786600087614702565b50505b505050505050565b80600e6000828254613cea9190615719565b909155505050565b61131e8363a9059cbb60e01b8484604051602401613d11929190615731565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614935565b611f478133614a07565b613d5c8282612b3c565b6113c65760008281526079602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613d943390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006113477f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613e0861010f5490565b610110546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b613e5f8282612b3c565b156113c65760008281526079602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015613efd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f2591908101906159db565b604051602001613f359190615a7c565b6040516020818303038152906040528051906020012090506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb19190615a98565b90506000613fbd61133d565b604080517f52d52760e40624a39bea36339850f64206470d82f714f11095b454fbff6de95260208201526001600160a01b038a16918101919091523060608201526080810185905260ff841660a082015260c0016040516020818303038152906040528051906020012060405160200161404e92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600154601f8a0183900483028501830190935288845293506001600160a01b0390911691632f54bf6e916140b69185918b908b9081908401838280828437600092019190915250614a6b92505050565b6040518263ffffffff1660e01b81526004016140d29190615532565b602060405180830381865afa1580156140ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614113919061564f565b93505050505b9392505050565b6127cc6001600160a01b038516848484614a8f565b61413d6138f6565b60ab805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586141723390565b60405161417f9190615532565b60405180910390a1565b601454600160a81b900460ff166141b25760405162461bcd60e51b81526004016108c49061597a565b6113c68282614ab0565b6001546040805163cc6f033360e01b815290516000926001600160a01b03169163cc6f0333916004808301926020929190829003018187875af1158015614207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422b919061574a565b601480546001600160a01b0319166001600160a01b038381169182179092556040516376dfa56160e11b8152306004820152918a16602483015260448201899052606482018890526084820187905260a4820186905260c4820185905291925063edbf4ac29060e401600060405180830381600087803b1580156142ae57600080fd5b505af11580156142c2573d6000803e3d6000fd5b5050505050505050505050565b600061ffff8211156143325760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b60648201526084016108c4565b5090565b60006001600160401b038211156143325760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016108c4565b601454600160a81b900460ff1661393c5760405162461bcd60e51b81526004016108c49061597a565b601454600160a81b900460ff166143f05760405162461bcd60e51b81526004016108c49061597a565b61393c614af5565b601454600160a81b900460ff166144215760405162461bcd60e51b81526004016108c49061597a565b61393c614b2a565b600082815260796020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b604051633a4d4bcd60e11b81526004810182905273EC110FbCAd8311fbB06BAD7970De252133F0281a9063749a979a9060240160006040518083038186803b1580156144bf57600080fd5b505af41580156144d3573d6000803e3d6000fd5b5050505060065481600f546144e89190615719565b111560405180604001604052806002815260200161191960f11b815250906113c65760405162461bcd60e51b81526004016108c491906152fe565b80600f6000828254613cea9190615719565b600b54600090600160801b90046001600160401b031642118015611347575050600b54600160c01b90046001600160401b031642111590565b600260006145c633600080516020615b9d83398151915260001b600754600089898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b905080156145ea57611f42336009548590600160281b900461ffff16600186614702565b600061464033600080516020615b9d83398151915260001b60085460008a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b90508060405180604001604052806002815260200161313360f01b8152509061467c5760405162461bcd60e51b81526004016108c491906152fe565b50613cd0336009548690600160281b900461ffff16600087614702565b6040516bffffffffffffffffffffffff19606087901b16602082015260348101859052605481018490526074810183905260009081906094016040516020818303038152906040528051906020012090506146f78360005483614b5a565b979650505050505050565b60018215151415614775576007546001600160a01b038616600090815260126020526040902054614734908690615719565b111560405180604001604052806002815260200161032360f41b8152509061476f5760405162461bcd60e51b81526004016108c491906152fe565b506147d9565b6008546001600160a01b03861660009081526012602052604090205461479c908690615719565b111560405180604001604052806002815260200161323160f01b815250906147d75760405162461bcd60e51b81526004016108c491906152fe565b505b6040516353baaca160e11b8152600481018590526024810184905260009073EC110FbCAd8311fbB06BAD7970De252133F0281a9063a775594290604401602060405180830381865af4158015614833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061485791906156ea565b90506148638682614b70565b61486d8686614b8a565b600061487886612b14565b60145460405163020caa2560e51b81529192506001600160a01b03169063419544a0906148ab908a908590600401615731565b600060405180830381600087803b1580156148c557600080fd5b505af11580156148d9573d6000803e3d6000fd5b5050604080518981526020810185905260ff87168183015290513093506001600160a01b038b1692507f6666857ade20eaaed88e2671721b22c45635cc01006796336554a69f926be2f99181900360600190a350505050505050565b600061498a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b9e9092919063ffffffff16565b80519091501561131e57808060200190518101906149a8919061564f565b61131e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108c4565b614a118282612b3c565b6113c657614a29816001600160a01b03166014614bb5565b614a34836020614bb5565b604051602001614a45929190615abb565b60408051601f198184030181529082905262461bcd60e51b82526108c4916004016152fe565b6000806000614a7a8585614d50565b91509150614a8781614d96565b509392505050565b6127cc846323b872dd60e01b858585604051602401613d1193929190615866565b601454600160a81b900460ff16614ad95760405162461bcd60e51b81526004016108c49061597a565b81516020928301208151919092012061010f9190915561011055565b601454600160a81b900460ff16614b1e5760405162461bcd60e51b81526004016108c49061597a565b60ab805460ff19169055565b601454600160a81b900460ff16614b535760405162461bcd60e51b81526004016108c49061597a565b600160dd55565b600082614b678584614f4c565b14949350505050565b80156113c657614b808282614f91565b6113c68282614fa9565b614b948282614f91565b6113c68282614ff6565b6060614bad8484600085615037565b949350505050565b60606000614bc48360026157eb565b614bcf906002615719565b6001600160401b03811115614be657614be66159c5565b6040519080825280601f01601f191660200182016040528015614c10576020820181803683370190505b509050600360fc1b81600081518110614c2b57614c2b6157ba565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614c5a57614c5a6157ba565b60200101906001600160f81b031916908160001a9053506000614c7e8460026157eb565b614c89906001615719565b90505b6001811115614d01576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614cbd57614cbd6157ba565b1a60f81b828281518110614cd357614cd36157ba565b60200101906001600160f81b031916908160001a90535060049490941c93614cfa81615b2a565b9050614c8c565b5083156141195760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108c4565b600080825160411415614d875760208301516040840151606085015160001a614d7b8782858561515d565b94509450505050614d8f565b506000905060025b9250929050565b6000816004811115614daa57614daa615639565b1415614db35750565b6001816004811115614dc757614dc7615639565b1415614e105760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016108c4565b6002816004811115614e2457614e24615639565b1415614e725760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016108c4565b6003816004811115614e8657614e86615639565b1415614edf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016108c4565b6004816004811115614ef357614ef3615639565b1415611f475760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016108c4565b600081815b8451811015614a8757614f7d82868381518110614f7057614f706157ba565b6020026020010151615240565b915080614f8981615b41565b915050614f51565b6002546113c6906001600160a01b0316833084614a8f565b6001600160a01b03821660009081526012602052604081206001018054839290614fd4908490615719565b9250508190555080600c6000828254614fed9190615719565b90915550505050565b6001600160a01b0382166000908152601260205260408120805483929061501e908490615719565b925050819055508060106000828254614fed9190615719565b6060824710156150985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108c4565b6001600160a01b0385163b6150ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c4565b600080866001600160a01b0316858760405161510b9190615a7c565b60006040518083038185875af1925050503d8060008114615148576040519150601f19603f3d011682016040523d82523d6000602084013e61514d565b606091505b50915091506146f782828661526f565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561518a5750600090506003615237565b8460ff16601b141580156151a257508460ff16601c14155b156151b35750600090506004615237565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015615207573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661523057600060019250925050615237565b9150600090505b94509492505050565b600081831061525c576000828152602084905260409020614119565b6000838152602083905260409020614119565b6060831561527e575081614119565b82511561528e5782518084602001fd5b8160405162461bcd60e51b81526004016108c491906152fe565b6000602082840312156152ba57600080fd5b81356001600160e01b03198116811461411957600080fd5b60005b838110156152ed5781810151838201526020016152d5565b838111156127cc5750506000910152565b602081526000825180602084015261531d8160408501602087016152d2565b601f01601f19169190910160400192915050565b60008083601f84011261534357600080fd5b5081356001600160401b0381111561535a57600080fd5b6020830191508360208260051b8501011115614d8f57600080fd5b6000806000806060858703121561538b57600080fd5b84356001600160401b038111156153a157600080fd5b6153ad87828801615331565b90989097506020870135966040013595509350505050565b6001600160a01b0381168114611f4757600080fd5b6000602082840312156153ec57600080fd5b8135614119816153c5565b60006020828403121561540957600080fd5b5035919050565b6000806040838503121561542357600080fd5b823591506020830135615435816153c5565b809150509250929050565b60008060006040848603121561545557600080fd5b8335615460816153c5565b925060208401356001600160401b038082111561547c57600080fd5b818601915086601f83011261549057600080fd5b81358181111561549f57600080fd5b8760208285010111156154b157600080fd5b6020830194508093505050509250925092565b6001600160401b0381168114611f4757600080fd5b600080604083850312156154ec57600080fd5b82356154f7816154c4565b91506020830135615435816154c4565b8015158114611f4757600080fd5b60006020828403121561552757600080fd5b813561411981615507565b6001600160a01b0391909116815260200190565b60008060006102a0848603121561555c57600080fd5b604084018581111561556d57600080fd5b84935061028085018681111561558257600080fd5b9092503561558f816153c5565b809150509250925092565b6000602082840312156155ac57600080fd5b8135614119816154c4565b6000806000604084860312156155cc57600080fd5b83356001600160401b038111156155e257600080fd5b6155ee86828701615331565b909790965060209590950135949350505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561566157600080fd5b815161411981615507565b805161ffff8116811461567e57600080fd5b919050565b600080600080600060a0868803121561569b57600080fd5b85516156a6816154c4565b94506156b46020870161566c565b935060408601516156c4816154c4565b60608701519093506156d5816154c4565b80925050608086015190509295509295909350565b6000602082840312156156fc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561572c5761572c615703565b500190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561575c57600080fd5b8151614119816153c5565b6102808101818460005b60028110156157a3578135615785816153c5565b6001600160a01b031683526020928301929190910190600101615771565b505050610240836040840137600081529392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156157e257600080fd5b6141198261566c565b600081600019048311821515161561580557615805615703565b500290565b60008261582757634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff8381169083168181101561584757615847615703565b039392505050565b60008282101561586157615861615703565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181815b808511156158c55781600019048211156158ab576158ab615703565b808516156158b857918102915b93841c939080029061588f565b509250929050565b6000826158dc57506001610893565b816158e957506000610893565b81600181146158ff576002811461590957615925565b6001915050610893565b60ff84111561591a5761591a615703565b50506001821b610893565b5060208310610133831016604e8410600b8410161715615948575081810a610893565b615952838361588a565b806000190482111561596657615966615703565b029392505050565b600061411983836158cd565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156159ed57600080fd5b81516001600160401b0380821115615a0457600080fd5b818401915084601f830112615a1857600080fd5b815181811115615a2a57615a2a6159c5565b604051601f8201601f19908116603f01168101908382118183101715615a5257615a526159c5565b81604052828152876020848701011115615a6b57600080fd5b6146f78360208301602088016152d2565b60008251615a8e8184602087016152d2565b9190910192915050565b600060208284031215615aaa57600080fd5b815160ff8116811461411957600080fd5b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615aed8160178501602088016152d2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615b1e8160288401602088016152d2565b01602801949350505050565b600081615b3957615b39615703565b506000190190565b6000600019821415615b5557615b55615703565b506001019056feed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e01a2646970667358221220f493e4f9803dcb8d7d2c1e8b3ad046174c9b8589222a8353cf9cf8bcca194ff664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103455760003560e01c806377292d5b116101bf578063c09d6fb9116100fa578063e3b37f301161009d578063e3b37f30146107c6578063e58378bb146107d9578063e7a00232146107ee578063e995914914610815578063ebf0c7171461082a578063efaad0ec14610833578063f137993914610846578063f1f8044a1461084f57600080fd5b8063c09d6fb914610714578063c313607414610729578063c6b3665c1461073c578063cdc5598e14610751578063ce7c641014610766578063cf4186ec14610780578063d547741f146107a0578063dab5f340146107b357600080fd5b8063a217fddf11610162578063a217fddf14610667578063a4f276c71461066f578063a558b65c146106b9578063a95c4d62146106d3578063adaa039c146106e6578063b3679bda146106ef578063b3cd4254146106f8578063bb8e3f441461070157600080fd5b806377292d5b146105fc5780637837734f146106055780637b1a08381461061a57806385f8f4be146106235780638a39face1461062c57806391d148541461063f5780639ac8d38b14610652578063a0918c4f1461065f57600080fd5b80633644e5151161028f57806350a729281161023257806350a729281461056a57806354fd4d501461057d5780635671e8c91461059d5780635c975abb146105b05780636db6e031146105bb5780636e3b466d146105ce5780636e44a6c9146105e15780636e516bbe146105e957600080fd5b80633644e515146104c057806336568abe146104c85780633baa6fca146104db5780633bc270db146104ee5780633d3e3763146105015780633d4527b71461051457806344c63eec146105275780634f93d1ad1461054757600080fd5b80632013b4c4116102f75780632013b4c4146104015780632186b36814610433578063226d232a14610446578063248a9ca3146104595780632f2ff15d1461047c5780632f54bf6e1461048f57806330bba6c4146104a257806334fa224b146104ab57600080fd5b806301ffc9a71461034a57806302bb34c814610372578063068350b91461038957806306fdde03146103aa578063086425bc146103da5780631353ff75146103ef5780631acbc823146103f8575b600080fd5b61035d6103583660046152a8565b610862565b60405190151581526020015b60405180910390f35b61037b60115481565b604051908152602001610369565b6009546103979061ffff1681565b60405161ffff9091168152602001610369565b6103cd60405180604001604052806004815260200163141bdbdb60e21b81525081565b60405161036991906152fe565b6103ed6103e8366004615375565b610899565b005b61037b60055481565b61037b60105481565b600b5461041b90600160c01b90046001600160401b031681565b6040516001600160401b039091168152602001610369565b6103ed6104413660046153da565b610967565b6103ed6104543660046153da565b610d8b565b61037b6104673660046153f7565b60009081526079602052604090206001015490565b6103ed61048a366004615410565b6112f9565b61035d61049d3660046153da565b611323565b61037b60085481565b60095461039790600160381b900461ffff1681565b61037b61133d565b6103ed6104d6366004615410565b61134c565b600b5461041b906001600160401b031681565b6103ed6104fc366004615440565b6113ca565b6103ed61050f3660046154d9565b6117f0565b6103ed610522366004615515565b611b08565b60145461053a906001600160a01b031681565b6040516103699190615532565b600354600454610555919082565b60408051928352602083019190915201610369565b60015461053a906001600160a01b031681565b6103cd604051806040016040528060018152602001603160f81b81525081565b6103ed6105ab366004615515565b611df0565b60ab5460ff1661035d565b6103ed6105c9366004615546565b611f4a565b60095461035d9062010000900460ff1681565b61037b6127d2565b6103ed6105f73660046153da565b612956565b61037b600e5481565b600954610397906301000000900461ffff1681565b61037b600f5481565b61037b60075481565b61037b61063a3660046153f7565b612b14565b61035d61064d366004615410565b612b3c565b600d5461035d9060ff1681565b61035d612b67565b61037b600081565b61069e61067d3660046153da565b60126020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610369565b600b5461041b90600160801b90046001600160401b031681565b60025461053a906001600160a01b031681565b61037b600c5481565b61037b600a5481565b61039761271081565b6103ed61070f3660046153da565b612c8c565b61037b600080516020615b5d83398151915281565b6103ed6107373660046153da565b612d3d565b60095461039790600160281b900461ffff1681565b60095461039790600160481b900461ffff1681565b600b5461041b90600160401b90046001600160401b031681565b61037b61078e3660046153da565b60136020526000908152604090205481565b6103ed6107ae366004615410565b61317a565b6103ed6107c13660046153f7565b61319f565b6103ed6107d436600461559a565b613282565b61037b600080516020615b7d83398151915281565b61037b7f52d52760e40624a39bea36339850f64206470d82f714f11095b454fbff6de95281565b61037b600080516020615b9d83398151915281565b61037b60005481565b6103ed6108413660046155b7565b6135d7565b61037b60065481565b6103ed61085d3660046153da565b6136b7565b60006001600160e01b03198216637965db0b60e01b148061089357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6108a16138f6565b600260dd5414156108cd5760405162461bcd60e51b81526004016108c490615602565b60405180910390fd5b600260dd556108da61393e565b60405180604001604052806002815260200161313760f01b815250906109135760405162461bcd60e51b81526004016108c491906152fe565b5061091e3383613970565b610929338383613a24565b61093282613ae8565b6009546109539085908590859085906301000000900461ffff166000613b97565b61095c82613cd8565b5050600160dd555050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016109959190615532565b602060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d6919061564f565b604051806040016040528060018152602001603160f81b81525090610a0e5760405162461bcd60e51b81526004016108c491906152fe565b50610a176138f6565b601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061564f565b60405180604001604052806002815260200161313560f01b81525090610ac75760405162461bcd60e51b81526004016108c491906152fe565b50600260dd541415610aeb5760405162461bcd60e51b81526004016108c490615602565b600260dd556014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190615683565b505050509050806001600160401b0316600160009054906101000a90046001600160a01b03166001600160a01b031663bc87783f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be491906156ea565b610bee9190615719565b42101560405180604001604052806002815260200161199960f11b81525090610c2a5760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b0316639aa74a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca2919061564f565b1560405180604001604052806002815260200161333360f01b81525090610cdc5760405162461bcd60e51b81526004016108c491906152fe565b50600d54604080518082019091526002815261191b60f11b60208201529060ff1615610d1b5760405162461bcd60e51b81526004016108c491906152fe565b50600c54600254610d39916001600160a01b03909116908490613cf2565b600d805460ff19166001179055600c546040517f271b8a9c81b4d02d8aca6c2a2e341a4e3e125356c586780413e857a0fadd766a91610d7a91859190615731565b60405180910390a15050600160dd55565b610d9433611323565b604051806040016040528060018152602001601960f91b81525090610dcc5760405162461bcd60e51b81526004016108c491906152fe565b50610dd56138f6565b601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c919061564f565b60405180604001604052806002815260200161313560f01b81525090610e855760405162461bcd60e51b81526004016108c491906152fe565b50600260dd541415610ea95760405162461bcd60e51b81526004016108c490615602565b600260dd556014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190615683565b505050509050806001600160401b0316600160009054906101000a90046001600160a01b03166001600160a01b031663bc87783f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa291906156ea565b610fac9190615719565b42101560405180604001604052806002815260200161199960f11b81525090610fe85760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b0316639aa74a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611060919061564f565b1560405180604001604052806002815260200161333360f01b8152509061109a5760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b03166374478bb36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611112919061564f565b60405180604001604052806002815260200161033360f41b8152509061114b5760405162461bcd60e51b81526004016108c491906152fe565b5060006111566127d2565b90506000811160405180604001604052806002815260200161313160f01b815250906111955760405162461bcd60e51b81526004016108c491906152fe565b506002546040516370a0823160e01b81526001600160a01b03909116906370a08231906111c6903090600401615532565b602060405180830381865afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120791906156ea565b811115611284576002546040516370a0823160e01b81526001600160a01b03909116906370a082319061123e903090600401615532565b602060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f91906156ea565b611286565b805b9050806011600082825461129a9190615719565b90915550506002546112b6906001600160a01b03168483613cf2565b7f0f8819b8888ebff61f219df3a7380d5329e5c298966c09de72e7a1449149b47483826040516112e7929190615731565b60405180910390a15050600160dd5550565b60008281526079602052604090206001015461131481613d48565b61131e8383613d52565b505050565b6000610893600080516020615b7d83398151915283612b3c565b6000611347613dd8565b905090565b6001600160a01b03811633146113bc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108c4565b6113c68282613e55565b5050565b6113d333611323565b604051806040016040528060018152602001601960f91b8152509061140b5760405162461bcd60e51b81526004016108c491906152fe565b506114146138f6565b600260dd5414156114375760405162461bcd60e51b81526004016108c490615602565b600260dd556014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015611485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a99190615683565b505050509050806001600160401b0316421060405180604001604052806002815260200161323560f01b815250906114f45760405162461bcd60e51b81526004016108c491906152fe565b50601460009054906101000a90046001600160a01b03166001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c919061564f565b1560405180604001604052806002815260200161343160f01b815250906115a65760405162461bcd60e51b81526004016108c491906152fe565b5060145460408051630edaf7f360e11b815290516000926001600160a01b031691631db5efe69160048083019260209291908290030181865afa1580156115f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611615919061574a565b90506000611624600a54612b14565b90506001600160a01b03821661173557600b54604080518082019091526002815261199b60f11b602082015290600160c01b90046001600160401b031642116116805760405162461bcd60e51b81526004016108c491906152fe565b5061168c868686613ebc565b60405180604001604052806002815260200161031360f41b815250906116c55760405162461bcd60e51b81526004016108c491906152fe565b50601454604051620c8f6d60e81b81526001600160a01b0390911690630c8f6d00906116f5908990600401615532565b600060405180830381600087803b15801561170f57600080fd5b505af1158015611723573d6000803e3d6000fd5b50505050611732601054612b14565b90505b61174c86336014546001600160a01b031684614120565b60145460405163b61a40c760e01b8152600160048201526001600160a01b039091169063b61a40c790602401600060405180830381600087803b15801561179257600080fd5b505af11580156117a6573d6000803e3d6000fd5b505050507ffd1c6e1b2189d312d7360ee69c2e59b038f3f1e637e102efc2c3a833b617958e86826040516117db929190615731565b60405180910390a15050600160dd5550505050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b815260040161181e9190615532565b602060405180830381865afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f919061564f565b604051806040016040528060018152602001603160f81b815250906118975760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190615683565b505050509050806001600160401b0316421060405180604001604052806002815260200161323560f01b815250906119505760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190615683565b5050600b5492935050506001600160401b0380861691161080156119f35750826001600160401b0316846001600160401b0316105b8015611a115750806001600160401b0316836001600160401b031611155b604051806040016040528060018152602001603960f81b81525090611a495760405162461bcd60e51b81526004016108c491906152fe565b50600b8054600160401b600160c01b031916600160401b6001600160401b0387811682810267ffffffffffffffff60801b191693909317600160801b938402176001600160c01b038116600160c01b8984168102918217968790556040805193851692851692909217835293860483166020830152938504821693810193909352920490911660608201527feedf049ba2a9e400be9e2a2d93b7e6023411a5c4fd77fe703bc75c2fea691fc3906080015b60405180910390a150505050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401611b369190615532565b602060405180830381865afa158015611b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b77919061564f565b604051806040016040528060018152602001603160f81b81525090611baf5760405162461bcd60e51b81526004016108c491906152fe565b506014546040805162dc25a360e81b815290516000926001600160a01b03169163dc25a3009160048083019260a09291908290030181865afa158015611bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1d9190615683565b505050509050806001600160401b03164210611d4f576001546040805163bc87783f60e01b815290516001600160401b038416926001600160a01b03169163bc87783f9160048083019260209291908290030181865afa158015611c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca991906156ea565b611cb39190615719565b421115604051806040016040528060028152602001610ccd60f21b81525090611cef5760405162461bcd60e51b81526004016108c491906152fe565b506014546040516358e0fb5560e01b8152600160048201526001600160a01b03909116906358e0fb5590602401600060405180830381600087803b158015611d3657600080fd5b505af1158015611d4a573d6000803e3d6000fd5b505050505b611d57614135565b601454604051635671e8c960e01b8152600060048201526001600160a01b0390911690635671e8c990602401600060405180830381600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b505060405184151581523092507fcf113a21b92df7813071b3bb491583c8469cf02f9b1c0280d4500d339570a17f915060200160405180910390a25050565b6001546001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401611e1e9190615532565b602060405180830381865afa158015611e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5f919061564f565b604051806040016040528060018152602001603160f81b81525090611e975760405162461bcd60e51b81526004016108c491906152fe565b5060018115151415611ee757611eab612b67565b1560405180604001604052806002815260200161323960f01b81525090611ee55760405162461bcd60e51b81526004016108c491906152fe565b505b601454604051635671e8c960e01b815282151560048201526001600160a01b0390911690635671e8c990602401600060405180830381600087803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b505050505b50565b601454600160a81b900460ff1615808015611f7257506014546001600160a01b90910460ff16105b80611f935750303b158015611f935750601454600160a01b900460ff166001145b611ff65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108c4565b6014805460ff60a01b1916600160a01b1790558015612023576014805460ff60a81b1916600160a81b1790555b604051635c1c862160e01b815273__$ad759d264299add65d0b3e8b0deb20d304$__90635c1c86219061205a908590600401615532565b60006040518083038186803b15801561207257600080fd5b505af4158015612086573d6000803e3d6000fd5b505050506120c960405180604001604052806004815260200163141bdbdb60e21b815250604051806040016040528060018152602001603160f81b815250614189565b6120d282612c8c565b60405163b95f0a6360e01b815273__$ad759d264299add65d0b3e8b0deb20d304$__9063b95f0a639061210b9087908790600401615767565b60006040518083038186803b15801561212357600080fd5b505af4158015612137573d6000803e3d6000fd5b505050506121423390565b600180546001600160a01b0319166001600160a01b039290921691909117905561219561217260208601866153da565b6101a08501356101c08601356101e08701356102008801356102208901356141bc565b73__$ad759d264299add65d0b3e8b0deb20d304$__635c1c86216121bf60408701602088016153da565b6040518263ffffffff1660e01b81526004016121db9190615532565b60006040518083038186803b1580156121f357600080fd5b505af4158015612207573d6000803e3d6000fd5b505050508360016002811061221e5761221e6157ba565b60200201602081019061223191906153da565b600280546001600160a01b0319166001600160a01b03929092169190911781558335600781905560208086013560088190556040805180820190915293845261034360f41b918401919091521061229b5760405162461bcd60e51b81526004016108c491906152fe565b506122ad8360025b60200201356142cf565b6009805461ffff191661ffff929092169190911790556122ce8360036122a3565b6009805461ffff9290921663010000000264ffff000000199092169190911790556122fa8360046122a3565b600960056101000a81548161ffff021916908361ffff160217905550600160009054906101000a90046001600160a01b03166001600160a01b031663d8c128226040518163ffffffff1660e01b8152600401602060405180830381865afa158015612369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238d91906157d0565b60095461ffff9182166301000000909104909116108015906124385750600160009054906101000a90046001600160a01b03166001600160a01b031663884c45096040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242191906157d0565b60095461ffff918216630100000090910490911611155b60405180604001604052806002815260200161333760f01b815250906124715760405162461bcd60e51b81526004016108c491906152fe565b50600160009054906101000a90046001600160a01b03166001600160a01b031663397a1cb36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e991906157d0565b60095461ffff918216600160281b909104909116108015906125945750600160009054906101000a90046001600160a01b03166001600160a01b031663d6de71fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257d91906157d0565b60095461ffff918216600160281b90910490911611155b60405180604001604052806002815260200161066760f31b815250906125cd5760405162461bcd60e51b81526004016108c491906152fe565b506125d98360056122a3565b6009805461ffff92909216600160381b0261ffff60381b199092169190911790556126058360066122a3565b6009805461ffff60481b1916600160481b61ffff93841602179081905560e0850135600a8190556127109261264292600160381b900416906157eb565b61264c919061580a565b60055560095461271090819061ffff600160481b820481169161267891600160381b909104168361582c565b61ffff16600a5461268991906157eb565b61269391906157eb565b61269d919061580a565b6126a7919061580a565b6006556126b8610100840135614336565b600b805467ffffffffffffffff19166001600160401b03929092169190911790556126f56126f0610120850135610100860135615719565b614336565b600b8054600160401b600160c01b031916600160401b6001600160401b0393841690810267ffffffffffffffff60801b191691909117600160801b918202179182905561274f926126f09261014088013592900416615719565b600b80546001600160401b0392909216600160c01b026001600160c01b0390921691909117905561016083013560035561018083013560045580156127cc576014805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611afa565b50505050565b6009546010546000918291612710916127f19161ffff909116906157eb565b6127fb919061580a565b905060008160105461280d919061584f565b90506000806000806000601460009054906101000a90046001600160a01b03166001600160a01b031663dc25a3006040518163ffffffff1660e01b815260040160a060405180830381865afa15801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e9190615683565b601154604051633954a8c760e01b8152600481018d9052602481019190915261ffff851660448201526001600160401b0380871660648301528085166084830152831660a482015260c481018290529499509297509095509350915073__$9fb2edb4e987366f36b33ed733baa6b7a5$$ad759d264299add65d0b3e8b0deb20d304$__9063749a979a9060240160006040518083038186803b158015613a6f57600080fd5b505af4158015613a83573d6000803e3d6000fd5b5050506001600160a01b038416600090815260136020526040902054829150613aad908490615719565b111560405180604001604052806002815260200161062760f31b815250906127cc5760405162461bcd60e51b81526004016108c491906152fe565b604051633a4d4bcd60e11b81526004810182905273__$ad759d264299add65d0b3e8b0deb20d304$__9063749a979a9060240160006040518083038186803b158015613b3357600080fd5b505af4158015613b47573d6000803e3d6000fd5b50505050600a5481601054613b5c9190615719565b111560405180604001604052806002815260200161313960f01b815250906113c65760405162461bcd60e51b81526004016108c491906152fe565b3360009081526013602052604081208054869290613bb6908490615719565b9091555060009050613c1133600080516020615b5d83398151915260001b600754878b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b90508015613c2d57613c27338685600186614702565b50613cd0565b6000613c8233600080516020615b5d83398151915260001b600854888c8c8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b90508060405180604001604052806002815260200161189960f11b81525090613cbe5760405162461bcd60e51b81526004016108c491906152fe565b50613ccd338786600087614702565b50505b505050505050565b80600e6000828254613cea9190615719565b909155505050565b61131e8363a9059cbb60e01b8484604051602401613d11929190615731565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614935565b611f478133614a07565b613d5c8282612b3c565b6113c65760008281526079602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613d943390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006113477f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613e0861010f5490565b610110546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b613e5f8282612b3c565b156113c65760008281526079602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015613efd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f2591908101906159db565b604051602001613f359190615a7c565b6040516020818303038152906040528051906020012090506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb19190615a98565b90506000613fbd61133d565b604080517f52d52760e40624a39bea36339850f64206470d82f714f11095b454fbff6de95260208201526001600160a01b038a16918101919091523060608201526080810185905260ff841660a082015260c0016040516020818303038152906040528051906020012060405160200161404e92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600154601f8a0183900483028501830190935288845293506001600160a01b0390911691632f54bf6e916140b69185918b908b9081908401838280828437600092019190915250614a6b92505050565b6040518263ffffffff1660e01b81526004016140d29190615532565b602060405180830381865afa1580156140ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614113919061564f565b93505050505b9392505050565b6127cc6001600160a01b038516848484614a8f565b61413d6138f6565b60ab805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586141723390565b60405161417f9190615532565b60405180910390a1565b601454600160a81b900460ff166141b25760405162461bcd60e51b81526004016108c49061597a565b6113c68282614ab0565b6001546040805163cc6f033360e01b815290516000926001600160a01b03169163cc6f0333916004808301926020929190829003018187875af1158015614207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422b919061574a565b601480546001600160a01b0319166001600160a01b038381169182179092556040516376dfa56160e11b8152306004820152918a16602483015260448201899052606482018890526084820187905260a4820186905260c4820185905291925063edbf4ac29060e401600060405180830381600087803b1580156142ae57600080fd5b505af11580156142c2573d6000803e3d6000fd5b5050505050505050505050565b600061ffff8211156143325760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b60648201526084016108c4565b5090565b60006001600160401b038211156143325760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016108c4565b601454600160a81b900460ff1661393c5760405162461bcd60e51b81526004016108c49061597a565b601454600160a81b900460ff166143f05760405162461bcd60e51b81526004016108c49061597a565b61393c614af5565b601454600160a81b900460ff166144215760405162461bcd60e51b81526004016108c49061597a565b61393c614b2a565b600082815260796020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b604051633a4d4bcd60e11b81526004810182905273__$ad759d264299add65d0b3e8b0deb20d304$__9063749a979a9060240160006040518083038186803b1580156144bf57600080fd5b505af41580156144d3573d6000803e3d6000fd5b5050505060065481600f546144e89190615719565b111560405180604001604052806002815260200161191960f11b815250906113c65760405162461bcd60e51b81526004016108c491906152fe565b80600f6000828254613cea9190615719565b600b54600090600160801b90046001600160401b031642118015611347575050600b54600160c01b90046001600160401b031642111590565b600260006145c633600080516020615b9d83398151915260001b600754600089898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b905080156145ea57611f42336009548590600160281b900461ffff16600186614702565b600061464033600080516020615b9d83398151915260001b60085460008a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061469992505050565b90508060405180604001604052806002815260200161313360f01b8152509061467c5760405162461bcd60e51b81526004016108c491906152fe565b50613cd0336009548690600160281b900461ffff16600087614702565b6040516bffffffffffffffffffffffff19606087901b16602082015260348101859052605481018490526074810183905260009081906094016040516020818303038152906040528051906020012090506146f78360005483614b5a565b979650505050505050565b60018215151415614775576007546001600160a01b038616600090815260126020526040902054614734908690615719565b111560405180604001604052806002815260200161032360f41b8152509061476f5760405162461bcd60e51b81526004016108c491906152fe565b506147d9565b6008546001600160a01b03861660009081526012602052604090205461479c908690615719565b111560405180604001604052806002815260200161323160f01b815250906147d75760405162461bcd60e51b81526004016108c491906152fe565b505b6040516353baaca160e11b8152600481018590526024810184905260009073__$ad759d264299add65d0b3e8b0deb20d304$__9063a775594290604401602060405180830381865af4158015614833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061485791906156ea565b90506148638682614b70565b61486d8686614b8a565b600061487886612b14565b60145460405163020caa2560e51b81529192506001600160a01b03169063419544a0906148ab908a908590600401615731565b600060405180830381600087803b1580156148c557600080fd5b505af11580156148d9573d6000803e3d6000fd5b5050604080518981526020810185905260ff87168183015290513093506001600160a01b038b1692507f6666857ade20eaaed88e2671721b22c45635cc01006796336554a69f926be2f99181900360600190a350505050505050565b600061498a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b9e9092919063ffffffff16565b80519091501561131e57808060200190518101906149a8919061564f565b61131e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108c4565b614a118282612b3c565b6113c657614a29816001600160a01b03166014614bb5565b614a34836020614bb5565b604051602001614a45929190615abb565b60408051601f198184030181529082905262461bcd60e51b82526108c4916004016152fe565b6000806000614a7a8585614d50565b91509150614a8781614d96565b509392505050565b6127cc846323b872dd60e01b858585604051602401613d1193929190615866565b601454600160a81b900460ff16614ad95760405162461bcd60e51b81526004016108c49061597a565b81516020928301208151919092012061010f9190915561011055565b601454600160a81b900460ff16614b1e5760405162461bcd60e51b81526004016108c49061597a565b60ab805460ff19169055565b601454600160a81b900460ff16614b535760405162461bcd60e51b81526004016108c49061597a565b600160dd55565b600082614b678584614f4c565b14949350505050565b80156113c657614b808282614f91565b6113c68282614fa9565b614b948282614f91565b6113c68282614ff6565b6060614bad8484600085615037565b949350505050565b60606000614bc48360026157eb565b614bcf906002615719565b6001600160401b03811115614be657614be66159c5565b6040519080825280601f01601f191660200182016040528015614c10576020820181803683370190505b509050600360fc1b81600081518110614c2b57614c2b6157ba565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614c5a57614c5a6157ba565b60200101906001600160f81b031916908160001a9053506000614c7e8460026157eb565b614c89906001615719565b90505b6001811115614d01576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614cbd57614cbd6157ba565b1a60f81b828281518110614cd357614cd36157ba565b60200101906001600160f81b031916908160001a90535060049490941c93614cfa81615b2a565b9050614c8c565b5083156141195760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108c4565b600080825160411415614d875760208301516040840151606085015160001a614d7b8782858561515d565b94509450505050614d8f565b506000905060025b9250929050565b6000816004811115614daa57614daa615639565b1415614db35750565b6001816004811115614dc757614dc7615639565b1415614e105760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016108c4565b6002816004811115614e2457614e24615639565b1415614e725760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016108c4565b6003816004811115614e8657614e86615639565b1415614edf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016108c4565b6004816004811115614ef357614ef3615639565b1415611f475760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016108c4565b600081815b8451811015614a8757614f7d82868381518110614f7057614f706157ba565b6020026020010151615240565b915080614f8981615b41565b915050614f51565b6002546113c6906001600160a01b0316833084614a8f565b6001600160a01b03821660009081526012602052604081206001018054839290614fd4908490615719565b9250508190555080600c6000828254614fed9190615719565b90915550505050565b6001600160a01b0382166000908152601260205260408120805483929061501e908490615719565b925050819055508060106000828254614fed9190615719565b6060824710156150985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108c4565b6001600160a01b0385163b6150ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c4565b600080866001600160a01b0316858760405161510b9190615a7c565b60006040518083038185875af1925050503d8060008114615148576040519150601f19603f3d011682016040523d82523d6000602084013e61514d565b606091505b50915091506146f782828661526f565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561518a5750600090506003615237565b8460ff16601b141580156151a257508460ff16601c14155b156151b35750600090506004615237565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015615207573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661523057600060019250925050615237565b9150600090505b94509492505050565b600081831061525c576000828152602084905260409020614119565b6000838152602083905260409020614119565b6060831561527e575081614119565b82511561528e5782518084602001fd5b8160405162461bcd60e51b81526004016108c491906152fe565b6000602082840312156152ba57600080fd5b81356001600160e01b03198116811461411957600080fd5b60005b838110156152ed5781810151838201526020016152d5565b838111156127cc5750506000910152565b602081526000825180602084015261531d8160408501602087016152d2565b601f01601f19169190910160400192915050565b60008083601f84011261534357600080fd5b5081356001600160401b0381111561535a57600080fd5b6020830191508360208260051b8501011115614d8f57600080fd5b6000806000806060858703121561538b57600080fd5b84356001600160401b038111156153a157600080fd5b6153ad87828801615331565b90989097506020870135966040013595509350505050565b6001600160a01b0381168114611f4757600080fd5b6000602082840312156153ec57600080fd5b8135614119816153c5565b60006020828403121561540957600080fd5b5035919050565b6000806040838503121561542357600080fd5b823591506020830135615435816153c5565b809150509250929050565b60008060006040848603121561545557600080fd5b8335615460816153c5565b925060208401356001600160401b038082111561547c57600080fd5b818601915086601f83011261549057600080fd5b81358181111561549f57600080fd5b8760208285010111156154b157600080fd5b6020830194508093505050509250925092565b6001600160401b0381168114611f4757600080fd5b600080604083850312156154ec57600080fd5b82356154f7816154c4565b91506020830135615435816154c4565b8015158114611f4757600080fd5b60006020828403121561552757600080fd5b813561411981615507565b6001600160a01b0391909116815260200190565b60008060006102a0848603121561555c57600080fd5b604084018581111561556d57600080fd5b84935061028085018681111561558257600080fd5b9092503561558f816153c5565b809150509250925092565b6000602082840312156155ac57600080fd5b8135614119816154c4565b6000806000604084860312156155cc57600080fd5b83356001600160401b038111156155e257600080fd5b6155ee86828701615331565b909790965060209590950135949350505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561566157600080fd5b815161411981615507565b805161ffff8116811461567e57600080fd5b919050565b600080600080600060a0868803121561569b57600080fd5b85516156a6816154c4565b94506156b46020870161566c565b935060408601516156c4816154c4565b60608701519093506156d5816154c4565b80925050608086015190509295509295909350565b6000602082840312156156fc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561572c5761572c615703565b500190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561575c57600080fd5b8151614119816153c5565b6102808101818460005b60028110156157a3578135615785816153c5565b6001600160a01b031683526020928301929190910190600101615771565b505050610240836040840137600081529392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156157e257600080fd5b6141198261566c565b600081600019048311821515161561580557615805615703565b500290565b60008261582757634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff8381169083168181101561584757615847615703565b039392505050565b60008282101561586157615861615703565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181815b808511156158c55781600019048211156158ab576158ab615703565b808516156158b857918102915b93841c939080029061588f565b509250929050565b6000826158dc57506001610893565b816158e957506000610893565b81600181146158ff576002811461590957615925565b6001915050610893565b60ff84111561591a5761591a615703565b50506001821b610893565b5060208310610133831016604e8410600b8410161715615948575081810a610893565b615952838361588a565b806000190482111561596657615966615703565b029392505050565b600061411983836158cd565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156159ed57600080fd5b81516001600160401b0380821115615a0457600080fd5b818401915084601f830112615a1857600080fd5b815181811115615a2a57615a2a6159c5565b604051601f8201601f19908116603f01168101908382118183101715615a5257615a526159c5565b81604052828152876020848701011115615a6b57600080fd5b6146f78360208301602088016152d2565b60008251615a8e8184602087016152d2565b9190910192915050565b600060208284031215615aaa57600080fd5b815160ff8116811461411957600080fd5b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615aed8160178501602088016152d2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615b1e8160288401602088016152d2565b01602801949350505050565b600081615b3957615b39615703565b506000190190565b6000600019821415615b5557615b55615703565b506001019056feed4b80c86c7954bdbf516c492acb4a2899eb0ee85b7c74e26d85e55a07562c95b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e13e31188d81b941f4c541528790db4031bef078b78d364bde6fc2d4e5ad79e01a2646970667358221220f493e4f9803dcb8d7d2c1e8b3ad046174c9b8589222a8353cf9cf8bcca194ff664736f6c634300080a0033",
  "libraries": {
    "VestingLogic": "0x4018dfa69C71AAE148AaF29Fd07b48aEc4C3B61e",
    "PoolLogic": "0xEC110FbCAd8311fbB06BAD7970De252133F0281a"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyTokenInCrowdfundingPool(bytes32[],uint256)": {
        "details": "Must be in time for crowdfunding pool and pool is not closed",
        "params": {
          "_purchaseAmount": "Purchase amount of investor",
          "proof": "Respective proof for a leaf, which is respective for investor in merkle tree"
        }
      },
      "buyTokenInGalaxyPool(bytes32[],uint256,uint256)": {
        "details": "Must be in time for whale and pool is not closed",
        "params": {
          "_maxPurchaseBaseOnAllocations": "Max purchase amount base on allocation of whale",
          "_purchaseAmount": "Purchase amount of investor",
          "proof": "Respective proof for a leaf, which is respective for investor in merkle tree"
        }
      },
      "cancelPool(bool)": {
        "details": "Only admin can call it"
      },
      "claimParticipationFee(address)": {
        "params": {
          "_beneficiary": "Address to receive"
        }
      },
      "claimTokenFee(address)": {
        "params": {
          "_beneficiary": "Address to receive"
        }
      },
      "getIDOTokenAmountByOfferedCurrency(uint256)": {
        "details": "Get IDO token amount base on amount of purchase token",
        "params": {
          "_amount": "Amount of purchase token"
        },
        "returns": {
          "_0": "Return amount of respective IDO token"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address[2],uint256[18],address)": {
        "params": {
          "addrs": "Array of address includes: - address of IDO token - Can be zero address - address of purchase token ",
          "uints": "Array of pool information includes: - max purchase amount for KYC user, - max purchase amount for Not KYC user, - token fee percentage, - galaxy participation fee percentage, - crowdfunding participation fee percentage, - galaxy pool proportion, - early access proportion, - total raise amount, - whale open time, - whale duration, - community duration, - rate of IDO token (based on README formula), - decimal of IDO token (based on README formula, is different from decimals in contract of IDO token), - TGE date, - TGE percentage, - vesting cliff, - vesting frequency, - number of vesting release"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setRoot(bytes32)": {
        "details": "Only admin can call it",
        "params": {
          "_root": "Root of merkle tree"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateTime(uint64,uint64)": {
        "details": "Only admin can call it, galaxy pool must be closed before crowdfunding pool",
        "params": {
          "_newCommunityCloseTime": "New close time of crowdfunding pool",
          "_newWhaleCloseTime": "New close time of galaxy pool"
        }
      },
      "withdrawPurchasedAmount(address)": {
        "params": {
          "_beneficiary": "Address of receiver"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER_ROLE()": {
        "notice": "keccak256(\"OWNER_ROLE\")"
      },
      "buyTokenInCrowdfundingPool(bytes32[],uint256)": {
        "notice": "Investor buy token in crowdfunding pool"
      },
      "buyTokenInGalaxyPool(bytes32[],uint256,uint256)": {
        "notice": "Investor buy token in galaxy pool"
      },
      "cancelPool(bool)": {
        "notice": "Cancel pool: cancel project, nobody can buy token"
      },
      "claimParticipationFee(address)": {
        "notice": "System's admin participation token fee only when project is success after lockup time"
      },
      "claimTokenFee(address)": {
        "notice": "System's admin receive token fee only when project is success after lockup time"
      },
      "initialize(address[2],uint256[18],address)": {
        "notice": "Initialize a pool with its information"
      },
      "setRoot(bytes32)": {
        "notice": "Set merkle tree root after snapshoting information of investor"
      },
      "updateTime(uint64,uint64)": {
        "notice": "Update time for galaxy pool and crowdfunding pool"
      },
      "withdrawPurchasedAmount(address)": {
        "notice": "When project is fail (cancelled by admin or not be funded enough IDO token)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7630,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "root",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 7538,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "ignitionFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IIgnitionFactory)7858"
      },
      {
        "astId": 7542,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "purchaseToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1932"
      },
      {
        "astId": 7546,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "offeredCurrency",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(OfferedCurrency)7504_storage"
      },
      {
        "astId": 7549,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "maxPurchaseAmountForGalaxyPool",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7552,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "maxPurchaseAmountForEarlyAccess",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7555,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "maxPurchaseAmountForKYCUser",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7558,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "maxPurchaseAmountForNotKYCUser",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7561,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "tokenFeePercentage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 7564,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "tokenFeeClaimedStatus",
        "offset": 2,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 7567,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "galaxyParticipationFeePercentage",
        "offset": 3,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 7570,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "crowdfundingParticipationFeePercentage",
        "offset": 5,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 7573,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "galaxyPoolProportion",
        "offset": 7,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 7576,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "earlyAccessProportion",
        "offset": 9,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 7579,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "totalRaiseAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7582,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "whaleOpenTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 7585,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "whaleCloseTime",
        "offset": 8,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 7588,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "communityOpenTime",
        "offset": 16,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 7591,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "communityCloseTime",
        "offset": 24,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 7594,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "participationFeeAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7597,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "participationFeeClaimedStatus",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 7600,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "purchasedAmountInGalaxyPool",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 7603,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "purchasedAmountInEarlyAccess",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7606,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "purchasedAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 7609,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "fundClaimedAmount",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 7615,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "userPurchasedAmount",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(PurchaseAmount)7511_storage)"
      },
      {
        "astId": 7620,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "whalePurchasedAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7624,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "vesting",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IVesting)7969"
      },
      {
        "astId": 419,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 20,
        "slot": "20",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 21,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 1033,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1841,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "71",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "_roles",
        "offset": 0,
        "slot": "121",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "122",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 584,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "171",
        "type": "t_bool"
      },
      {
        "astId": 689,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "172",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 704,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 748,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "222",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1657,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "271",
        "type": "t_bytes32"
      },
      {
        "astId": 1659,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "272",
        "type": "t_bytes32"
      },
      {
        "astId": 1797,
        "contract": "contracts/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "273",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1932": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IIgnitionFactory)7858": {
        "encoding": "inplace",
        "label": "contract IIgnitionFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVesting)7969": {
        "encoding": "inplace",
        "label": "contract IVesting",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PurchaseAmount)7511_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PoolStorage.PurchaseAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(PurchaseAmount)7511_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(OfferedCurrency)7504_storage": {
        "encoding": "inplace",
        "label": "struct PoolStorage.OfferedCurrency",
        "members": [
          {
            "astId": 7501,
            "contract": "contracts/core/Pool.sol:Pool",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7503,
            "contract": "contracts/core/Pool.sol:Pool",
            "label": "decimal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PurchaseAmount)7511_storage": {
        "encoding": "inplace",
        "label": "struct PoolStorage.PurchaseAmount",
        "members": [
          {
            "astId": 7506,
            "contract": "contracts/core/Pool.sol:Pool",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7508,
            "contract": "contracts/core/Pool.sol:Pool",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7510,
            "contract": "contracts/core/Pool.sol:Pool",
            "label": "withdrawn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/core/Pool.sol:Pool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/core/Pool.sol:Pool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}